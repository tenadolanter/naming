import { h as ref, y as watch, a2 as getCurrentScope, a3 as onScopeDispose, p as unref, a4 as getCurrentInstance, l as onMounted, U as nextTick, a5 as isString$1, a6 as isArray$1, a7 as isObject$1, a8 as camelize, d as defineComponent, o as openBlock, c as createElementBlock, m as createBaseVNode, a9 as hasOwn, aa as warn, ab as NOOP, k as computed, O as inject, ac as isRef, ad as isFunction$1, H as shallowRef, ae as onBeforeUnmount, af as onBeforeMount, Y as provide, r as renderSlot, N as mergeProps, ag as toRef, A as onUnmounted, ah as reactive, ai as toRefs, n as normalizeClass, C as onUpdated, J as createVNode, F as Fragment, a1 as useSlots, w as withCtx, b as createBlock, K as resolveDynamicComponent, Q as normalizeStyle, a as createTextVNode, t as toDisplayString, e as createCommentVNode, aj as TransitionGroup, ak as useAttrs$1, a0 as withModifiers, al as withDirectives, am as vShow, T as Transition, an as cloneVNode, ao as Text, ap as Comment, aq as Teleport, W as readonly, ar as onDeactivated, as as isDate, G as renderList, Z as withKeys, at as toRaw, z as watchEffect, au as toRawType, E as resolveComponent, av as resolveDirective, aw as vModelText, _ as _export_sfc$1, q as pushScopeId, s as popScopeId } from "./chunks/framework.jFWLL5KV.js";
const composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
  const handleEvent = (event) => {
    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
    if (checkForDefaultPrevented === false || !shouldPrevent) {
      return oursHandler == null ? void 0 : oursHandler(event);
    }
  };
  return handleEvent;
};
var _a;
const isClient = typeof window !== "undefined";
const isString = (val) => typeof val === "string";
const noop$1 = () => {
};
const isIOS = isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref(r2) {
  return typeof r2 === "function" ? r2() : unref(r2);
}
function createFilterWrapper(filter, fn2) {
  function wrapper(...args) {
    return new Promise((resolve, reject) => {
      Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve).catch(reject);
    });
  }
  return wrapper;
}
function debounceFilter(ms, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$1;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$1;
  };
  const filter = (invoke) => {
    const duration = resolveUnref(ms);
    const maxDuration = resolveUnref(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve(invoke());
      }, duration);
    });
  };
  return filter;
}
function identity$1(arg) {
  return arg;
}
function tryOnScopeDispose(fn2) {
  if (getCurrentScope()) {
    onScopeDispose(fn2);
    return true;
  }
  return false;
}
function useDebounceFn(fn2, ms = 200, options = {}) {
  return createFilterWrapper(debounceFilter(ms, options), fn2);
}
function refDebounced(value, ms = 200, options = {}) {
  const debounced = ref(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms, options);
  watch(value, () => updater());
  return debounced;
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance())
    onMounted(fn2);
  else if (sync)
    fn2();
  else
    nextTick(fn2);
}
function unrefElement(elRef) {
  var _a2;
  const plain = resolveUnref(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow = isClient ? window : void 0;
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$1;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register2 = (el, event, listener, options2) => {
    el.addEventListener(event, listener, options2);
    return () => el.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(() => [unrefElement(target), resolveUnref(options)], ([el, options2]) => {
    cleanup();
    if (!el)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register2(el, event, listener, options2));
    }));
  }, { immediate: true, flush: "post" });
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
let _iOSWorkaround = false;
function onClickOutside(target, handler, options = {}) {
  const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  if (isIOS && !_iOSWorkaround) {
    _iOSWorkaround = true;
    Array.from(window2.document.body.children).forEach((el) => el.addEventListener("click", noop$1));
  }
  let shouldListen = true;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el) => el === event.target || event.composedPath().includes(el));
      } else {
        const el = unrefElement(target2);
        return el && (event.target === el || event.composedPath().includes(el));
      }
    });
  };
  const listener = (event) => {
    const el = unrefElement(target);
    if (!el || el === event.target || event.composedPath().includes(el))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler(event);
  };
  const cleanup = [
    useEventListener(window2, "click", listener, { passive: true, capture }),
    useEventListener(window2, "pointerdown", (e) => {
      const el = unrefElement(target);
      if (el)
        shouldListen = !e.composedPath().includes(el) && !shouldIgnore(e);
    }, { passive: true }),
    detectIframe && useEventListener(window2, "blur", (event) => {
      var _a2;
      const el = unrefElement(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(window2.document.activeElement)))
        handler(event);
    })
  ].filter(Boolean);
  const stop = () => cleanup.forEach((fn2) => fn2());
  return stop;
}
function useSupported(callback, sync = false) {
  const isSupported = ref();
  const update = () => isSupported.value = Boolean(callback());
  update();
  tryOnMounted(update, sync);
  return isSupported;
}
const _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
_global[globalKey] = _global[globalKey] || {};
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch(() => unrefElement(target), (el) => {
    cleanup();
    if (isSupported.value && window2 && el) {
      observer = new ResizeObserver(callback);
      observer.observe(el, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useMutationObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
  let observer;
  const isSupported = useSupported(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch(() => unrefElement(target), (el) => {
    cleanup();
    if (isSupported.value && window2 && el) {
      observer = new MutationObserver(callback);
      observer.observe(el, mutationOptions);
    }
  }, { immediate: true });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity$1
}, _TransitionPresets);
const isFirefox = () => isClient && /firefox/i.test(window.navigator.userAgent);
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
var Symbol$1 = root.Symbol;
var objectProto$e = Object.prototype;
var hasOwnProperty$b = objectProto$e.hasOwnProperty;
var nativeObjectToString$1 = objectProto$e.toString;
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty$b.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$d = Object.prototype;
var nativeObjectToString = objectProto$d.toString;
function objectToString(value) {
  return nativeObjectToString.call(value);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var symbolTag$3 = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag$3;
}
function arrayMap(array4, iteratee) {
  var index = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array4[index], index, array4);
  }
  return result;
}
var isArray = Array.isArray;
var INFINITY$3 = 1 / 0;
var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray(value)) {
    return arrayMap(value, baseToString) + "";
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$3 ? "-0" : result;
}
var reWhitespace = /\s/;
function trimmedEndIndex(string3) {
  var index = string3.length;
  while (index-- && reWhitespace.test(string3.charAt(index))) {
  }
  return index;
}
var reTrimStart = /^\s+/;
function baseTrim(string3) {
  return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
}
function isObject(value) {
  var type4 = typeof value;
  return value != null && (type4 == "object" || type4 == "function");
}
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var INFINITY$2 = 1 / 0, MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY$2 || value === -INFINITY$2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
function toInteger(value) {
  var result = toFinite(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
function identity(value) {
  return value;
}
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$c = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$a = objectProto$c.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$a).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern4 = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern4.test(toSource(value));
}
function getValue$1(object4, key) {
  return object4 == null ? void 0 : object4[key];
}
function getNative(object4, key) {
  var value = getValue$1(object4, key);
  return baseIsNative(value) ? value : void 0;
}
var WeakMap = getNative(root, "WeakMap");
var objectCreate = Object.create;
var baseCreate = /* @__PURE__ */ function() {
  function object4() {
  }
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object4.prototype = proto;
    var result = new object4();
    object4.prototype = void 0;
    return result;
  };
}();
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
function noop() {
}
function copyArray(source, array4) {
  var index = -1, length = source.length;
  array4 || (array4 = Array(length));
  while (++index < length) {
    array4[index] = source[index];
  }
  return array4;
}
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
function constant(value) {
  return function() {
    return value;
  };
}
var defineProperty = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var baseSetToString = !defineProperty ? identity : function(func, string3) {
  return defineProperty(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string3),
    "writable": true
  });
};
const baseSetToString$1 = baseSetToString;
var setToString = shortOut(baseSetToString$1);
function arrayEach(array4, iteratee) {
  var index = -1, length = array4 == null ? 0 : array4.length;
  while (++index < length) {
    if (iteratee(array4[index], index, array4) === false) {
      break;
    }
  }
  return array4;
}
function baseFindIndex(array4, predicate, fromIndex, fromRight) {
  var length = array4.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array4[index], index, array4)) {
      return index;
    }
  }
  return -1;
}
function baseIsNaN(value) {
  return value !== value;
}
function strictIndexOf(array4, value, fromIndex) {
  var index = fromIndex - 1, length = array4.length;
  while (++index < length) {
    if (array4[index] === value) {
      return index;
    }
  }
  return -1;
}
function baseIndexOf(array4, value, fromIndex) {
  return value === value ? strictIndexOf(array4, value, fromIndex) : baseFindIndex(array4, baseIsNaN, fromIndex);
}
function arrayIncludes(array4, value) {
  var length = array4 == null ? 0 : array4.length;
  return !!length && baseIndexOf(array4, value, 0) > -1;
}
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type4 = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type4 == "number" || type4 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
function baseAssignValue(object4, key, value) {
  if (key == "__proto__" && defineProperty) {
    defineProperty(object4, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object4[key] = value;
  }
}
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var objectProto$b = Object.prototype;
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
function assignValue(object4, key, value) {
  var objValue = object4[key];
  if (!(hasOwnProperty$9.call(object4, key) && eq(objValue, value)) || value === void 0 && !(key in object4)) {
    baseAssignValue(object4, key, value);
  }
}
function copyObject(source, props, object4, customizer) {
  var isNew = !object4;
  object4 || (object4 = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object4[key], source[key], key, object4, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object4, key, newValue);
    } else {
      assignValue(object4, key, newValue);
    }
  }
  return object4;
}
var nativeMax$2 = Math.max;
function overRest(func, start, transform) {
  start = nativeMax$2(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax$2(args.length - start, 0), array4 = Array(length);
    while (++index < length) {
      array4[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array4);
    return apply(func, this, otherArgs);
  };
}
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + "");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
var objectProto$a = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
  return value === proto;
}
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var argsTag$3 = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$3;
}
var objectProto$9 = Object.prototype;
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
var isArguments = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$8.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
};
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$1 = moduleExports$2 ? root.Buffer : void 0;
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse;
var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal.process;
var nodeUtil = function() {
  try {
    var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types2) {
      return types2;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var objectProto$8 = Object.prototype;
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$7.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var nativeKeys = overArg(Object.keys, Object);
var objectProto$7 = Object.prototype;
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
function baseKeys(object4) {
  if (!isPrototype(object4)) {
    return nativeKeys(object4);
  }
  var result = [];
  for (var key in Object(object4)) {
    if (hasOwnProperty$6.call(object4, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function keys(object4) {
  return isArrayLike(object4) ? arrayLikeKeys(object4) : baseKeys(object4);
}
function nativeKeysIn(object4) {
  var result = [];
  if (object4 != null) {
    for (var key in Object(object4)) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$6 = Object.prototype;
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
function baseKeysIn(object4) {
  if (!isObject(object4)) {
    return nativeKeysIn(object4);
  }
  var isProto = isPrototype(object4), result = [];
  for (var key in object4) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$5.call(object4, key)))) {
      result.push(key);
    }
  }
  return result;
}
function keysIn(object4) {
  return isArrayLike(object4) ? arrayLikeKeys(object4, true) : baseKeysIn(object4);
}
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey(value, object4) {
  if (isArray(value)) {
    return false;
  }
  var type4 = typeof value;
  if (type4 == "number" || type4 == "symbol" || type4 == "boolean" || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object4 != null && value in Object(object4);
}
var nativeCreate = getNative(Object, "create");
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$4.call(data, key) ? data[key] : void 0;
}
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== void 0 : hasOwnProperty$3.call(data, key);
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
  return this;
}
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function assocIndexOf(array4, key) {
  var length = array4.length;
  while (length--) {
    if (eq(array4[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf(data, key);
  return index < 0 ? void 0 : data[index][1];
}
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
var Map$1 = getNative(root, "Map");
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$1 || ListCache)(),
    "string": new Hash()
  };
}
function isKeyable(value) {
  var type4 = typeof value;
  return type4 == "string" || type4 == "number" || type4 == "symbol" || type4 == "boolean" ? value !== "__proto__" : value === null;
}
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
function mapCacheDelete(key) {
  var result = getMapData(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
function mapCacheSet(key, value) {
  var data = getMapData(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
var FUNC_ERROR_TEXT$1 = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}
memoize.Cache = MapCache;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped(function(string3) {
  var result = [];
  if (string3.charCodeAt(0) === 46) {
    result.push("");
  }
  string3.replace(rePropName, function(match, number4, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number4 || match);
  });
  return result;
});
function toString(value) {
  return value == null ? "" : baseToString(value);
}
function castPath(value, object4) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object4) ? [value] : stringToPath(toString(value));
}
var INFINITY$1 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
function baseGet(object4, path) {
  path = castPath(path, object4);
  var index = 0, length = path.length;
  while (object4 != null && index < length) {
    object4 = object4[toKey(path[index++])];
  }
  return index && index == length ? object4 : void 0;
}
function get(object4, path, defaultValue) {
  var result = object4 == null ? void 0 : baseGet(object4, path);
  return result === void 0 ? defaultValue : result;
}
function arrayPush(array4, values) {
  var index = -1, length = values.length, offset = array4.length;
  while (++index < length) {
    array4[offset + index] = values[index];
  }
  return array4;
}
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
function isFlattenable(value) {
  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
function baseFlatten(array4, depth, predicate, isStrict, result) {
  var index = -1, length = array4.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index < length) {
    var value = array4[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}
function flatten(array4) {
  var length = array4 == null ? 0 : array4.length;
  return length ? baseFlatten(array4, 1) : [];
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
const getPrototype$1 = getPrototype;
function castArray$1() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray(value) ? value : [value];
}
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
function stackDelete(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
function stackGet(key) {
  return this.__data__.get(key);
}
function stackHas(key) {
  return this.__data__.has(key);
}
var LARGE_ARRAY_SIZE$1 = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function baseAssign(object4, source) {
  return object4 && copyObject(source, keys(source), object4);
}
function baseAssignIn(object4, source) {
  return object4 && copyObject(source, keysIn(source), object4);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
function arrayFilter(array4, predicate) {
  var index = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array4[index];
    if (predicate(value, index, array4)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
function stubArray() {
  return [];
}
var objectProto$3 = Object.prototype;
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object4) {
  if (object4 == null) {
    return [];
  }
  object4 = Object(object4);
  return arrayFilter(nativeGetSymbols$1(object4), function(symbol) {
    return propertyIsEnumerable.call(object4, symbol);
  });
};
function copySymbols(source, object4) {
  return copyObject(source, getSymbols(source), object4);
}
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object4) {
  var result = [];
  while (object4) {
    arrayPush(result, getSymbols(object4));
    object4 = getPrototype$1(object4);
  }
  return result;
};
function copySymbolsIn(source, object4) {
  return copyObject(source, getSymbolsIn(source), object4);
}
function baseGetAllKeys(object4, keysFunc, symbolsFunc) {
  var result = keysFunc(object4);
  return isArray(object4) ? result : arrayPush(result, symbolsFunc(object4));
}
function getAllKeys(object4) {
  return baseGetAllKeys(object4, keys, getSymbols);
}
function getAllKeysIn(object4) {
  return baseGetAllKeys(object4, keysIn, getSymbolsIn);
}
var DataView = getNative(root, "DataView");
var Promise$1 = getNative(root, "Promise");
var Set$1 = getNative(root, "Set");
var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$3 = "[object DataView]";
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap);
var getTag = baseGetTag;
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag(new Map$1()) != mapTag$4 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$4 || WeakMap && getTag(new WeakMap()) != weakMapTag$1) {
  getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag$2 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$3;
        case mapCtorString:
          return mapTag$4;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$4;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
const getTag$1 = getTag;
var objectProto$2 = Object.prototype;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
function initCloneArray(array4) {
  var length = array4.length, result = new array4.constructor(length);
  if (length && typeof array4[0] == "string" && hasOwnProperty$2.call(array4, "index")) {
    result.index = array4.index;
    result.input = array4.input;
  }
  return result;
}
var Uint8Array = root.Uint8Array;
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp4) {
  var result = new regexp4.constructor(regexp4.source, reFlags.exec(regexp4));
  result.lastIndex = regexp4.lastIndex;
  return result;
}
var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(object4, tag, isDeep) {
  var Ctor = object4.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object4);
    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object4);
    case dataViewTag$2:
      return cloneDataView(object4, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object4, isDeep);
    case mapTag$3:
      return new Ctor();
    case numberTag$2:
    case stringTag$2:
      return new Ctor(object4);
    case regexpTag$2:
      return cloneRegExp(object4);
    case setTag$3:
      return new Ctor();
    case symbolTag$2:
      return cloneSymbol(object4);
  }
}
function initCloneObject(object4) {
  return typeof object4.constructor == "function" && !isPrototype(object4) ? baseCreate(getPrototype$1(object4)) : {};
}
var mapTag$2 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$2;
}
var nodeIsMap = nodeUtil && nodeUtil.isMap;
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
var setTag$2 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$2;
}
var nodeIsSet = nodeUtil && nodeUtil.isSet;
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone(value, bitmask, customizer, key, object4, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result = object4 ? customizer(value, key, object4, stack) : customizer(value);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object4) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object4 ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key2) {
      result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  return result;
}
var CLONE_SYMBOLS_FLAG = 4;
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}
function setCacheHas(value) {
  return this.__data__.has(value);
}
function SetCache(values) {
  var index = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();
  while (++index < length) {
    this.add(values[index]);
  }
}
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
function arraySome(array4, predicate) {
  var index = -1, length = array4 == null ? 0 : array4.length;
  while (++index < length) {
    if (predicate(array4[index], index, array4)) {
      return true;
    }
  }
  return false;
}
function cacheHas(cache, key) {
  return cache.has(key);
}
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array4.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array4);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array4;
  }
  var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  stack.set(array4, other);
  stack.set(other, array4);
  while (++index < arrLength) {
    var arrValue = array4[index], othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array4, stack) : customizer(arrValue, othValue, index, array4, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array4);
  stack["delete"](other);
  return result;
}
function mapToArray(map) {
  var index = -1, result = Array(map.size);
  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}
function setToArray(set2) {
  var index = -1, result = Array(set2.size);
  set2.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag(object4, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object4.byteLength != other.byteLength || object4.byteOffset != other.byteOffset) {
        return false;
      }
      object4 = object4.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object4.byteLength != other.byteLength || !equalFunc(new Uint8Array(object4), new Uint8Array(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag:
      return eq(+object4, +other);
    case errorTag:
      return object4.name == other.name && object4.message == other.message;
    case regexpTag:
    case stringTag:
      return object4 == other + "";
    case mapTag:
      var convert = mapToArray;
    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);
      if (object4.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object4);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object4, other);
      var result = equalArrays(convert(object4), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object4);
      return result;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object4) == symbolValueOf.call(other);
      }
  }
  return false;
}
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function equalObjects(object4, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object4), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object4);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object4;
  }
  var result = true;
  stack.set(object4, other);
  stack.set(other, object4);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object4[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object4, stack) : customizer(objValue, othValue, key, object4, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object4.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object4 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object4);
  stack["delete"](other);
  return result;
}
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseIsEqualDeep(object4, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object4), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag$1(object4), othTag = othIsArr ? arrayTag : getTag$1(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object4)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object4) ? equalArrays(object4, other, bitmask, customizer, equalFunc, stack) : equalByTag(object4, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object4, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object4.value() : object4, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object4, other, bitmask, customizer, equalFunc, stack);
}
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch(object4, source, matchData, customizer) {
  var index = matchData.length, length = index, noCustomizer = !customizer;
  if (object4 == null) {
    return !length;
  }
  object4 = Object(object4);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object4[data[0]] : !(data[0] in object4)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0], objValue = object4[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object4)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object4, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
function isStrictComparable(value) {
  return value === value && !isObject(value);
}
function getMatchData(object4) {
  var result = keys(object4), length = result.length;
  while (length--) {
    var key = result[length], value = object4[key];
    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}
function matchesStrictComparable(key, srcValue) {
  return function(object4) {
    if (object4 == null) {
      return false;
    }
    return object4[key] === srcValue && (srcValue !== void 0 || key in Object(object4));
  };
}
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object4) {
    return object4 === source || baseIsMatch(object4, source, matchData);
  };
}
function baseHasIn(object4, key) {
  return object4 != null && key in Object(object4);
}
function hasPath(object4, path, hasFunc) {
  path = castPath(path, object4);
  var index = -1, length = path.length, result = false;
  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object4 != null && hasFunc(object4, key))) {
      break;
    }
    object4 = object4[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object4 == null ? 0 : object4.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object4) || isArguments(object4));
}
function hasIn(object4, path) {
  return object4 != null && hasPath(object4, path, baseHasIn);
}
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object4) {
    var objValue = get(object4, path);
    return objValue === void 0 && objValue === srcValue ? hasIn(object4, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
function baseProperty(key) {
  return function(object4) {
    return object4 == null ? void 0 : object4[key];
  };
}
function basePropertyDeep(path) {
  return function(object4) {
    return baseGet(object4, path);
  };
}
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
function baseIteratee(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == "object") {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}
var now = function() {
  return root.Date.now();
};
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax$1 = Math.max, nativeMin$1 = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax$1(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
function arrayIncludesWith(array4, value, comparator) {
  var index = -1, length = array4 == null ? 0 : array4.length;
  while (++index < length) {
    if (comparator(value, array4[index])) {
      return true;
    }
  }
  return false;
}
var nativeMax = Math.max, nativeMin = Math.min;
function findLastIndex(array4, predicate, fromIndex) {
  var length = array4 == null ? 0 : array4.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== void 0) {
    index = toInteger(fromIndex);
    index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
  }
  return baseFindIndex(array4, baseIteratee(predicate), index, true);
}
function fromPairs(pairs) {
  var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}
function isEqual(value, other) {
  return baseIsEqual(value, other);
}
function isNil(value) {
  return value == null;
}
function isUndefined$1(value) {
  return value === void 0;
}
function baseSet(object4, path, value, customizer) {
  if (!isObject(object4)) {
    return object4;
  }
  path = castPath(path, object4);
  var index = -1, length = path.length, lastIndex = length - 1, nested = object4;
  while (nested != null && ++index < length) {
    var key = toKey(path[index]), newValue = value;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object4;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object4;
}
function set(object4, path, value) {
  return object4 == null ? object4 : baseSet(object4, path, value);
}
var INFINITY = 1 / 0;
var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY) ? noop : function(values) {
  return new Set$1(values);
};
var LARGE_ARRAY_SIZE = 200;
function baseUniq(array4, iteratee, comparator) {
  var index = -1, includes = arrayIncludes, length = array4.length, isCommon = true, result = [], seen = result;
  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set2 = iteratee ? null : createSet(array4);
    if (set2) {
      return setToArray(set2);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }
  outer:
    while (++index < length) {
      var value = array4[index], computed2 = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed2 === computed2) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed2) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed2);
        }
        result.push(value);
      } else if (!includes(seen, computed2, comparator)) {
        if (seen !== result) {
          seen.push(computed2);
        }
        result.push(value);
      }
    }
  return result;
}
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});
const isUndefined = (val) => val === void 0;
const isBoolean = (val) => typeof val === "boolean";
const isNumber = (val) => typeof val === "number";
const isEmpty = (val) => !val && val !== 0 || isArray$1(val) && val.length === 0 || isObject$1(val) && !Object.keys(val).length;
const isElement = (e) => {
  if (typeof Element === "undefined")
    return false;
  return e instanceof Element;
};
const isStringNumber = (val) => {
  if (!isString$1(val)) {
    return false;
  }
  return !Number.isNaN(Number(val));
};
const escapeStringRegexp = (string3 = "") => string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
const getProp = (obj, path, defaultValue) => {
  return {
    get value() {
      return get(obj, path, defaultValue);
    },
    set value(val) {
      set(obj, path, val);
    }
  };
};
class ElementPlusError extends Error {
  constructor(m2) {
    super(m2);
    this.name = "ElementPlusError";
  }
}
function throwError(scope, m2) {
  throw new ElementPlusError(`[${scope}] ${m2}`);
}
function debugWarn(scope, message) {
}
const hasClass = (el, cls) => {
  if (!el || !cls)
    return false;
  if (cls.includes(" "))
    throw new Error("className should not contain space.");
  return el.classList.contains(cls);
};
const getStyle = (element, styleName) => {
  var _a2;
  if (!isClient || !element || !styleName)
    return "";
  let key = camelize(styleName);
  if (key === "float")
    key = "cssFloat";
  try {
    const style = element.style[key];
    if (style)
      return style;
    const computed2 = (_a2 = document.defaultView) == null ? void 0 : _a2.getComputedStyle(element, "");
    return computed2 ? computed2[key] : "";
  } catch (e) {
    return element.style[key];
  }
};
function addUnit(value, defaultUnit = "px") {
  if (!value)
    return "";
  if (isNumber(value) || isStringNumber(value)) {
    return `${value}${defaultUnit}`;
  } else if (isString$1(value)) {
    return value;
  }
}
function scrollIntoView(container, selected) {
  if (!isClient)
    return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  const offsetParents = [];
  let pointer = selected.offsetParent;
  while (pointer !== null && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
  const bottom = top + selected.offsetHeight;
  const viewRectTop = container.scrollTop;
  const viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}
/*! Element Plus Icons Vue v2.3.1 */
var arrow_down_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowDown",
  __name: "arrow-down",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
      })
    ]));
  }
});
var arrow_down_default = arrow_down_vue_vue_type_script_setup_true_lang_default;
var arrow_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowLeft",
  __name: "arrow-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_left_default = arrow_left_vue_vue_type_script_setup_true_lang_default;
var arrow_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowRight",
  __name: "arrow-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_right_default = arrow_right_vue_vue_type_script_setup_true_lang_default;
var arrow_up_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowUp",
  __name: "arrow-up",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0"
      })
    ]));
  }
});
var arrow_up_default = arrow_up_vue_vue_type_script_setup_true_lang_default;
var calendar_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Calendar",
  __name: "calendar",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M128 384v512h768V192H768v32a32 32 0 1 1-64 0v-32H320v32a32 32 0 0 1-64 0v-32H128v128h768v64zm192-256h384V96a32 32 0 1 1 64 0v32h160a32 32 0 0 1 32 32v768a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h160V96a32 32 0 0 1 64 0zm-32 384h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m192-192h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m192-192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64"
      })
    ]));
  }
});
var calendar_default = calendar_vue_vue_type_script_setup_true_lang_default;
var circle_check_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleCheck",
  __name: "circle-check",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
      })
    ]));
  }
});
var circle_check_default = circle_check_vue_vue_type_script_setup_true_lang_default;
var circle_close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleClose",
  __name: "circle-close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
});
var circle_close_default = circle_close_vue_vue_type_script_setup_true_lang_default;
var clock_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Clock",
  __name: "clock",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M480 256a32 32 0 0 1 32 32v256a32 32 0 0 1-64 0V288a32 32 0 0 1 32-32"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M480 512h256q32 0 32 32t-32 32H480q-32 0-32-32t32-32"
      })
    ]));
  }
});
var clock_default = clock_vue_vue_type_script_setup_true_lang_default;
var close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Close",
  __name: "close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
      })
    ]));
  }
});
var close_default = close_vue_vue_type_script_setup_true_lang_default;
var d_arrow_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "DArrowLeft",
  __name: "d-arrow-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M529.408 149.376a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L259.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L197.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224zm256 0a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L515.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L453.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224z"
      })
    ]));
  }
});
var d_arrow_left_default = d_arrow_left_vue_vue_type_script_setup_true_lang_default;
var d_arrow_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "DArrowRight",
  __name: "d-arrow-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M452.864 149.312a29.12 29.12 0 0 1 41.728.064L826.24 489.664a32 32 0 0 1 0 44.672L494.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L764.736 512 452.864 192a30.592 30.592 0 0 1 0-42.688m-256 0a29.12 29.12 0 0 1 41.728.064L570.24 489.664a32 32 0 0 1 0 44.672L238.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L508.736 512 196.864 192a30.592 30.592 0 0 1 0-42.688z"
      })
    ]));
  }
});
var d_arrow_right_default = d_arrow_right_vue_vue_type_script_setup_true_lang_default;
var hide_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Hide",
  __name: "hide",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2zM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z"
      })
    ]));
  }
});
var hide_default = hide_vue_vue_type_script_setup_true_lang_default;
var loading_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Loading",
  __name: "loading",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
      })
    ]));
  }
});
var loading_default = loading_vue_vue_type_script_setup_true_lang_default;
var view_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "View",
  __name: "view",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352m0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448m0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160"
      })
    ]));
  }
});
var view_default = view_vue_vue_type_script_setup_true_lang_default;
const epPropKey = "__epPropKey";
const definePropType = (val) => val;
const isEpProp = (val) => isObject$1(val) && !!val[epPropKey];
const buildProp = (prop, key) => {
  if (!isObject$1(prop) || isEpProp(prop))
    return prop;
  const { values, required: required4, default: defaultValue, type: type4, validator } = prop;
  const _validator = values || validator ? (val) => {
    let valid = false;
    let allowedValues = [];
    if (values) {
      allowedValues = Array.from(values);
      if (hasOwn(prop, "default")) {
        allowedValues.push(defaultValue);
      }
      valid || (valid = allowedValues.includes(val));
    }
    if (validator)
      valid || (valid = validator(val));
    if (!valid && allowedValues.length > 0) {
      const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
      warn(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
    }
    return valid;
  } : void 0;
  const epProp = {
    type: type4,
    required: !!required4,
    validator: _validator,
    [epPropKey]: true
  };
  if (hasOwn(prop, "default"))
    epProp.default = defaultValue;
  return epProp;
};
const buildProps = (props) => fromPairs(Object.entries(props).map(([key, option]) => [
  key,
  buildProp(option, key)
]));
const iconPropType = definePropType([
  String,
  Object,
  Function
]);
const ValidateComponentsMap = {
  validating: loading_default,
  success: circle_check_default,
  error: circle_close_default
};
const withInstall = (main, extra) => {
  main.install = (app) => {
    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
      app.component(comp.name, comp);
    }
  };
  if (extra) {
    for (const [key, comp] of Object.entries(extra)) {
      main[key] = comp;
    }
  }
  return main;
};
const withNoopInstall = (component) => {
  component.install = NOOP;
  return component;
};
const EVENT_CODE = {
  tab: "Tab",
  enter: "Enter",
  space: "Space",
  left: "ArrowLeft",
  up: "ArrowUp",
  right: "ArrowRight",
  down: "ArrowDown",
  esc: "Escape",
  delete: "Delete",
  backspace: "Backspace",
  numpadEnter: "NumpadEnter",
  pageUp: "PageUp",
  pageDown: "PageDown",
  home: "Home",
  end: "End"
};
const datePickTypes = [
  "year",
  "years",
  "month",
  "date",
  "dates",
  "week",
  "datetime",
  "datetimerange",
  "daterange",
  "monthrange"
];
const UPDATE_MODEL_EVENT = "update:modelValue";
const CHANGE_EVENT = "change";
const componentSizes = ["", "default", "small", "large"];
const castArray = (arr) => {
  if (!arr && arr !== 0)
    return [];
  return Array.isArray(arr) ? arr : [arr];
};
const isKorean = (text) => /([\uAC00-\uD7AF\u3130-\u318F])+/gi.test(text);
const mutable = (val) => val;
const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
const LISTENER_PREFIX = /^on[A-Z]/;
const useAttrs = (params = {}) => {
  const { excludeListeners = false, excludeKeys } = params;
  const allExcludeKeys = computed(() => {
    return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
  });
  const instance = getCurrentInstance();
  if (!instance) {
    return computed(() => ({}));
  }
  return computed(() => {
    var _a2;
    return fromPairs(Object.entries((_a2 = instance.proxy) == null ? void 0 : _a2.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
  });
};
const useDeprecated = ({ from, replacement, scope, version, ref: ref2, type: type4 = "API" }, condition) => {
  watch(() => unref(condition), (val) => {
  }, {
    immediate: true
  });
};
var English = {
  name: "en",
  el: {
    colorpicker: {
      confirm: "OK",
      clear: "Clear",
      defaultLabel: "color picker",
      description: "current color is {color}. press enter to select a new color."
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
      monthTablePrompt: "Use the arrow keys and enter to select the month",
      yearTablePrompt: "Use the arrow keys and enter to select the year",
      selectedDate: "Selected date",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      weeksFull: {
        sun: "Sunday",
        mon: "Monday",
        tue: "Tuesday",
        wed: "Wednesday",
        thu: "Thursday",
        fri: "Friday",
        sat: "Saturday"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    inputNumber: {
      decrease: "decrease number",
      increase: "increase number"
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    dropdown: {
      toggleDropdown: "Toggle Dropdown"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: "",
      page: "Page",
      prev: "Go to previous page",
      next: "Go to next page",
      currentPage: "page {pager}",
      prevPages: "Previous {pager} pages",
      nextPages: "Next {pager} pages",
      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
    },
    dialog: {
      close: "Close this dialog"
    },
    drawer: {
      close: "Close this dialog"
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input",
      close: "Close this dialog"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    slider: {
      defaultLabel: "slider between {min} and {max}",
      defaultRangeStartLabel: "pick start value",
      defaultRangeEndLabel: "pick end value"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tour: {
      next: "Next",
      previous: "Previous",
      finish: "Finish"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    carousel: {
      leftArrow: "Carousel arrow left",
      rightArrow: "Carousel arrow right",
      indicator: "Carousel switch to index {index}"
    }
  }
};
const buildTranslator = (locale) => (path, option) => translate(path, option, unref(locale));
const translate = (path, option, locale) => get(locale, path, path).replace(/\{(\w+)\}/g, (_2, key) => {
  var _a2;
  return `${(_a2 = option == null ? void 0 : option[key]) != null ? _a2 : `{${key}}`}`;
});
const buildLocaleContext = (locale) => {
  const lang = computed(() => unref(locale).name);
  const localeRef = isRef(locale) ? locale : ref(locale);
  return {
    lang,
    locale: localeRef,
    t: buildTranslator(locale)
  };
};
const localeContextKey = Symbol("localeContextKey");
const useLocale = (localeOverrides) => {
  const locale = localeOverrides || inject(localeContextKey, ref());
  return buildLocaleContext(computed(() => locale.value || English));
};
const defaultNamespace = "el";
const statePrefix = "is-";
const _bem = (namespace, block, blockSuffix, element, modifier) => {
  let cls = `${namespace}-${block}`;
  if (blockSuffix) {
    cls += `-${blockSuffix}`;
  }
  if (element) {
    cls += `__${element}`;
  }
  if (modifier) {
    cls += `--${modifier}`;
  }
  return cls;
};
const namespaceContextKey = Symbol("namespaceContextKey");
const useGetDerivedNamespace = (namespaceOverrides) => {
  const derivedNamespace = namespaceOverrides || (getCurrentInstance() ? inject(namespaceContextKey, ref(defaultNamespace)) : ref(defaultNamespace));
  const namespace = computed(() => {
    return unref(derivedNamespace) || defaultNamespace;
  });
  return namespace;
};
const useNamespace = (block, namespaceOverrides) => {
  const namespace = useGetDerivedNamespace(namespaceOverrides);
  const b = (blockSuffix = "") => _bem(namespace.value, block, blockSuffix, "", "");
  const e = (element) => element ? _bem(namespace.value, block, "", element, "") : "";
  const m2 = (modifier) => modifier ? _bem(namespace.value, block, "", "", modifier) : "";
  const be2 = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, "") : "";
  const em = (element, modifier) => element && modifier ? _bem(namespace.value, block, "", element, modifier) : "";
  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, "", modifier) : "";
  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : "";
  const is = (name, ...args) => {
    const state = args.length >= 1 ? args[0] : true;
    return name && state ? `${statePrefix}${name}` : "";
  };
  const cssVar = (object4) => {
    const styles = {};
    for (const key in object4) {
      if (object4[key]) {
        styles[`--${namespace.value}-${key}`] = object4[key];
      }
    }
    return styles;
  };
  const cssVarBlock = (object4) => {
    const styles = {};
    for (const key in object4) {
      if (object4[key]) {
        styles[`--${namespace.value}-${block}-${key}`] = object4[key];
      }
    }
    return styles;
  };
  const cssVarName = (name) => `--${namespace.value}-${name}`;
  const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
  return {
    namespace,
    b,
    e,
    m: m2,
    be: be2,
    em,
    bm,
    bem,
    is,
    cssVar,
    cssVarName,
    cssVarBlock,
    cssVarBlockName
  };
};
const _prop = buildProp({
  type: definePropType(Boolean),
  default: null
});
const _event = buildProp({
  type: definePropType(Function)
});
const createModelToggleComposable = (name) => {
  const updateEventKey = `update:${name}`;
  const updateEventKeyRaw = `onUpdate:${name}`;
  const useModelToggleEmits2 = [updateEventKey];
  const useModelToggleProps2 = {
    [name]: _prop,
    [updateEventKeyRaw]: _event
  };
  const useModelToggle2 = ({
    indicator,
    toggleReason,
    shouldHideWhenRouteChanges,
    shouldProceed,
    onShow,
    onHide
  }) => {
    const instance = getCurrentInstance();
    const { emit } = instance;
    const props = instance.props;
    const hasUpdateHandler = computed(() => isFunction$1(props[updateEventKeyRaw]));
    const isModelBindingAbsent = computed(() => props[name] === null);
    const doShow = (event) => {
      if (indicator.value === true) {
        return;
      }
      indicator.value = true;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$1(onShow)) {
        onShow(event);
      }
    };
    const doHide = (event) => {
      if (indicator.value === false) {
        return;
      }
      indicator.value = false;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$1(onHide)) {
        onHide(event);
      }
    };
    const show = (event) => {
      if (props.disabled === true || isFunction$1(shouldProceed) && !shouldProceed())
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit(updateEventKey, true);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doShow(event);
      }
    };
    const hide = (event) => {
      if (props.disabled === true || !isClient)
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit(updateEventKey, false);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doHide(event);
      }
    };
    const onChange = (val) => {
      if (!isBoolean(val))
        return;
      if (props.disabled && val) {
        if (hasUpdateHandler.value) {
          emit(updateEventKey, false);
        }
      } else if (indicator.value !== val) {
        if (val) {
          doShow();
        } else {
          doHide();
        }
      }
    };
    const toggle = () => {
      if (indicator.value) {
        hide();
      } else {
        show();
      }
    };
    watch(() => props[name], onChange);
    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
      watch(() => ({
        ...instance.proxy.$route
      }), () => {
        if (shouldHideWhenRouteChanges.value && indicator.value) {
          hide();
        }
      });
    }
    onMounted(() => {
      onChange(props[name]);
    });
    return {
      hide,
      show,
      toggle,
      hasUpdateHandler
    };
  };
  return {
    useModelToggle: useModelToggle2,
    useModelToggleProps: useModelToggleProps2,
    useModelToggleEmits: useModelToggleEmits2
  };
};
createModelToggleComposable("modelValue");
const useProp = (name) => {
  const vm = getCurrentInstance();
  return computed(() => {
    var _a2, _b;
    return (_b = (_a2 = vm == null ? void 0 : vm.proxy) == null ? void 0 : _a2.$props) == null ? void 0 : _b[name];
  });
};
var E$1 = "top", R$2 = "bottom", W$2 = "right", P$2 = "left", me = "auto", G$2 = [E$1, R$2, W$2, P$2], U$1 = "start", J$1 = "end", Xe = "clippingParents", je = "viewport", K$1 = "popper", Ye = "reference", De = G$2.reduce(function(t2, e) {
  return t2.concat([e + "-" + U$1, e + "-" + J$1]);
}, []), Ee = [].concat(G$2, [me]).reduce(function(t2, e) {
  return t2.concat([e, e + "-" + U$1, e + "-" + J$1]);
}, []), Ge = "beforeRead", Je = "read", Ke = "afterRead", Qe = "beforeMain", Ze = "main", et$1 = "afterMain", tt$1 = "beforeWrite", nt$1 = "write", rt$1 = "afterWrite", ot$1 = [Ge, Je, Ke, Qe, Ze, et$1, tt$1, nt$1, rt$1];
function C$2(t2) {
  return t2 ? (t2.nodeName || "").toLowerCase() : null;
}
function H$2(t2) {
  if (t2 == null)
    return window;
  if (t2.toString() !== "[object Window]") {
    var e = t2.ownerDocument;
    return e && e.defaultView || window;
  }
  return t2;
}
function Q$2(t2) {
  var e = H$2(t2).Element;
  return t2 instanceof e || t2 instanceof Element;
}
function B$2(t2) {
  var e = H$2(t2).HTMLElement;
  return t2 instanceof e || t2 instanceof HTMLElement;
}
function Pe(t2) {
  if (typeof ShadowRoot == "undefined")
    return false;
  var e = H$2(t2).ShadowRoot;
  return t2 instanceof e || t2 instanceof ShadowRoot;
}
function Mt(t2) {
  var e = t2.state;
  Object.keys(e.elements).forEach(function(n) {
    var r2 = e.styles[n] || {}, o = e.attributes[n] || {}, i = e.elements[n];
    !B$2(i) || !C$2(i) || (Object.assign(i.style, r2), Object.keys(o).forEach(function(a) {
      var s = o[a];
      s === false ? i.removeAttribute(a) : i.setAttribute(a, s === true ? "" : s);
    }));
  });
}
function Rt(t2) {
  var e = t2.state, n = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
  return Object.assign(e.elements.popper.style, n.popper), e.styles = n, e.elements.arrow && Object.assign(e.elements.arrow.style, n.arrow), function() {
    Object.keys(e.elements).forEach(function(r2) {
      var o = e.elements[r2], i = e.attributes[r2] || {}, a = Object.keys(e.styles.hasOwnProperty(r2) ? e.styles[r2] : n[r2]), s = a.reduce(function(f2, c2) {
        return f2[c2] = "", f2;
      }, {});
      !B$2(o) || !C$2(o) || (Object.assign(o.style, s), Object.keys(i).forEach(function(f2) {
        o.removeAttribute(f2);
      }));
    });
  };
}
var Ae = { name: "applyStyles", enabled: true, phase: "write", fn: Mt, effect: Rt, requires: ["computeStyles"] };
function q$2(t2) {
  return t2.split("-")[0];
}
var X$2 = Math.max, ve = Math.min, Z = Math.round;
function ee(t2, e) {
  e === void 0 && (e = false);
  var n = t2.getBoundingClientRect(), r2 = 1, o = 1;
  if (B$2(t2) && e) {
    var i = t2.offsetHeight, a = t2.offsetWidth;
    a > 0 && (r2 = Z(n.width) / a || 1), i > 0 && (o = Z(n.height) / i || 1);
  }
  return { width: n.width / r2, height: n.height / o, top: n.top / o, right: n.right / r2, bottom: n.bottom / o, left: n.left / r2, x: n.left / r2, y: n.top / o };
}
function ke(t2) {
  var e = ee(t2), n = t2.offsetWidth, r2 = t2.offsetHeight;
  return Math.abs(e.width - n) <= 1 && (n = e.width), Math.abs(e.height - r2) <= 1 && (r2 = e.height), { x: t2.offsetLeft, y: t2.offsetTop, width: n, height: r2 };
}
function it$1(t2, e) {
  var n = e.getRootNode && e.getRootNode();
  if (t2.contains(e))
    return true;
  if (n && Pe(n)) {
    var r2 = e;
    do {
      if (r2 && t2.isSameNode(r2))
        return true;
      r2 = r2.parentNode || r2.host;
    } while (r2);
  }
  return false;
}
function N$2(t2) {
  return H$2(t2).getComputedStyle(t2);
}
function Wt(t2) {
  return ["table", "td", "th"].indexOf(C$2(t2)) >= 0;
}
function I(t2) {
  return ((Q$2(t2) ? t2.ownerDocument : t2.document) || window.document).documentElement;
}
function ge(t2) {
  return C$2(t2) === "html" ? t2 : t2.assignedSlot || t2.parentNode || (Pe(t2) ? t2.host : null) || I(t2);
}
function at$1(t2) {
  return !B$2(t2) || N$2(t2).position === "fixed" ? null : t2.offsetParent;
}
function Bt(t2) {
  var e = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, n = navigator.userAgent.indexOf("Trident") !== -1;
  if (n && B$2(t2)) {
    var r2 = N$2(t2);
    if (r2.position === "fixed")
      return null;
  }
  var o = ge(t2);
  for (Pe(o) && (o = o.host); B$2(o) && ["html", "body"].indexOf(C$2(o)) < 0; ) {
    var i = N$2(o);
    if (i.transform !== "none" || i.perspective !== "none" || i.contain === "paint" || ["transform", "perspective"].indexOf(i.willChange) !== -1 || e && i.willChange === "filter" || e && i.filter && i.filter !== "none")
      return o;
    o = o.parentNode;
  }
  return null;
}
function se(t2) {
  for (var e = H$2(t2), n = at$1(t2); n && Wt(n) && N$2(n).position === "static"; )
    n = at$1(n);
  return n && (C$2(n) === "html" || C$2(n) === "body" && N$2(n).position === "static") ? e : n || Bt(t2) || e;
}
function Le(t2) {
  return ["top", "bottom"].indexOf(t2) >= 0 ? "x" : "y";
}
function fe(t2, e, n) {
  return X$2(t2, ve(e, n));
}
function St(t2, e, n) {
  var r2 = fe(t2, e, n);
  return r2 > n ? n : r2;
}
function st$1() {
  return { top: 0, right: 0, bottom: 0, left: 0 };
}
function ft(t2) {
  return Object.assign({}, st$1(), t2);
}
function ct(t2, e) {
  return e.reduce(function(n, r2) {
    return n[r2] = t2, n;
  }, {});
}
var Tt = function(t2, e) {
  return t2 = typeof t2 == "function" ? t2(Object.assign({}, e.rects, { placement: e.placement })) : t2, ft(typeof t2 != "number" ? t2 : ct(t2, G$2));
};
function Ht(t2) {
  var e, n = t2.state, r2 = t2.name, o = t2.options, i = n.elements.arrow, a = n.modifiersData.popperOffsets, s = q$2(n.placement), f2 = Le(s), c2 = [P$2, W$2].indexOf(s) >= 0, u2 = c2 ? "height" : "width";
  if (!(!i || !a)) {
    var m2 = Tt(o.padding, n), v2 = ke(i), l2 = f2 === "y" ? E$1 : P$2, h2 = f2 === "y" ? R$2 : W$2, p2 = n.rects.reference[u2] + n.rects.reference[f2] - a[f2] - n.rects.popper[u2], g2 = a[f2] - n.rects.reference[f2], x = se(i), y2 = x ? f2 === "y" ? x.clientHeight || 0 : x.clientWidth || 0 : 0, $2 = p2 / 2 - g2 / 2, d2 = m2[l2], b = y2 - v2[u2] - m2[h2], w2 = y2 / 2 - v2[u2] / 2 + $2, O2 = fe(d2, w2, b), j2 = f2;
    n.modifiersData[r2] = (e = {}, e[j2] = O2, e.centerOffset = O2 - w2, e);
  }
}
function Ct(t2) {
  var e = t2.state, n = t2.options, r2 = n.element, o = r2 === void 0 ? "[data-popper-arrow]" : r2;
  o != null && (typeof o == "string" && (o = e.elements.popper.querySelector(o), !o) || !it$1(e.elements.popper, o) || (e.elements.arrow = o));
}
var pt = { name: "arrow", enabled: true, phase: "main", fn: Ht, effect: Ct, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
function te(t2) {
  return t2.split("-")[1];
}
var qt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
function Vt(t2) {
  var e = t2.x, n = t2.y, r2 = window, o = r2.devicePixelRatio || 1;
  return { x: Z(e * o) / o || 0, y: Z(n * o) / o || 0 };
}
function ut(t2) {
  var e, n = t2.popper, r2 = t2.popperRect, o = t2.placement, i = t2.variation, a = t2.offsets, s = t2.position, f2 = t2.gpuAcceleration, c2 = t2.adaptive, u2 = t2.roundOffsets, m2 = t2.isFixed, v2 = a.x, l2 = v2 === void 0 ? 0 : v2, h2 = a.y, p2 = h2 === void 0 ? 0 : h2, g2 = typeof u2 == "function" ? u2({ x: l2, y: p2 }) : { x: l2, y: p2 };
  l2 = g2.x, p2 = g2.y;
  var x = a.hasOwnProperty("x"), y2 = a.hasOwnProperty("y"), $2 = P$2, d2 = E$1, b = window;
  if (c2) {
    var w2 = se(n), O2 = "clientHeight", j2 = "clientWidth";
    if (w2 === H$2(n) && (w2 = I(n), N$2(w2).position !== "static" && s === "absolute" && (O2 = "scrollHeight", j2 = "scrollWidth")), w2 = w2, o === E$1 || (o === P$2 || o === W$2) && i === J$1) {
      d2 = R$2;
      var A2 = m2 && w2 === b && b.visualViewport ? b.visualViewport.height : w2[O2];
      p2 -= A2 - r2.height, p2 *= f2 ? 1 : -1;
    }
    if (o === P$2 || (o === E$1 || o === R$2) && i === J$1) {
      $2 = W$2;
      var k2 = m2 && w2 === b && b.visualViewport ? b.visualViewport.width : w2[j2];
      l2 -= k2 - r2.width, l2 *= f2 ? 1 : -1;
    }
  }
  var D = Object.assign({ position: s }, c2 && qt), S3 = u2 === true ? Vt({ x: l2, y: p2 }) : { x: l2, y: p2 };
  if (l2 = S3.x, p2 = S3.y, f2) {
    var L2;
    return Object.assign({}, D, (L2 = {}, L2[d2] = y2 ? "0" : "", L2[$2] = x ? "0" : "", L2.transform = (b.devicePixelRatio || 1) <= 1 ? "translate(" + l2 + "px, " + p2 + "px)" : "translate3d(" + l2 + "px, " + p2 + "px, 0)", L2));
  }
  return Object.assign({}, D, (e = {}, e[d2] = y2 ? p2 + "px" : "", e[$2] = x ? l2 + "px" : "", e.transform = "", e));
}
function Nt(t2) {
  var e = t2.state, n = t2.options, r2 = n.gpuAcceleration, o = r2 === void 0 ? true : r2, i = n.adaptive, a = i === void 0 ? true : i, s = n.roundOffsets, f2 = s === void 0 ? true : s, c2 = { placement: q$2(e.placement), variation: te(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: o, isFixed: e.options.strategy === "fixed" };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, ut(Object.assign({}, c2, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: a, roundOffsets: f2 })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, ut(Object.assign({}, c2, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: f2 })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });
}
var Me = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: Nt, data: {} }, ye = { passive: true };
function It(t2) {
  var e = t2.state, n = t2.instance, r2 = t2.options, o = r2.scroll, i = o === void 0 ? true : o, a = r2.resize, s = a === void 0 ? true : a, f2 = H$2(e.elements.popper), c2 = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return i && c2.forEach(function(u2) {
    u2.addEventListener("scroll", n.update, ye);
  }), s && f2.addEventListener("resize", n.update, ye), function() {
    i && c2.forEach(function(u2) {
      u2.removeEventListener("scroll", n.update, ye);
    }), s && f2.removeEventListener("resize", n.update, ye);
  };
}
var Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
}, effect: It, data: {} }, _t = { left: "right", right: "left", bottom: "top", top: "bottom" };
function be(t2) {
  return t2.replace(/left|right|bottom|top/g, function(e) {
    return _t[e];
  });
}
var zt = { start: "end", end: "start" };
function lt(t2) {
  return t2.replace(/start|end/g, function(e) {
    return zt[e];
  });
}
function We(t2) {
  var e = H$2(t2), n = e.pageXOffset, r2 = e.pageYOffset;
  return { scrollLeft: n, scrollTop: r2 };
}
function Be(t2) {
  return ee(I(t2)).left + We(t2).scrollLeft;
}
function Ft(t2) {
  var e = H$2(t2), n = I(t2), r2 = e.visualViewport, o = n.clientWidth, i = n.clientHeight, a = 0, s = 0;
  return r2 && (o = r2.width, i = r2.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (a = r2.offsetLeft, s = r2.offsetTop)), { width: o, height: i, x: a + Be(t2), y: s };
}
function Ut(t2) {
  var e, n = I(t2), r2 = We(t2), o = (e = t2.ownerDocument) == null ? void 0 : e.body, i = X$2(n.scrollWidth, n.clientWidth, o ? o.scrollWidth : 0, o ? o.clientWidth : 0), a = X$2(n.scrollHeight, n.clientHeight, o ? o.scrollHeight : 0, o ? o.clientHeight : 0), s = -r2.scrollLeft + Be(t2), f2 = -r2.scrollTop;
  return N$2(o || n).direction === "rtl" && (s += X$2(n.clientWidth, o ? o.clientWidth : 0) - i), { width: i, height: a, x: s, y: f2 };
}
function Se(t2) {
  var e = N$2(t2), n = e.overflow, r2 = e.overflowX, o = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + o + r2);
}
function dt(t2) {
  return ["html", "body", "#document"].indexOf(C$2(t2)) >= 0 ? t2.ownerDocument.body : B$2(t2) && Se(t2) ? t2 : dt(ge(t2));
}
function ce(t2, e) {
  var n;
  e === void 0 && (e = []);
  var r2 = dt(t2), o = r2 === ((n = t2.ownerDocument) == null ? void 0 : n.body), i = H$2(r2), a = o ? [i].concat(i.visualViewport || [], Se(r2) ? r2 : []) : r2, s = e.concat(a);
  return o ? s : s.concat(ce(ge(a)));
}
function Te(t2) {
  return Object.assign({}, t2, { left: t2.x, top: t2.y, right: t2.x + t2.width, bottom: t2.y + t2.height });
}
function Xt(t2) {
  var e = ee(t2);
  return e.top = e.top + t2.clientTop, e.left = e.left + t2.clientLeft, e.bottom = e.top + t2.clientHeight, e.right = e.left + t2.clientWidth, e.width = t2.clientWidth, e.height = t2.clientHeight, e.x = e.left, e.y = e.top, e;
}
function ht$1(t2, e) {
  return e === je ? Te(Ft(t2)) : Q$2(e) ? Xt(e) : Te(Ut(I(t2)));
}
function Yt(t2) {
  var e = ce(ge(t2)), n = ["absolute", "fixed"].indexOf(N$2(t2).position) >= 0, r2 = n && B$2(t2) ? se(t2) : t2;
  return Q$2(r2) ? e.filter(function(o) {
    return Q$2(o) && it$1(o, r2) && C$2(o) !== "body";
  }) : [];
}
function Gt(t2, e, n) {
  var r2 = e === "clippingParents" ? Yt(t2) : [].concat(e), o = [].concat(r2, [n]), i = o[0], a = o.reduce(function(s, f2) {
    var c2 = ht$1(t2, f2);
    return s.top = X$2(c2.top, s.top), s.right = ve(c2.right, s.right), s.bottom = ve(c2.bottom, s.bottom), s.left = X$2(c2.left, s.left), s;
  }, ht$1(t2, i));
  return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;
}
function mt(t2) {
  var e = t2.reference, n = t2.element, r2 = t2.placement, o = r2 ? q$2(r2) : null, i = r2 ? te(r2) : null, a = e.x + e.width / 2 - n.width / 2, s = e.y + e.height / 2 - n.height / 2, f2;
  switch (o) {
    case E$1:
      f2 = { x: a, y: e.y - n.height };
      break;
    case R$2:
      f2 = { x: a, y: e.y + e.height };
      break;
    case W$2:
      f2 = { x: e.x + e.width, y: s };
      break;
    case P$2:
      f2 = { x: e.x - n.width, y: s };
      break;
    default:
      f2 = { x: e.x, y: e.y };
  }
  var c2 = o ? Le(o) : null;
  if (c2 != null) {
    var u2 = c2 === "y" ? "height" : "width";
    switch (i) {
      case U$1:
        f2[c2] = f2[c2] - (e[u2] / 2 - n[u2] / 2);
        break;
      case J$1:
        f2[c2] = f2[c2] + (e[u2] / 2 - n[u2] / 2);
        break;
    }
  }
  return f2;
}
function ne(t2, e) {
  e === void 0 && (e = {});
  var n = e, r2 = n.placement, o = r2 === void 0 ? t2.placement : r2, i = n.boundary, a = i === void 0 ? Xe : i, s = n.rootBoundary, f2 = s === void 0 ? je : s, c2 = n.elementContext, u2 = c2 === void 0 ? K$1 : c2, m2 = n.altBoundary, v2 = m2 === void 0 ? false : m2, l2 = n.padding, h2 = l2 === void 0 ? 0 : l2, p2 = ft(typeof h2 != "number" ? h2 : ct(h2, G$2)), g2 = u2 === K$1 ? Ye : K$1, x = t2.rects.popper, y2 = t2.elements[v2 ? g2 : u2], $2 = Gt(Q$2(y2) ? y2 : y2.contextElement || I(t2.elements.popper), a, f2), d2 = ee(t2.elements.reference), b = mt({ reference: d2, element: x, strategy: "absolute", placement: o }), w2 = Te(Object.assign({}, x, b)), O2 = u2 === K$1 ? w2 : d2, j2 = { top: $2.top - O2.top + p2.top, bottom: O2.bottom - $2.bottom + p2.bottom, left: $2.left - O2.left + p2.left, right: O2.right - $2.right + p2.right }, A2 = t2.modifiersData.offset;
  if (u2 === K$1 && A2) {
    var k2 = A2[o];
    Object.keys(j2).forEach(function(D) {
      var S3 = [W$2, R$2].indexOf(D) >= 0 ? 1 : -1, L2 = [E$1, R$2].indexOf(D) >= 0 ? "y" : "x";
      j2[D] += k2[L2] * S3;
    });
  }
  return j2;
}
function Jt(t2, e) {
  e === void 0 && (e = {});
  var n = e, r2 = n.placement, o = n.boundary, i = n.rootBoundary, a = n.padding, s = n.flipVariations, f2 = n.allowedAutoPlacements, c2 = f2 === void 0 ? Ee : f2, u2 = te(r2), m2 = u2 ? s ? De : De.filter(function(h2) {
    return te(h2) === u2;
  }) : G$2, v2 = m2.filter(function(h2) {
    return c2.indexOf(h2) >= 0;
  });
  v2.length === 0 && (v2 = m2);
  var l2 = v2.reduce(function(h2, p2) {
    return h2[p2] = ne(t2, { placement: p2, boundary: o, rootBoundary: i, padding: a })[q$2(p2)], h2;
  }, {});
  return Object.keys(l2).sort(function(h2, p2) {
    return l2[h2] - l2[p2];
  });
}
function Kt(t2) {
  if (q$2(t2) === me)
    return [];
  var e = be(t2);
  return [lt(t2), e, lt(e)];
}
function Qt(t2) {
  var e = t2.state, n = t2.options, r2 = t2.name;
  if (!e.modifiersData[r2]._skip) {
    for (var o = n.mainAxis, i = o === void 0 ? true : o, a = n.altAxis, s = a === void 0 ? true : a, f2 = n.fallbackPlacements, c2 = n.padding, u2 = n.boundary, m2 = n.rootBoundary, v2 = n.altBoundary, l2 = n.flipVariations, h2 = l2 === void 0 ? true : l2, p2 = n.allowedAutoPlacements, g2 = e.options.placement, x = q$2(g2), y2 = x === g2, $2 = f2 || (y2 || !h2 ? [be(g2)] : Kt(g2)), d2 = [g2].concat($2).reduce(function(z2, V2) {
      return z2.concat(q$2(V2) === me ? Jt(e, { placement: V2, boundary: u2, rootBoundary: m2, padding: c2, flipVariations: h2, allowedAutoPlacements: p2 }) : V2);
    }, []), b = e.rects.reference, w2 = e.rects.popper, O2 = /* @__PURE__ */ new Map(), j2 = true, A2 = d2[0], k2 = 0; k2 < d2.length; k2++) {
      var D = d2[k2], S3 = q$2(D), L2 = te(D) === U$1, re = [E$1, R$2].indexOf(S3) >= 0, oe = re ? "width" : "height", M = ne(e, { placement: D, boundary: u2, rootBoundary: m2, altBoundary: v2, padding: c2 }), T2 = re ? L2 ? W$2 : P$2 : L2 ? R$2 : E$1;
      b[oe] > w2[oe] && (T2 = be(T2));
      var pe = be(T2), _2 = [];
      if (i && _2.push(M[S3] <= 0), s && _2.push(M[T2] <= 0, M[pe] <= 0), _2.every(function(z2) {
        return z2;
      })) {
        A2 = D, j2 = false;
        break;
      }
      O2.set(D, _2);
    }
    if (j2)
      for (var ue = h2 ? 3 : 1, xe = function(z2) {
        var V2 = d2.find(function(de) {
          var ae = O2.get(de);
          if (ae)
            return ae.slice(0, z2).every(function(Y2) {
              return Y2;
            });
        });
        if (V2)
          return A2 = V2, "break";
      }, ie = ue; ie > 0; ie--) {
        var le = xe(ie);
        if (le === "break")
          break;
      }
    e.placement !== A2 && (e.modifiersData[r2]._skip = true, e.placement = A2, e.reset = true);
  }
}
var vt = { name: "flip", enabled: true, phase: "main", fn: Qt, requiresIfExists: ["offset"], data: { _skip: false } };
function gt(t2, e, n) {
  return n === void 0 && (n = { x: 0, y: 0 }), { top: t2.top - e.height - n.y, right: t2.right - e.width + n.x, bottom: t2.bottom - e.height + n.y, left: t2.left - e.width - n.x };
}
function yt(t2) {
  return [E$1, W$2, R$2, P$2].some(function(e) {
    return t2[e] >= 0;
  });
}
function Zt(t2) {
  var e = t2.state, n = t2.name, r2 = e.rects.reference, o = e.rects.popper, i = e.modifiersData.preventOverflow, a = ne(e, { elementContext: "reference" }), s = ne(e, { altBoundary: true }), f2 = gt(a, r2), c2 = gt(s, o, i), u2 = yt(f2), m2 = yt(c2);
  e.modifiersData[n] = { referenceClippingOffsets: f2, popperEscapeOffsets: c2, isReferenceHidden: u2, hasPopperEscaped: m2 }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": u2, "data-popper-escaped": m2 });
}
var bt = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: Zt };
function en(t2, e, n) {
  var r2 = q$2(t2), o = [P$2, E$1].indexOf(r2) >= 0 ? -1 : 1, i = typeof n == "function" ? n(Object.assign({}, e, { placement: t2 })) : n, a = i[0], s = i[1];
  return a = a || 0, s = (s || 0) * o, [P$2, W$2].indexOf(r2) >= 0 ? { x: s, y: a } : { x: a, y: s };
}
function tn(t2) {
  var e = t2.state, n = t2.options, r2 = t2.name, o = n.offset, i = o === void 0 ? [0, 0] : o, a = Ee.reduce(function(u2, m2) {
    return u2[m2] = en(m2, e.rects, i), u2;
  }, {}), s = a[e.placement], f2 = s.x, c2 = s.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += f2, e.modifiersData.popperOffsets.y += c2), e.modifiersData[r2] = a;
}
var wt = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: tn };
function nn(t2) {
  var e = t2.state, n = t2.name;
  e.modifiersData[n] = mt({ reference: e.rects.reference, element: e.rects.popper, strategy: "absolute", placement: e.placement });
}
var He = { name: "popperOffsets", enabled: true, phase: "read", fn: nn, data: {} };
function rn(t2) {
  return t2 === "x" ? "y" : "x";
}
function on(t2) {
  var e = t2.state, n = t2.options, r2 = t2.name, o = n.mainAxis, i = o === void 0 ? true : o, a = n.altAxis, s = a === void 0 ? false : a, f2 = n.boundary, c2 = n.rootBoundary, u2 = n.altBoundary, m2 = n.padding, v2 = n.tether, l2 = v2 === void 0 ? true : v2, h2 = n.tetherOffset, p2 = h2 === void 0 ? 0 : h2, g2 = ne(e, { boundary: f2, rootBoundary: c2, padding: m2, altBoundary: u2 }), x = q$2(e.placement), y2 = te(e.placement), $2 = !y2, d2 = Le(x), b = rn(d2), w2 = e.modifiersData.popperOffsets, O2 = e.rects.reference, j2 = e.rects.popper, A2 = typeof p2 == "function" ? p2(Object.assign({}, e.rects, { placement: e.placement })) : p2, k2 = typeof A2 == "number" ? { mainAxis: A2, altAxis: A2 } : Object.assign({ mainAxis: 0, altAxis: 0 }, A2), D = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, S3 = { x: 0, y: 0 };
  if (w2) {
    if (i) {
      var L2, re = d2 === "y" ? E$1 : P$2, oe = d2 === "y" ? R$2 : W$2, M = d2 === "y" ? "height" : "width", T2 = w2[d2], pe = T2 + g2[re], _2 = T2 - g2[oe], ue = l2 ? -j2[M] / 2 : 0, xe = y2 === U$1 ? O2[M] : j2[M], ie = y2 === U$1 ? -j2[M] : -O2[M], le = e.elements.arrow, z2 = l2 && le ? ke(le) : { width: 0, height: 0 }, V2 = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : st$1(), de = V2[re], ae = V2[oe], Y2 = fe(0, O2[M], z2[M]), jt = $2 ? O2[M] / 2 - ue - Y2 - de - k2.mainAxis : xe - Y2 - de - k2.mainAxis, Dt = $2 ? -O2[M] / 2 + ue + Y2 + ae + k2.mainAxis : ie + Y2 + ae + k2.mainAxis, Oe = e.elements.arrow && se(e.elements.arrow), Et = Oe ? d2 === "y" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Ce = (L2 = D == null ? void 0 : D[d2]) != null ? L2 : 0, Pt = T2 + jt - Ce - Et, At = T2 + Dt - Ce, qe = fe(l2 ? ve(pe, Pt) : pe, T2, l2 ? X$2(_2, At) : _2);
      w2[d2] = qe, S3[d2] = qe - T2;
    }
    if (s) {
      var Ve, kt = d2 === "x" ? E$1 : P$2, Lt = d2 === "x" ? R$2 : W$2, F2 = w2[b], he = b === "y" ? "height" : "width", Ne = F2 + g2[kt], Ie = F2 - g2[Lt], $e = [E$1, P$2].indexOf(x) !== -1, _e = (Ve = D == null ? void 0 : D[b]) != null ? Ve : 0, ze = $e ? Ne : F2 - O2[he] - j2[he] - _e + k2.altAxis, Fe = $e ? F2 + O2[he] + j2[he] - _e - k2.altAxis : Ie, Ue = l2 && $e ? St(ze, F2, Fe) : fe(l2 ? ze : Ne, F2, l2 ? Fe : Ie);
      w2[b] = Ue, S3[b] = Ue - F2;
    }
    e.modifiersData[r2] = S3;
  }
}
var xt = { name: "preventOverflow", enabled: true, phase: "main", fn: on, requiresIfExists: ["offset"] };
function an(t2) {
  return { scrollLeft: t2.scrollLeft, scrollTop: t2.scrollTop };
}
function sn(t2) {
  return t2 === H$2(t2) || !B$2(t2) ? We(t2) : an(t2);
}
function fn(t2) {
  var e = t2.getBoundingClientRect(), n = Z(e.width) / t2.offsetWidth || 1, r2 = Z(e.height) / t2.offsetHeight || 1;
  return n !== 1 || r2 !== 1;
}
function cn(t2, e, n) {
  n === void 0 && (n = false);
  var r2 = B$2(e), o = B$2(e) && fn(e), i = I(e), a = ee(t2, o), s = { scrollLeft: 0, scrollTop: 0 }, f2 = { x: 0, y: 0 };
  return (r2 || !r2 && !n) && ((C$2(e) !== "body" || Se(i)) && (s = sn(e)), B$2(e) ? (f2 = ee(e, true), f2.x += e.clientLeft, f2.y += e.clientTop) : i && (f2.x = Be(i))), { x: a.left + s.scrollLeft - f2.x, y: a.top + s.scrollTop - f2.y, width: a.width, height: a.height };
}
function pn(t2) {
  var e = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r2 = [];
  t2.forEach(function(i) {
    e.set(i.name, i);
  });
  function o(i) {
    n.add(i.name);
    var a = [].concat(i.requires || [], i.requiresIfExists || []);
    a.forEach(function(s) {
      if (!n.has(s)) {
        var f2 = e.get(s);
        f2 && o(f2);
      }
    }), r2.push(i);
  }
  return t2.forEach(function(i) {
    n.has(i.name) || o(i);
  }), r2;
}
function un(t2) {
  var e = pn(t2);
  return ot$1.reduce(function(n, r2) {
    return n.concat(e.filter(function(o) {
      return o.phase === r2;
    }));
  }, []);
}
function ln(t2) {
  var e;
  return function() {
    return e || (e = new Promise(function(n) {
      Promise.resolve().then(function() {
        e = void 0, n(t2());
      });
    })), e;
  };
}
function dn(t2) {
  var e = t2.reduce(function(n, r2) {
    var o = n[r2.name];
    return n[r2.name] = o ? Object.assign({}, o, r2, { options: Object.assign({}, o.options, r2.options), data: Object.assign({}, o.data, r2.data) }) : r2, n;
  }, {});
  return Object.keys(e).map(function(n) {
    return e[n];
  });
}
var Ot = { placement: "bottom", modifiers: [], strategy: "absolute" };
function $t() {
  for (var t2 = arguments.length, e = new Array(t2), n = 0; n < t2; n++)
    e[n] = arguments[n];
  return !e.some(function(r2) {
    return !(r2 && typeof r2.getBoundingClientRect == "function");
  });
}
function we(t2) {
  t2 === void 0 && (t2 = {});
  var e = t2, n = e.defaultModifiers, r2 = n === void 0 ? [] : n, o = e.defaultOptions, i = o === void 0 ? Ot : o;
  return function(a, s, f2) {
    f2 === void 0 && (f2 = i);
    var c2 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Ot, i), modifiersData: {}, elements: { reference: a, popper: s }, attributes: {}, styles: {} }, u2 = [], m2 = false, v2 = { state: c2, setOptions: function(p2) {
      var g2 = typeof p2 == "function" ? p2(c2.options) : p2;
      h2(), c2.options = Object.assign({}, i, c2.options, g2), c2.scrollParents = { reference: Q$2(a) ? ce(a) : a.contextElement ? ce(a.contextElement) : [], popper: ce(s) };
      var x = un(dn([].concat(r2, c2.options.modifiers)));
      return c2.orderedModifiers = x.filter(function(y2) {
        return y2.enabled;
      }), l2(), v2.update();
    }, forceUpdate: function() {
      if (!m2) {
        var p2 = c2.elements, g2 = p2.reference, x = p2.popper;
        if ($t(g2, x)) {
          c2.rects = { reference: cn(g2, se(x), c2.options.strategy === "fixed"), popper: ke(x) }, c2.reset = false, c2.placement = c2.options.placement, c2.orderedModifiers.forEach(function(j2) {
            return c2.modifiersData[j2.name] = Object.assign({}, j2.data);
          });
          for (var y2 = 0; y2 < c2.orderedModifiers.length; y2++) {
            if (c2.reset === true) {
              c2.reset = false, y2 = -1;
              continue;
            }
            var $2 = c2.orderedModifiers[y2], d2 = $2.fn, b = $2.options, w2 = b === void 0 ? {} : b, O2 = $2.name;
            typeof d2 == "function" && (c2 = d2({ state: c2, options: w2, name: O2, instance: v2 }) || c2);
          }
        }
      }
    }, update: ln(function() {
      return new Promise(function(p2) {
        v2.forceUpdate(), p2(c2);
      });
    }), destroy: function() {
      h2(), m2 = true;
    } };
    if (!$t(a, s))
      return v2;
    v2.setOptions(f2).then(function(p2) {
      !m2 && f2.onFirstUpdate && f2.onFirstUpdate(p2);
    });
    function l2() {
      c2.orderedModifiers.forEach(function(p2) {
        var g2 = p2.name, x = p2.options, y2 = x === void 0 ? {} : x, $2 = p2.effect;
        if (typeof $2 == "function") {
          var d2 = $2({ state: c2, name: g2, instance: v2, options: y2 }), b = function() {
          };
          u2.push(d2 || b);
        }
      });
    }
    function h2() {
      u2.forEach(function(p2) {
        return p2();
      }), u2 = [];
    }
    return v2;
  };
}
we();
var mn = [Re, He, Me, Ae];
we({ defaultModifiers: mn });
var gn = [Re, He, Me, Ae, wt, vt, xt, pt, bt], yn = we({ defaultModifiers: gn });
const usePopper = (referenceElementRef, popperElementRef, opts = {}) => {
  const stateUpdater = {
    name: "updateState",
    enabled: true,
    phase: "write",
    fn: ({ state }) => {
      const derivedState = deriveState(state);
      Object.assign(states.value, derivedState);
    },
    requires: ["computeStyles"]
  };
  const options = computed(() => {
    const { onFirstUpdate, placement, strategy, modifiers } = unref(opts);
    return {
      onFirstUpdate,
      placement: placement || "bottom",
      strategy: strategy || "absolute",
      modifiers: [
        ...modifiers || [],
        stateUpdater,
        { name: "applyStyles", enabled: false }
      ]
    };
  });
  const instanceRef = shallowRef();
  const states = ref({
    styles: {
      popper: {
        position: unref(options).strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  });
  const destroy = () => {
    if (!instanceRef.value)
      return;
    instanceRef.value.destroy();
    instanceRef.value = void 0;
  };
  watch(options, (newOptions) => {
    const instance = unref(instanceRef);
    if (instance) {
      instance.setOptions(newOptions);
    }
  }, {
    deep: true
  });
  watch([referenceElementRef, popperElementRef], ([referenceElement, popperElement]) => {
    destroy();
    if (!referenceElement || !popperElement)
      return;
    instanceRef.value = yn(referenceElement, popperElement, unref(options));
  });
  onBeforeUnmount(() => {
    destroy();
  });
  return {
    state: computed(() => {
      var _a2;
      return { ...((_a2 = unref(instanceRef)) == null ? void 0 : _a2.state) || {} };
    }),
    styles: computed(() => unref(states).styles),
    attributes: computed(() => unref(states).attributes),
    update: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.update();
    },
    forceUpdate: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.forceUpdate();
    },
    instanceRef: computed(() => unref(instanceRef))
  };
};
function deriveState(state) {
  const elements = Object.keys(state.elements);
  const styles = fromPairs(elements.map((element) => [element, state.styles[element] || {}]));
  const attributes = fromPairs(elements.map((element) => [element, state.attributes[element]]));
  return {
    styles,
    attributes
  };
}
function useTimeout() {
  let timeoutHandle;
  const registerTimeout = (fn2, delay) => {
    cancelTimeout();
    timeoutHandle = window.setTimeout(fn2, delay);
  };
  const cancelTimeout = () => window.clearTimeout(timeoutHandle);
  tryOnScopeDispose(() => cancelTimeout());
  return {
    registerTimeout,
    cancelTimeout
  };
}
const defaultIdInjection = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
};
const ID_INJECTION_KEY = Symbol("elIdInjection");
const useIdInjection = () => {
  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;
};
const useId = (deterministicId) => {
  const idInjection = useIdInjection();
  const namespace = useGetDerivedNamespace();
  const idRef = computed(() => unref(deterministicId) || `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`);
  return idRef;
};
let registeredEscapeHandlers = [];
const cachedHandler = (e) => {
  const event = e;
  if (event.key === EVENT_CODE.esc) {
    registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
  }
};
const useEscapeKeydown = (handler) => {
  onMounted(() => {
    if (registeredEscapeHandlers.length === 0) {
      document.addEventListener("keydown", cachedHandler);
    }
    if (isClient)
      registeredEscapeHandlers.push(handler);
  });
  onBeforeUnmount(() => {
    registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler);
    if (registeredEscapeHandlers.length === 0) {
      if (isClient)
        document.removeEventListener("keydown", cachedHandler);
    }
  });
};
let cachedContainer;
const usePopperContainerId = () => {
  const namespace = useGetDerivedNamespace();
  const idInjection = useIdInjection();
  const id = computed(() => {
    return `${namespace.value}-popper-container-${idInjection.prefix}`;
  });
  const selector = computed(() => `#${id.value}`);
  return {
    id,
    selector
  };
};
const createContainer = (id) => {
  const container = document.createElement("div");
  container.id = id;
  document.body.appendChild(container);
  return container;
};
const usePopperContainer = () => {
  const { id, selector } = usePopperContainerId();
  onBeforeMount(() => {
    if (!isClient)
      return;
    if (!cachedContainer && !document.body.querySelector(selector.value)) {
      cachedContainer = createContainer(id.value);
    }
  });
  return {
    id,
    selector
  };
};
const useDelayedToggleProps = buildProps({
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  }
});
const useDelayedToggle = ({
  showAfter,
  hideAfter,
  autoClose,
  open,
  close
}) => {
  const { registerTimeout } = useTimeout();
  const {
    registerTimeout: registerTimeoutForAutoClose,
    cancelTimeout: cancelTimeoutForAutoClose
  } = useTimeout();
  const onOpen = (event) => {
    registerTimeout(() => {
      open(event);
      const _autoClose = unref(autoClose);
      if (isNumber(_autoClose) && _autoClose > 0) {
        registerTimeoutForAutoClose(() => {
          close(event);
        }, _autoClose);
      }
    }, unref(showAfter));
  };
  const onClose = (event) => {
    cancelTimeoutForAutoClose();
    registerTimeout(() => {
      close(event);
    }, unref(hideAfter));
  };
  return {
    onOpen,
    onClose
  };
};
const FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
const useForwardRef = (forwardRef) => {
  const setForwardRef = (el) => {
    forwardRef.value = el;
  };
  provide(FORWARD_REF_INJECTION_KEY, {
    setForwardRef
  });
};
const useForwardRefDirective = (setForwardRef) => {
  return {
    mounted(el) {
      setForwardRef(el);
    },
    updated(el) {
      setForwardRef(el);
    },
    unmounted() {
      setForwardRef(null);
    }
  };
};
const zIndex = ref(0);
const defaultInitialZIndex = 2e3;
const zIndexContextKey = Symbol("zIndexContextKey");
const useZIndex = (zIndexOverrides) => {
  const zIndexInjection = zIndexOverrides || (getCurrentInstance() ? inject(zIndexContextKey, void 0) : void 0);
  const initialZIndex = computed(() => {
    const zIndexFromInjection = unref(zIndexInjection);
    return isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;
  });
  const currentZIndex = computed(() => initialZIndex.value + zIndex.value);
  const nextZIndex = () => {
    zIndex.value++;
    return currentZIndex.value;
  };
  return {
    initialZIndex,
    currentZIndex,
    nextZIndex
  };
};
function useCursor(input) {
  const selectionRef = ref();
  function recordCursor() {
    if (input.value == void 0)
      return;
    const { selectionStart, selectionEnd, value } = input.value;
    if (selectionStart == null || selectionEnd == null)
      return;
    const beforeTxt = value.slice(0, Math.max(0, selectionStart));
    const afterTxt = value.slice(Math.max(0, selectionEnd));
    selectionRef.value = {
      selectionStart,
      selectionEnd,
      value,
      beforeTxt,
      afterTxt
    };
  }
  function setCursor() {
    if (input.value == void 0 || selectionRef.value == void 0)
      return;
    const { value } = input.value;
    const { beforeTxt, afterTxt, selectionStart } = selectionRef.value;
    if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
      return;
    let startPos = value.length;
    if (value.endsWith(afterTxt)) {
      startPos = value.length - afterTxt.length;
    } else if (value.startsWith(beforeTxt)) {
      startPos = beforeTxt.length;
    } else {
      const beforeLastChar = beforeTxt[selectionStart - 1];
      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
      if (newIndex !== -1) {
        startPos = newIndex + 1;
      }
    }
    input.value.setSelectionRange(startPos, startPos);
  }
  return [recordCursor, setCursor];
}
const useSizeProp = buildProp({
  type: String,
  values: componentSizes,
  required: false
});
const SIZE_INJECTION_KEY = Symbol("size");
const useGlobalSize = () => {
  const injectedSize = inject(SIZE_INJECTION_KEY, {});
  return computed(() => {
    return unref(injectedSize.size) || "";
  });
};
function useFocusController(target, { afterFocus, beforeBlur, afterBlur } = {}) {
  const instance = getCurrentInstance();
  const { emit } = instance;
  const wrapperRef = shallowRef();
  const isFocused = ref(false);
  const handleFocus = (event) => {
    if (isFocused.value)
      return;
    isFocused.value = true;
    emit("focus", event);
    afterFocus == null ? void 0 : afterFocus();
  };
  const handleBlur = (event) => {
    var _a2;
    const cancelBlur = isFunction$1(beforeBlur) ? beforeBlur(event) : false;
    if (cancelBlur || event.relatedTarget && ((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(event.relatedTarget)))
      return;
    isFocused.value = false;
    emit("blur", event);
    afterBlur == null ? void 0 : afterBlur();
  };
  const handleClick = () => {
    var _a2;
    (_a2 = target.value) == null ? void 0 : _a2.focus();
  };
  watch(wrapperRef, (el) => {
    if (el) {
      el.setAttribute("tabindex", "-1");
    }
  });
  useEventListener(wrapperRef, "click", handleClick);
  return {
    wrapperRef,
    isFocused,
    handleFocus,
    handleBlur
  };
}
const configProviderContextKey = Symbol();
const globalConfig = ref();
function useGlobalConfig(key, defaultValue = void 0) {
  const config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;
  if (key) {
    return computed(() => {
      var _a2, _b;
      return (_b = (_a2 = config.value) == null ? void 0 : _a2[key]) != null ? _b : defaultValue;
    });
  } else {
    return config;
  }
}
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const iconProps = buildProps({
  size: {
    type: definePropType([Number, String])
  },
  color: {
    type: String
  }
});
const __default__$h = defineComponent({
  name: "ElIcon",
  inheritAttrs: false
});
const _sfc_main$z = /* @__PURE__ */ defineComponent({
  ...__default__$h,
  props: iconProps,
  setup(__props) {
    const props = __props;
    const ns = useNamespace("icon");
    const style = computed(() => {
      const { size, color } = props;
      if (!size && !color)
        return {};
      return {
        fontSize: isUndefined(size) ? void 0 : addUnit(size),
        "--color": color
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("i", mergeProps({
        class: unref(ns).b(),
        style: unref(style)
      }, _ctx.$attrs), [
        renderSlot(_ctx.$slots, "default")
      ], 16);
    };
  }
});
var Icon = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["__file", "icon.vue"]]);
const ElIcon = withInstall(Icon);
const formContextKey = Symbol("formContextKey");
const formItemContextKey = Symbol("formItemContextKey");
const useFormSize = (fallback, ignore = {}) => {
  const emptyRef = ref(void 0);
  const size = ignore.prop ? emptyRef : useProp("size");
  const globalConfig2 = ignore.global ? emptyRef : useGlobalSize();
  const form = ignore.form ? { size: void 0 } : inject(formContextKey, void 0);
  const formItem = ignore.formItem ? { size: void 0 } : inject(formItemContextKey, void 0);
  return computed(() => size.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig2.value || "");
};
const useFormDisabled = (fallback) => {
  const disabled = useProp("disabled");
  const form = inject(formContextKey, void 0);
  return computed(() => disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false);
};
const useFormItem = () => {
  const form = inject(formContextKey, void 0);
  const formItem = inject(formItemContextKey, void 0);
  return {
    form,
    formItem
  };
};
const useFormItemInputId = (props, {
  formItemContext,
  disableIdGeneration,
  disableIdManagement
}) => {
  if (!disableIdGeneration) {
    disableIdGeneration = ref(false);
  }
  if (!disableIdManagement) {
    disableIdManagement = ref(false);
  }
  const inputId = ref();
  let idUnwatch = void 0;
  const isLabeledByFormItem = computed(() => {
    var _a2;
    return !!(!props.label && formItemContext && formItemContext.inputIds && ((_a2 = formItemContext.inputIds) == null ? void 0 : _a2.length) <= 1);
  });
  onMounted(() => {
    idUnwatch = watch([toRef(props, "id"), disableIdGeneration], ([id, disableIdGeneration2]) => {
      const newId = id != null ? id : !disableIdGeneration2 ? useId().value : void 0;
      if (newId !== inputId.value) {
        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
          inputId.value && formItemContext.removeInputId(inputId.value);
          if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
            formItemContext.addInputId(newId);
          }
        }
        inputId.value = newId;
      }
    }, { immediate: true });
  });
  onUnmounted(() => {
    idUnwatch && idUnwatch();
    if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
      inputId.value && formItemContext.removeInputId(inputId.value);
    }
  });
  return {
    isLabeledByFormItem,
    inputId
  };
};
const formMetaProps = buildProps({
  size: {
    type: String,
    values: componentSizes
  },
  disabled: Boolean
});
const formProps = buildProps({
  ...formMetaProps,
  model: Object,
  rules: {
    type: definePropType(Object)
  },
  labelPosition: {
    type: String,
    values: ["left", "right", "top"],
    default: "right"
  },
  requireAsteriskPosition: {
    type: String,
    values: ["left", "right"],
    default: "left"
  },
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  labelSuffix: {
    type: String,
    default: ""
  },
  inline: Boolean,
  inlineMessage: Boolean,
  statusIcon: Boolean,
  showMessage: {
    type: Boolean,
    default: true
  },
  validateOnRuleChange: {
    type: Boolean,
    default: true
  },
  hideRequiredAsterisk: Boolean,
  scrollToError: Boolean,
  scrollIntoViewOptions: {
    type: [Object, Boolean]
  }
});
const formEmits = {
  validate: (prop, isValid, message) => (isArray$1(prop) || isString$1(prop)) && isBoolean(isValid) && isString$1(message)
};
function useFormLabelWidth() {
  const potentialLabelWidthArr = ref([]);
  const autoLabelWidth = computed(() => {
    if (!potentialLabelWidthArr.value.length)
      return "0";
    const max = Math.max(...potentialLabelWidthArr.value);
    return max ? `${max}px` : "";
  });
  function getLabelWidthIndex(width) {
    const index = potentialLabelWidthArr.value.indexOf(width);
    if (index === -1 && autoLabelWidth.value === "0")
      ;
    return index;
  }
  function registerLabelWidth(val, oldVal) {
    if (val && oldVal) {
      const index = getLabelWidthIndex(oldVal);
      potentialLabelWidthArr.value.splice(index, 1, val);
    } else if (val) {
      potentialLabelWidthArr.value.push(val);
    }
  }
  function deregisterLabelWidth(val) {
    const index = getLabelWidthIndex(val);
    if (index > -1) {
      potentialLabelWidthArr.value.splice(index, 1);
    }
  }
  return {
    autoLabelWidth,
    registerLabelWidth,
    deregisterLabelWidth
  };
}
const filterFields = (fields, props) => {
  const normalized = castArray$1(props);
  return normalized.length > 0 ? fields.filter((field) => field.prop && normalized.includes(field.prop)) : fields;
};
const COMPONENT_NAME$4 = "ElForm";
const __default__$g = defineComponent({
  name: COMPONENT_NAME$4
});
const _sfc_main$y = /* @__PURE__ */ defineComponent({
  ...__default__$g,
  props: formProps,
  emits: formEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const fields = [];
    const formSize = useFormSize();
    const ns = useNamespace("form");
    const formClasses = computed(() => {
      const { labelPosition, inline } = props;
      return [
        ns.b(),
        ns.m(formSize.value || "default"),
        {
          [ns.m(`label-${labelPosition}`)]: labelPosition,
          [ns.m("inline")]: inline
        }
      ];
    });
    const getField = (prop) => {
      return fields.find((field) => field.prop === prop);
    };
    const addField = (field) => {
      fields.push(field);
    };
    const removeField = (field) => {
      if (field.prop) {
        fields.splice(fields.indexOf(field), 1);
      }
    };
    const resetFields = (properties = []) => {
      if (!props.model) {
        return;
      }
      filterFields(fields, properties).forEach((field) => field.resetField());
    };
    const clearValidate = (props2 = []) => {
      filterFields(fields, props2).forEach((field) => field.clearValidate());
    };
    const isValidatable = computed(() => {
      const hasModel = !!props.model;
      return hasModel;
    });
    const obtainValidateFields = (props2) => {
      if (fields.length === 0)
        return [];
      const filteredFields = filterFields(fields, props2);
      if (!filteredFields.length) {
        return [];
      }
      return filteredFields;
    };
    const validate = async (callback) => validateField(void 0, callback);
    const doValidateField = async (props2 = []) => {
      if (!isValidatable.value)
        return false;
      const fields2 = obtainValidateFields(props2);
      if (fields2.length === 0)
        return true;
      let validationErrors = {};
      for (const field of fields2) {
        try {
          await field.validate("");
        } catch (fields3) {
          validationErrors = {
            ...validationErrors,
            ...fields3
          };
        }
      }
      if (Object.keys(validationErrors).length === 0)
        return true;
      return Promise.reject(validationErrors);
    };
    const validateField = async (modelProps = [], callback) => {
      const shouldThrow = !isFunction$1(callback);
      try {
        const result = await doValidateField(modelProps);
        if (result === true) {
          callback == null ? void 0 : callback(result);
        }
        return result;
      } catch (e) {
        if (e instanceof Error)
          throw e;
        const invalidFields = e;
        if (props.scrollToError) {
          scrollToField(Object.keys(invalidFields)[0]);
        }
        callback == null ? void 0 : callback(false, invalidFields);
        return shouldThrow && Promise.reject(invalidFields);
      }
    };
    const scrollToField = (prop) => {
      var _a2;
      const field = filterFields(fields, prop)[0];
      if (field) {
        (_a2 = field.$el) == null ? void 0 : _a2.scrollIntoView(props.scrollIntoViewOptions);
      }
    };
    watch(() => props.rules, () => {
      if (props.validateOnRuleChange) {
        validate().catch((err) => debugWarn());
      }
    }, { deep: true });
    provide(formContextKey, reactive({
      ...toRefs(props),
      emit,
      resetFields,
      clearValidate,
      validateField,
      getField,
      addField,
      removeField,
      ...useFormLabelWidth()
    }));
    expose({
      validate,
      validateField,
      resetFields,
      clearValidate,
      scrollToField
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("form", {
        class: normalizeClass(unref(formClasses))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Form = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["__file", "form.vue"]]);
var define_process_env_default = {};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p22) {
    o2.__proto__ = p22;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn2) {
  return Function.toString.call(fn2).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning = function warning2() {
};
if (typeof process !== "undefined" && define_process_env_default && false) {
  warning = function warning3(type4, errors) {
    if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
      if (errors.every(function(e) {
        return typeof e === "string";
      })) {
        console.warn(type4, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var i = 0;
  var len = args.length;
  if (typeof template === "function") {
    return template.apply(null, args);
  }
  if (typeof template === "string") {
    var str = template.replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_2) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    return str;
  }
  return template;
}
function isNativeStringType(type4) {
  return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
}
function isEmptyValue(value, type4) {
  if (value === void 0 || value === null) {
    return true;
  }
  if (type4 === "array" && Array.isArray(value) && !value.length) {
    return true;
  }
  if (isNativeStringType(type4) && typeof value === "string" && !value) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors || []);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index;
    index = index + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k2) {
    ret.push.apply(ret, objArr[k2] || []);
  });
  return ret;
}
var AsyncValidationError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
  if (option.first) {
    var _pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next);
    });
    _pending["catch"](function(e) {
      return e;
    });
    return _pending;
  }
  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function(resolve, reject) {
    var next = function next2(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve(source);
    }
    objArrKeys.forEach(function(key) {
      var arr = objArr[key];
      if (firstFields.indexOf(key) !== -1) {
        asyncSerialArray(arr, func, next);
      } else {
        asyncParallelArray(arr, func, next);
      }
    });
  });
  pending["catch"](function(e) {
    return e;
  });
  return pending;
}
function isErrorObj(obj) {
  return !!(obj && obj.message !== void 0);
}
function getValue(value, path) {
  var v2 = value;
  for (var i = 0; i < path.length; i++) {
    if (v2 == void 0) {
      return v2;
    }
    v2 = v2[path[i]];
  }
  return v2;
}
function complementError(rule, source) {
  return function(oe) {
    var fieldValue;
    if (rule.fullFields) {
      fieldValue = getValue(source, rule.fullFields);
    } else {
      fieldValue = source[oe.field || rule.fullField];
    }
    if (isErrorObj(oe)) {
      oe.field = oe.field || rule.fullField;
      oe.fieldValue = fieldValue;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      fieldValue,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value = source[s];
        if (typeof value === "object" && typeof target[s] === "object") {
          target[s] = _extends({}, target[s], value);
        } else {
          target[s] = value;
        }
      }
    }
  }
  return target;
}
var required$1 = function required(rule, value, source, errors, options, type4) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
    errors.push(format(options.messages.required, rule.fullField));
  }
};
var whitespace = function whitespace2(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === "") {
    errors.push(format(options.messages.whitespace, rule.fullField));
  }
};
var urlReg;
var getUrlRegex = function() {
  if (urlReg) {
    return urlReg;
  }
  var word = "[a-fA-F\\d:]";
  var b = function b2(options) {
    return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
  };
  var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  var v6seg = "[a-fA-F\\d]{1,4}";
  var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
  var v4exact = new RegExp("^" + v4 + "$");
  var v6exact = new RegExp("^" + v6 + "$");
  var ip = function ip2(options) {
    return options && options.exact ? v46Exact : new RegExp("(?:" + b(options) + v4 + b(options) + ")|(?:" + b(options) + v6 + b(options) + ")", "g");
  };
  ip.v4 = function(options) {
    return options && options.exact ? v4exact : new RegExp("" + b(options) + v4 + b(options), "g");
  };
  ip.v6 = function(options) {
    return options && options.exact ? v6exact : new RegExp("" + b(options) + v6 + b(options), "g");
  };
  var protocol = "(?:(?:[a-z]+:)?//)";
  var auth = "(?:\\S+(?::\\S*)?@)?";
  var ipv4 = ip.v4().source;
  var ipv6 = ip.v6().source;
  var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
  var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
  var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
  var port = "(?::\\d{2,5})?";
  var path = '(?:[/?#][^\\s"]*)?';
  var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path;
  urlReg = new RegExp("(?:^" + regex + "$)", "i");
  return urlReg;
};
var pattern$2 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  "float": function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value);
    } catch (e) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }
    return typeof value === "number";
  },
  object: function object(value) {
    return typeof value === "object" && !types.array(value);
  },
  method: function method(value) {
    return typeof value === "function";
  },
  email: function email(value) {
    return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
  },
  url: function url(value) {
    return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
  },
  hex: function hex(value) {
    return typeof value === "string" && !!value.match(pattern$2.hex);
  }
};
var type$1 = function type(rule, value, source, errors, options) {
  if (rule.required && value === void 0) {
    required$1(rule, value, source, errors, options);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value !== rule.type) {
    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
  }
};
var range = function range2(rule, value, source, errors, options) {
  var len = typeof rule.len === "number";
  var min = typeof rule.min === "number";
  var max = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === "number";
  var str = typeof value === "string";
  var arr = Array.isArray(value);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value.length;
  }
  if (str) {
    val = value.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val < rule.min) {
    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
  } else if (max && !min && val > rule.max) {
    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
  } else if (min && max && (val < rule.min || val > rule.max)) {
    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
};
var ENUM$1 = "enum";
var enumerable$1 = function enumerable(rule, value, source, errors, options) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value) === -1) {
    errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
};
var pattern$1 = function pattern(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
};
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
var string = function string2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "string");
    if (!isEmptyValue(value, "string")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }
  callback(errors);
};
var method2 = function method3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var number2 = function number3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (value === "") {
      value = void 0;
    }
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var _boolean = function _boolean2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var regexp2 = function regexp3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var integer2 = function integer3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var floatFn = function floatFn2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var array2 = function array3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if ((value === void 0 || value === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "array");
    if (value !== void 0 && value !== null) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var object2 = function object3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var ENUM = "enum";
var enumerable2 = function enumerable3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules[ENUM](rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var pattern2 = function pattern3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "string")) {
      rules.pattern(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var date2 = function date3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "date")) {
      var dateObject;
      if (value instanceof Date) {
        dateObject = value;
      } else {
        dateObject = new Date(value);
      }
      rules.type(rule, dateObject, source, errors, options);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }
  callback(errors);
};
var required2 = function required3(rule, value, callback, source, options) {
  var errors = [];
  var type4 = Array.isArray(value) ? "array" : typeof value;
  rules.required(rule, value, source, errors, options, type4);
  callback(errors);
};
var type2 = function type3(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, ruleType);
    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var any = function any2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
  }
  callback(errors);
};
var validators = {
  string,
  method: method2,
  number: number2,
  "boolean": _boolean,
  regexp: regexp2,
  integer: integer2,
  "float": floatFn,
  array: array2,
  object: object2,
  "enum": enumerable2,
  pattern: pattern2,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required: required2,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone2() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
var Schema = /* @__PURE__ */ function() {
  function Schema2(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  var _proto = Schema2.prototype;
  _proto.define = function define(rules2) {
    var _this = this;
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    Object.keys(rules2).forEach(function(name) {
      var item = rules2[name];
      _this.rules[name] = Array.isArray(item) ? item : [item];
    });
  };
  _proto.messages = function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  };
  _proto.validate = function validate(source_, o, oc) {
    var _this2 = this;
    if (o === void 0) {
      o = {};
    }
    if (oc === void 0) {
      oc = function oc2() {
      };
    }
    var source = source_;
    var options = o;
    var callback = oc;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback(null, source);
      }
      return Promise.resolve(source);
    }
    function complete(results) {
      var errors = [];
      var fields = {};
      function add(e) {
        if (Array.isArray(e)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e);
        } else {
          errors.push(e);
        }
      }
      for (var i = 0; i < results.length; i++) {
        add(results[i]);
      }
      if (!errors.length) {
        callback(null, source);
      } else {
        fields = convertFieldsError(errors);
        callback(errors, fields);
      }
    }
    if (options.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options.messages);
      options.messages = messages$1;
    } else {
      options.messages = this.messages();
    }
    var series = {};
    var keys2 = options.keys || Object.keys(this.rules);
    keys2.forEach(function(z2) {
      var arr = _this2.rules[z2];
      var value = source[z2];
      arr.forEach(function(r2) {
        var rule = r2;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _extends({}, source);
          }
          value = source[z2] = rule.transform(value);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends({}, rule);
        }
        rule.validator = _this2.getValidationMethod(rule);
        if (!rule.validator) {
          return;
        }
        rule.field = z2;
        rule.fullField = rule.fullField || z2;
        rule.type = _this2.getType(rule);
        series[z2] = series[z2] || [];
        series[z2].push({
          rule,
          value,
          source,
          field: z2
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options, function(data, doIt) {
      var rule = data.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data.value);
      rule.field = data.field;
      function addFullField(key, schema) {
        return _extends({}, schema, {
          fullField: rule.fullField + "." + key,
          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
        });
      }
      function cb(e) {
        if (e === void 0) {
          e = [];
        }
        var errorList = Array.isArray(e) ? e : [e];
        if (!options.suppressWarning && errorList.length) {
          Schema2.warning("async-validator:", errorList);
        }
        if (errorList.length && rule.message !== void 0) {
          errorList = [].concat(rule.message);
        }
        var filledErrors = errorList.map(complementError(rule, source));
        if (options.first && filledErrors.length) {
          errorFields[rule.field] = 1;
          return doIt(filledErrors);
        }
        if (!deep) {
          doIt(filledErrors);
        } else {
          if (rule.required && !data.value) {
            if (rule.message !== void 0) {
              filledErrors = [].concat(rule.message).map(complementError(rule, source));
            } else if (options.error) {
              filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
            }
            return doIt(filledErrors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            Object.keys(data.value).map(function(key) {
              fieldsSchema[key] = rule.defaultField;
            });
          }
          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);
          var paredFieldsSchema = {};
          Object.keys(fieldsSchema).forEach(function(field) {
            var fieldSchema = fieldsSchema[field];
            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
          });
          var schema = new Schema2(paredFieldsSchema);
          schema.messages(options.messages);
          if (data.rule.options) {
            data.rule.options.messages = options.messages;
            data.rule.options.error = options.error;
          }
          schema.validate(data.value, data.rule.options || options, function(errs) {
            var finalErrors = [];
            if (filledErrors && filledErrors.length) {
              finalErrors.push.apply(finalErrors, filledErrors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data.value, cb, data.source, options);
      } else if (rule.validator) {
        try {
          res = rule.validator(rule, data.value, cb, data.source, options);
        } catch (error) {
          console.error == null ? void 0 : console.error(error);
          if (!options.suppressValidatorError) {
            setTimeout(function() {
              throw error;
            }, 0);
          }
          cb(error.message);
        }
        if (res === true) {
          cb();
        } else if (res === false) {
          cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e) {
          return cb(e);
        });
      }
    }, function(results) {
      complete(results);
    }, source);
  };
  _proto.getType = function getType(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  };
  _proto.getValidationMethod = function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys2 = Object.keys(rule);
    var messageIndex = keys2.indexOf("message");
    if (messageIndex !== -1) {
      keys2.splice(messageIndex, 1);
    }
    if (keys2.length === 1 && keys2[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || void 0;
  };
  return Schema2;
}();
Schema.register = function register(type4, validator) {
  if (typeof validator !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type4] = validator;
};
Schema.warning = warning;
Schema.messages = messages;
Schema.validators = validators;
const formItemValidateStates = [
  "",
  "error",
  "validating",
  "success"
];
const formItemProps = buildProps({
  label: String,
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  prop: {
    type: definePropType([String, Array])
  },
  required: {
    type: Boolean,
    default: void 0
  },
  rules: {
    type: definePropType([Object, Array])
  },
  error: String,
  validateStatus: {
    type: String,
    values: formItemValidateStates
  },
  for: String,
  inlineMessage: {
    type: [String, Boolean],
    default: ""
  },
  showMessage: {
    type: Boolean,
    default: true
  },
  size: {
    type: String,
    values: componentSizes
  }
});
const COMPONENT_NAME$3 = "ElLabelWrap";
var FormLabelWrap = defineComponent({
  name: COMPONENT_NAME$3,
  props: {
    isAutoWidth: Boolean,
    updateAll: Boolean
  },
  setup(props, {
    slots
  }) {
    const formContext = inject(formContextKey, void 0);
    const formItemContext = inject(formItemContextKey);
    if (!formItemContext)
      throwError(COMPONENT_NAME$3, "usage: <el-form-item><label-wrap /></el-form-item>");
    const ns = useNamespace("form");
    const el = ref();
    const computedWidth = ref(0);
    const getLabelWidth = () => {
      var _a2;
      if ((_a2 = el.value) == null ? void 0 : _a2.firstElementChild) {
        const width = window.getComputedStyle(el.value.firstElementChild).width;
        return Math.ceil(Number.parseFloat(width));
      } else {
        return 0;
      }
    };
    const updateLabelWidth = (action = "update") => {
      nextTick(() => {
        if (slots.default && props.isAutoWidth) {
          if (action === "update") {
            computedWidth.value = getLabelWidth();
          } else if (action === "remove") {
            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);
          }
        }
      });
    };
    const updateLabelWidthFn = () => updateLabelWidth("update");
    onMounted(() => {
      updateLabelWidthFn();
    });
    onBeforeUnmount(() => {
      updateLabelWidth("remove");
    });
    onUpdated(() => updateLabelWidthFn());
    watch(computedWidth, (val, oldVal) => {
      if (props.updateAll) {
        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);
      }
    });
    useResizeObserver(computed(() => {
      var _a2, _b;
      return (_b = (_a2 = el.value) == null ? void 0 : _a2.firstElementChild) != null ? _b : null;
    }), updateLabelWidthFn);
    return () => {
      var _a2, _b;
      if (!slots)
        return null;
      const {
        isAutoWidth
      } = props;
      if (isAutoWidth) {
        const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;
        const hasLabel = formItemContext == null ? void 0 : formItemContext.hasLabel;
        const style = {};
        if (hasLabel && autoLabelWidth && autoLabelWidth !== "auto") {
          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
          const marginPosition = formContext.labelPosition === "left" ? "marginRight" : "marginLeft";
          if (marginWidth) {
            style[marginPosition] = `${marginWidth}px`;
          }
        }
        return createVNode("div", {
          "ref": el,
          "class": [ns.be("item", "label-wrap")],
          "style": style
        }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
      } else {
        return createVNode(Fragment, {
          "ref": el
        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);
      }
    };
  }
});
const _hoisted_1$f = ["role", "aria-labelledby"];
const __default__$f = defineComponent({
  name: "ElFormItem"
});
const _sfc_main$x = /* @__PURE__ */ defineComponent({
  ...__default__$f,
  props: formItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const slots = useSlots();
    const formContext = inject(formContextKey, void 0);
    const parentFormItemContext = inject(formItemContextKey, void 0);
    const _size = useFormSize(void 0, { formItem: false });
    const ns = useNamespace("form-item");
    const labelId = useId().value;
    const inputIds = ref([]);
    const validateState = ref("");
    const validateStateDebounced = refDebounced(validateState, 100);
    const validateMessage = ref("");
    const formItemRef = ref();
    let initialValue = void 0;
    let isResettingField = false;
    const labelStyle = computed(() => {
      if ((formContext == null ? void 0 : formContext.labelPosition) === "top") {
        return {};
      }
      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (labelWidth)
        return { width: labelWidth };
      return {};
    });
    const contentStyle = computed(() => {
      if ((formContext == null ? void 0 : formContext.labelPosition) === "top" || (formContext == null ? void 0 : formContext.inline)) {
        return {};
      }
      if (!props.label && !props.labelWidth && isNested) {
        return {};
      }
      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (!props.label && !slots.label) {
        return { marginLeft: labelWidth };
      }
      return {};
    });
    const formItemClasses = computed(() => [
      ns.b(),
      ns.m(_size.value),
      ns.is("error", validateState.value === "error"),
      ns.is("validating", validateState.value === "validating"),
      ns.is("success", validateState.value === "success"),
      ns.is("required", isRequired.value || props.required),
      ns.is("no-asterisk", formContext == null ? void 0 : formContext.hideRequiredAsterisk),
      (formContext == null ? void 0 : formContext.requireAsteriskPosition) === "right" ? "asterisk-right" : "asterisk-left",
      { [ns.m("feedback")]: formContext == null ? void 0 : formContext.statusIcon }
    ]);
    const _inlineMessage = computed(() => isBoolean(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);
    const validateClasses = computed(() => [
      ns.e("error"),
      { [ns.em("error", "inline")]: _inlineMessage.value }
    ]);
    const propString = computed(() => {
      if (!props.prop)
        return "";
      return isString$1(props.prop) ? props.prop : props.prop.join(".");
    });
    const hasLabel = computed(() => {
      return !!(props.label || slots.label);
    });
    const labelFor = computed(() => {
      return props.for || (inputIds.value.length === 1 ? inputIds.value[0] : void 0);
    });
    const isGroup = computed(() => {
      return !labelFor.value && hasLabel.value;
    });
    const isNested = !!parentFormItemContext;
    const fieldValue = computed(() => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop) {
        return;
      }
      return getProp(model, props.prop).value;
    });
    const normalizedRules = computed(() => {
      const { required: required4 } = props;
      const rules2 = [];
      if (props.rules) {
        rules2.push(...castArray$1(props.rules));
      }
      const formRules = formContext == null ? void 0 : formContext.rules;
      if (formRules && props.prop) {
        const _rules = getProp(formRules, props.prop).value;
        if (_rules) {
          rules2.push(...castArray$1(_rules));
        }
      }
      if (required4 !== void 0) {
        const requiredRules = rules2.map((rule, i) => [rule, i]).filter(([rule]) => Object.keys(rule).includes("required"));
        if (requiredRules.length > 0) {
          for (const [rule, i] of requiredRules) {
            if (rule.required === required4)
              continue;
            rules2[i] = { ...rule, required: required4 };
          }
        } else {
          rules2.push({ required: required4 });
        }
      }
      return rules2;
    });
    const validateEnabled = computed(() => normalizedRules.value.length > 0);
    const getFilteredRule = (trigger) => {
      const rules2 = normalizedRules.value;
      return rules2.filter((rule) => {
        if (!rule.trigger || !trigger)
          return true;
        if (Array.isArray(rule.trigger)) {
          return rule.trigger.includes(trigger);
        } else {
          return rule.trigger === trigger;
        }
      }).map(({ trigger: trigger2, ...rule }) => rule);
    };
    const isRequired = computed(() => normalizedRules.value.some((rule) => rule.required));
    const shouldShowError = computed(() => {
      var _a2;
      return validateStateDebounced.value === "error" && props.showMessage && ((_a2 = formContext == null ? void 0 : formContext.showMessage) != null ? _a2 : true);
    });
    const currentLabel = computed(() => `${props.label || ""}${(formContext == null ? void 0 : formContext.labelSuffix) || ""}`);
    const setValidationState = (state) => {
      validateState.value = state;
    };
    const onValidationFailed = (error) => {
      var _a2, _b;
      const { errors, fields } = error;
      if (!errors || !fields) {
        console.error(error);
      }
      setValidationState("error");
      validateMessage.value = errors ? (_b = (_a2 = errors == null ? void 0 : errors[0]) == null ? void 0 : _a2.message) != null ? _b : `${props.prop} is required` : "";
      formContext == null ? void 0 : formContext.emit("validate", props.prop, false, validateMessage.value);
    };
    const onValidationSucceeded = () => {
      setValidationState("success");
      formContext == null ? void 0 : formContext.emit("validate", props.prop, true, "");
    };
    const doValidate = async (rules2) => {
      const modelName = propString.value;
      const validator = new Schema({
        [modelName]: rules2
      });
      return validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
        onValidationSucceeded();
        return true;
      }).catch((err) => {
        onValidationFailed(err);
        return Promise.reject(err);
      });
    };
    const validate = async (trigger, callback) => {
      if (isResettingField || !props.prop) {
        return false;
      }
      const hasCallback = isFunction$1(callback);
      if (!validateEnabled.value) {
        callback == null ? void 0 : callback(false);
        return false;
      }
      const rules2 = getFilteredRule(trigger);
      if (rules2.length === 0) {
        callback == null ? void 0 : callback(true);
        return true;
      }
      setValidationState("validating");
      return doValidate(rules2).then(() => {
        callback == null ? void 0 : callback(true);
        return true;
      }).catch((err) => {
        const { fields } = err;
        callback == null ? void 0 : callback(false, fields);
        return hasCallback ? false : Promise.reject(fields);
      });
    };
    const clearValidate = () => {
      setValidationState("");
      validateMessage.value = "";
      isResettingField = false;
    };
    const resetField = async () => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop)
        return;
      const computedValue = getProp(model, props.prop);
      isResettingField = true;
      computedValue.value = clone(initialValue);
      await nextTick();
      clearValidate();
      isResettingField = false;
    };
    const addInputId = (id) => {
      if (!inputIds.value.includes(id)) {
        inputIds.value.push(id);
      }
    };
    const removeInputId = (id) => {
      inputIds.value = inputIds.value.filter((listId) => listId !== id);
    };
    watch(() => props.error, (val) => {
      validateMessage.value = val || "";
      setValidationState(val ? "error" : "");
    }, { immediate: true });
    watch(() => props.validateStatus, (val) => setValidationState(val || ""));
    const context = reactive({
      ...toRefs(props),
      $el: formItemRef,
      size: _size,
      validateState,
      labelId,
      inputIds,
      isGroup,
      hasLabel,
      fieldValue,
      addInputId,
      removeInputId,
      resetField,
      clearValidate,
      validate
    });
    provide(formItemContextKey, context);
    onMounted(() => {
      if (props.prop) {
        formContext == null ? void 0 : formContext.addField(context);
        initialValue = clone(fieldValue.value);
      }
    });
    onBeforeUnmount(() => {
      formContext == null ? void 0 : formContext.removeField(context);
    });
    expose({
      size: _size,
      validateMessage,
      validateState,
      validate,
      clearValidate,
      resetField
    });
    return (_ctx, _cache) => {
      var _a2;
      return openBlock(), createElementBlock("div", {
        ref_key: "formItemRef",
        ref: formItemRef,
        class: normalizeClass(unref(formItemClasses)),
        role: unref(isGroup) ? "group" : void 0,
        "aria-labelledby": unref(isGroup) ? unref(labelId) : void 0
      }, [
        createVNode(unref(FormLabelWrap), {
          "is-auto-width": unref(labelStyle).width === "auto",
          "update-all": ((_a2 = unref(formContext)) == null ? void 0 : _a2.labelWidth) === "auto"
        }, {
          default: withCtx(() => [
            unref(hasLabel) ? (openBlock(), createBlock(resolveDynamicComponent(unref(labelFor) ? "label" : "div"), {
              key: 0,
              id: unref(labelId),
              for: unref(labelFor),
              class: normalizeClass(unref(ns).e("label")),
              style: normalizeStyle(unref(labelStyle))
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", { label: unref(currentLabel) }, () => [
                  createTextVNode(toDisplayString(unref(currentLabel)), 1)
                ])
              ]),
              _: 3
            }, 8, ["id", "for", "class", "style"])) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["is-auto-width", "update-all"]),
        createBaseVNode("div", {
          class: normalizeClass(unref(ns).e("content")),
          style: normalizeStyle(unref(contentStyle))
        }, [
          renderSlot(_ctx.$slots, "default"),
          createVNode(TransitionGroup, {
            name: `${unref(ns).namespace.value}-zoom-in-top`
          }, {
            default: withCtx(() => [
              unref(shouldShowError) ? renderSlot(_ctx.$slots, "error", {
                key: 0,
                error: validateMessage.value
              }, () => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(validateClasses))
                }, toDisplayString(validateMessage.value), 3)
              ]) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["name"])
        ], 6)
      ], 10, _hoisted_1$f);
    };
  }
});
var FormItem = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["__file", "form-item.vue"]]);
const ElForm = withInstall(Form, {
  FormItem
});
const ElFormItem = withNoopInstall(FormItem);
let hiddenTextarea = void 0;
const HIDDEN_STYLE = `
  height:0 !important;
  visibility:hidden !important;
  ${isFirefox() ? "" : "overflow:hidden !important;"}
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`;
const CONTEXT_STYLE = [
  "letter-spacing",
  "line-height",
  "padding-top",
  "padding-bottom",
  "font-family",
  "font-weight",
  "font-size",
  "text-rendering",
  "text-transform",
  "width",
  "text-indent",
  "padding-left",
  "padding-right",
  "border-width",
  "box-sizing"
];
function calculateNodeStyling(targetElement) {
  const style = window.getComputedStyle(targetElement);
  const boxSizing = style.getPropertyValue("box-sizing");
  const paddingSize = Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
  const borderSize = Number.parseFloat(style.getPropertyValue("border-bottom-width")) + Number.parseFloat(style.getPropertyValue("border-top-width"));
  const contextStyle = CONTEXT_STYLE.map((name) => `${name}:${style.getPropertyValue(name)}`).join(";");
  return { contextStyle, paddingSize, borderSize, boxSizing };
}
function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
  var _a2;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
  hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);
  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
  let height = hiddenTextarea.scrollHeight;
  const result = {};
  if (boxSizing === "border-box") {
    height = height + borderSize;
  } else if (boxSizing === "content-box") {
    height = height - paddingSize;
  }
  hiddenTextarea.value = "";
  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
  if (isNumber(minRows)) {
    let minHeight = singleRowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    result.minHeight = `${minHeight}px`;
  }
  if (isNumber(maxRows)) {
    let maxHeight = singleRowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
  }
  result.height = `${height}px`;
  (_a2 = hiddenTextarea.parentNode) == null ? void 0 : _a2.removeChild(hiddenTextarea);
  hiddenTextarea = void 0;
  return result;
}
const inputProps = buildProps({
  id: {
    type: String,
    default: void 0
  },
  size: useSizeProp,
  disabled: Boolean,
  modelValue: {
    type: definePropType([
      String,
      Number,
      Object
    ]),
    default: ""
  },
  maxlength: {
    type: [String, Number]
  },
  minlength: {
    type: [String, Number]
  },
  type: {
    type: String,
    default: "text"
  },
  resize: {
    type: String,
    values: ["none", "both", "horizontal", "vertical"]
  },
  autosize: {
    type: definePropType([Boolean, Object]),
    default: false
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  formatter: {
    type: Function
  },
  parser: {
    type: Function
  },
  placeholder: {
    type: String
  },
  form: {
    type: String
  },
  readonly: {
    type: Boolean,
    default: false
  },
  clearable: {
    type: Boolean,
    default: false
  },
  showPassword: {
    type: Boolean,
    default: false
  },
  showWordLimit: {
    type: Boolean,
    default: false
  },
  suffixIcon: {
    type: iconPropType
  },
  prefixIcon: {
    type: iconPropType
  },
  containerRole: {
    type: String,
    default: void 0
  },
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  inputStyle: {
    type: definePropType([Object, Array, String]),
    default: () => mutable({})
  },
  autofocus: {
    type: Boolean,
    default: false
  }
});
const inputEmits = {
  [UPDATE_MODEL_EVENT]: (value) => isString$1(value),
  input: (value) => isString$1(value),
  change: (value) => isString$1(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  clear: () => true,
  mouseleave: (evt) => evt instanceof MouseEvent,
  mouseenter: (evt) => evt instanceof MouseEvent,
  keydown: (evt) => evt instanceof Event,
  compositionstart: (evt) => evt instanceof CompositionEvent,
  compositionupdate: (evt) => evt instanceof CompositionEvent,
  compositionend: (evt) => evt instanceof CompositionEvent
};
const _hoisted_1$e = ["role"];
const _hoisted_2$b = ["id", "minlength", "maxlength", "type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder", "form", "autofocus"];
const _hoisted_3$7 = ["id", "minlength", "maxlength", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder", "form", "autofocus"];
const __default__$e = defineComponent({
  name: "ElInput",
  inheritAttrs: false
});
const _sfc_main$w = /* @__PURE__ */ defineComponent({
  ...__default__$e,
  props: inputProps,
  emits: inputEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const rawAttrs = useAttrs$1();
    const slots = useSlots();
    const containerAttrs = computed(() => {
      const comboBoxAttrs = {};
      if (props.containerRole === "combobox") {
        comboBoxAttrs["aria-haspopup"] = rawAttrs["aria-haspopup"];
        comboBoxAttrs["aria-owns"] = rawAttrs["aria-owns"];
        comboBoxAttrs["aria-expanded"] = rawAttrs["aria-expanded"];
      }
      return comboBoxAttrs;
    });
    const containerKls = computed(() => [
      props.type === "textarea" ? nsTextarea.b() : nsInput.b(),
      nsInput.m(inputSize.value),
      nsInput.is("disabled", inputDisabled.value),
      nsInput.is("exceed", inputExceed.value),
      {
        [nsInput.b("group")]: slots.prepend || slots.append,
        [nsInput.bm("group", "append")]: slots.append,
        [nsInput.bm("group", "prepend")]: slots.prepend,
        [nsInput.m("prefix")]: slots.prefix || props.prefixIcon,
        [nsInput.m("suffix")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,
        [nsInput.bm("suffix", "password-clear")]: showClear.value && showPwdVisible.value,
        [nsInput.b("hidden")]: props.type === "hidden"
      },
      rawAttrs.class
    ]);
    const wrapperKls = computed(() => [
      nsInput.e("wrapper"),
      nsInput.is("focus", isFocused.value)
    ]);
    const attrs = useAttrs({
      excludeKeys: computed(() => {
        return Object.keys(containerAttrs.value);
      })
    });
    const { form: elForm, formItem: elFormItem } = useFormItem();
    const { inputId } = useFormItemInputId(props, {
      formItemContext: elFormItem
    });
    const inputSize = useFormSize();
    const inputDisabled = useFormDisabled();
    const nsInput = useNamespace("input");
    const nsTextarea = useNamespace("textarea");
    const input = shallowRef();
    const textarea = shallowRef();
    const hovering = ref(false);
    const isComposing = ref(false);
    const passwordVisible = ref(false);
    const countStyle = ref();
    const textareaCalcStyle = shallowRef(props.inputStyle);
    const _ref = computed(() => input.value || textarea.value);
    const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(_ref, {
      afterBlur() {
        var _a2;
        if (props.validateEvent) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "blur").catch((err) => debugWarn());
        }
      }
    });
    const needStatusIcon = computed(() => {
      var _a2;
      return (_a2 = elForm == null ? void 0 : elForm.statusIcon) != null ? _a2 : false;
    });
    const validateState = computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);
    const passwordIcon = computed(() => passwordVisible.value ? view_default : hide_default);
    const containerStyle = computed(() => [
      rawAttrs.style
    ]);
    const textareaStyle = computed(() => [
      props.inputStyle,
      textareaCalcStyle.value,
      { resize: props.resize }
    ]);
    const nativeInputValue = computed(() => isNil(props.modelValue) ? "" : String(props.modelValue));
    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));
    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));
    const isWordLimitVisible = computed(() => props.showWordLimit && !!props.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);
    const textLength = computed(() => nativeInputValue.value.length);
    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(props.maxlength));
    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
    const [recordCursor, setCursor] = useCursor(input);
    useResizeObserver(textarea, (entries) => {
      onceInitSizeTextarea();
      if (!isWordLimitVisible.value || props.resize !== "both")
        return;
      const entry = entries[0];
      const { width } = entry.contentRect;
      countStyle.value = {
        right: `calc(100% - ${width + 15 + 6}px)`
      };
    });
    const resizeTextarea = () => {
      const { type: type4, autosize } = props;
      if (!isClient || type4 !== "textarea" || !textarea.value)
        return;
      if (autosize) {
        const minRows = isObject$1(autosize) ? autosize.minRows : void 0;
        const maxRows = isObject$1(autosize) ? autosize.maxRows : void 0;
        const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);
        textareaCalcStyle.value = {
          overflowY: "hidden",
          ...textareaStyle2
        };
        nextTick(() => {
          textarea.value.offsetHeight;
          textareaCalcStyle.value = textareaStyle2;
        });
      } else {
        textareaCalcStyle.value = {
          minHeight: calcTextareaHeight(textarea.value).minHeight
        };
      }
    };
    const createOnceInitResize = (resizeTextarea2) => {
      let isInit = false;
      return () => {
        var _a2;
        if (isInit || !props.autosize)
          return;
        const isElHidden = ((_a2 = textarea.value) == null ? void 0 : _a2.offsetParent) === null;
        if (!isElHidden) {
          resizeTextarea2();
          isInit = true;
        }
      };
    };
    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);
    const setNativeInputValue = () => {
      const input2 = _ref.value;
      const formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;
      if (!input2 || input2.value === formatterValue)
        return;
      input2.value = formatterValue;
    };
    const handleInput = async (event) => {
      recordCursor();
      let { value } = event.target;
      if (props.formatter) {
        value = props.parser ? props.parser(value) : value;
      }
      if (isComposing.value)
        return;
      if (value === nativeInputValue.value) {
        setNativeInputValue();
        return;
      }
      emit(UPDATE_MODEL_EVENT, value);
      emit("input", value);
      await nextTick();
      setNativeInputValue();
      setCursor();
    };
    const handleChange = (event) => {
      emit("change", event.target.value);
    };
    const handleCompositionStart = (event) => {
      emit("compositionstart", event);
      isComposing.value = true;
    };
    const handleCompositionUpdate = (event) => {
      var _a2;
      emit("compositionupdate", event);
      const text = (_a2 = event.target) == null ? void 0 : _a2.value;
      const lastCharacter = text[text.length - 1] || "";
      isComposing.value = !isKorean(lastCharacter);
    };
    const handleCompositionEnd = (event) => {
      emit("compositionend", event);
      if (isComposing.value) {
        isComposing.value = false;
        handleInput(event);
      }
    };
    const handlePasswordVisible = () => {
      passwordVisible.value = !passwordVisible.value;
      focus();
    };
    const focus = async () => {
      var _a2;
      await nextTick();
      (_a2 = _ref.value) == null ? void 0 : _a2.focus();
    };
    const blur = () => {
      var _a2;
      return (_a2 = _ref.value) == null ? void 0 : _a2.blur();
    };
    const handleMouseLeave = (evt) => {
      hovering.value = false;
      emit("mouseleave", evt);
    };
    const handleMouseEnter = (evt) => {
      hovering.value = true;
      emit("mouseenter", evt);
    };
    const handleKeydown = (evt) => {
      emit("keydown", evt);
    };
    const select = () => {
      var _a2;
      (_a2 = _ref.value) == null ? void 0 : _a2.select();
    };
    const clear = () => {
      emit(UPDATE_MODEL_EVENT, "");
      emit("change", "");
      emit("clear");
      emit("input", "");
    };
    watch(() => props.modelValue, () => {
      var _a2;
      nextTick(() => resizeTextarea());
      if (props.validateEvent) {
        (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
      }
    });
    watch(nativeInputValue, () => setNativeInputValue());
    watch(() => props.type, async () => {
      await nextTick();
      setNativeInputValue();
      resizeTextarea();
    });
    onMounted(() => {
      if (!props.formatter && props.parser)
        ;
      setNativeInputValue();
      nextTick(resizeTextarea);
    });
    expose({
      input,
      textarea,
      ref: _ref,
      textareaStyle,
      autosize: toRef(props, "autosize"),
      focus,
      blur,
      select,
      clear,
      resizeTextarea
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps(unref(containerAttrs), {
        class: unref(containerKls),
        style: unref(containerStyle),
        role: _ctx.containerRole,
        onMouseenter: handleMouseEnter,
        onMouseleave: handleMouseLeave
      }), [
        createCommentVNode(" input "),
        _ctx.type !== "textarea" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createCommentVNode(" prepend slot "),
          _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(nsInput).be("group", "prepend"))
          }, [
            renderSlot(_ctx.$slots, "prepend")
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            ref_key: "wrapperRef",
            ref: wrapperRef,
            class: normalizeClass(unref(wrapperKls))
          }, [
            createCommentVNode(" prefix slot "),
            _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(unref(nsInput).e("prefix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("prefix-inner"))
              }, [
                renderSlot(_ctx.$slots, "prefix"),
                _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(nsInput).e("icon"))
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("input", mergeProps({
              id: unref(inputId),
              ref_key: "input",
              ref: input,
              class: unref(nsInput).e("inner")
            }, unref(attrs), {
              minlength: _ctx.minlength,
              maxlength: _ctx.maxlength,
              type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
              disabled: unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomplete: _ctx.autocomplete,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.label,
              placeholder: _ctx.placeholder,
              style: _ctx.inputStyle,
              form: _ctx.form,
              autofocus: _ctx.autofocus,
              onCompositionstart: handleCompositionStart,
              onCompositionupdate: handleCompositionUpdate,
              onCompositionend: handleCompositionEnd,
              onInput: handleInput,
              onFocus: _cache[0] || (_cache[0] = (...args) => unref(handleFocus) && unref(handleFocus)(...args)),
              onBlur: _cache[1] || (_cache[1] = (...args) => unref(handleBlur) && unref(handleBlur)(...args)),
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, _hoisted_2$b),
            createCommentVNode(" suffix slot "),
            unref(suffixVisible) ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(nsInput).e("suffix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("suffix-inner"))
              }, [
                !unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  renderSlot(_ctx.$slots, "suffix"),
                  _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(nsInput).e("icon"))
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 64)) : createCommentVNode("v-if", true),
                unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("clear")]),
                  onMousedown: withModifiers(unref(NOOP), ["prevent"]),
                  onClick: clear
                }, {
                  default: withCtx(() => [
                    createVNode(unref(circle_close_default))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
                unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 2,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("password")]),
                  onClick: handlePasswordVisible
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true),
                unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass(unref(nsInput).e("count"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsInput).e("count-inner"))
                  }, toDisplayString(unref(textLength)) + " / " + toDisplayString(_ctx.maxlength), 3)
                ], 2)) : createCommentVNode("v-if", true),
                unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 4,
                  class: normalizeClass([
                    unref(nsInput).e("icon"),
                    unref(nsInput).e("validateIcon"),
                    unref(nsInput).is("loading", unref(validateState) === "validating")
                  ])
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true)
          ], 2),
          createCommentVNode(" append slot "),
          _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(nsInput).be("group", "append"))
          }, [
            renderSlot(_ctx.$slots, "append")
          ], 2)) : createCommentVNode("v-if", true)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createCommentVNode(" textarea "),
          createBaseVNode("textarea", mergeProps({
            id: unref(inputId),
            ref_key: "textarea",
            ref: textarea,
            class: unref(nsTextarea).e("inner")
          }, unref(attrs), {
            minlength: _ctx.minlength,
            maxlength: _ctx.maxlength,
            tabindex: _ctx.tabindex,
            disabled: unref(inputDisabled),
            readonly: _ctx.readonly,
            autocomplete: _ctx.autocomplete,
            style: unref(textareaStyle),
            "aria-label": _ctx.label,
            placeholder: _ctx.placeholder,
            form: _ctx.form,
            autofocus: _ctx.autofocus,
            onCompositionstart: handleCompositionStart,
            onCompositionupdate: handleCompositionUpdate,
            onCompositionend: handleCompositionEnd,
            onInput: handleInput,
            onFocus: _cache[2] || (_cache[2] = (...args) => unref(handleFocus) && unref(handleFocus)(...args)),
            onBlur: _cache[3] || (_cache[3] = (...args) => unref(handleBlur) && unref(handleBlur)(...args)),
            onChange: handleChange,
            onKeydown: handleKeydown
          }), null, 16, _hoisted_3$7),
          unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
            key: 0,
            style: normalizeStyle(countStyle.value),
            class: normalizeClass(unref(nsInput).e("count"))
          }, toDisplayString(unref(textLength)) + " / " + toDisplayString(_ctx.maxlength), 7)) : createCommentVNode("v-if", true)
        ], 64))
      ], 16, _hoisted_1$e);
    };
  }
});
var Input = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["__file", "input.vue"]]);
const ElInput = withInstall(Input);
const GAP = 4;
const BAR_MAP = {
  vertical: {
    offset: "offsetHeight",
    scroll: "scrollTop",
    scrollSize: "scrollHeight",
    size: "height",
    key: "vertical",
    axis: "Y",
    client: "clientY",
    direction: "top"
  },
  horizontal: {
    offset: "offsetWidth",
    scroll: "scrollLeft",
    scrollSize: "scrollWidth",
    size: "width",
    key: "horizontal",
    axis: "X",
    client: "clientX",
    direction: "left"
  }
};
const renderThumbStyle = ({
  move,
  size,
  bar
}) => ({
  [bar.size]: size,
  transform: `translate${bar.axis}(${move}%)`
});
const scrollbarContextKey = Symbol("scrollbarContextKey");
const thumbProps = buildProps({
  vertical: Boolean,
  size: String,
  move: Number,
  ratio: {
    type: Number,
    required: true
  },
  always: Boolean
});
const COMPONENT_NAME$2 = "Thumb";
const _sfc_main$v = /* @__PURE__ */ defineComponent({
  __name: "thumb",
  props: thumbProps,
  setup(__props) {
    const props = __props;
    const scrollbar = inject(scrollbarContextKey);
    const ns = useNamespace("scrollbar");
    if (!scrollbar)
      throwError(COMPONENT_NAME$2, "can not inject scrollbar context");
    const instance = ref();
    const thumb = ref();
    const thumbState = ref({});
    const visible = ref(false);
    let cursorDown = false;
    let cursorLeave = false;
    let originalOnSelectStart = isClient ? document.onselectstart : null;
    const bar = computed(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);
    const thumbStyle = computed(() => renderThumbStyle({
      size: props.size,
      move: props.move,
      bar: bar.value
    }));
    const offsetRatio = computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);
    const clickThumbHandler = (e) => {
      var _a2;
      e.stopPropagation();
      if (e.ctrlKey || [1, 2].includes(e.button))
        return;
      (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
      startDrag(e);
      const el = e.currentTarget;
      if (!el)
        return;
      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
    };
    const clickTrackHandler = (e) => {
      if (!thumb.value || !instance.value || !scrollbar.wrapElement)
        return;
      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
      const thumbHalf = thumb.value[bar.value.offset] / 2;
      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const startDrag = (e) => {
      e.stopImmediatePropagation();
      cursorDown = true;
      document.addEventListener("mousemove", mouseMoveDocumentHandler);
      document.addEventListener("mouseup", mouseUpDocumentHandler);
      originalOnSelectStart = document.onselectstart;
      document.onselectstart = () => false;
    };
    const mouseMoveDocumentHandler = (e) => {
      if (!instance.value || !thumb.value)
        return;
      if (cursorDown === false)
        return;
      const prevPage = thumbState.value[bar.value.axis];
      if (!prevPage)
        return;
      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const mouseUpDocumentHandler = () => {
      cursorDown = false;
      thumbState.value[bar.value.axis] = 0;
      document.removeEventListener("mousemove", mouseMoveDocumentHandler);
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
      restoreOnselectstart();
      if (cursorLeave)
        visible.value = false;
    };
    const mouseMoveScrollbarHandler = () => {
      cursorLeave = false;
      visible.value = !!props.size;
    };
    const mouseLeaveScrollbarHandler = () => {
      cursorLeave = true;
      visible.value = cursorDown;
    };
    onBeforeUnmount(() => {
      restoreOnselectstart();
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
    });
    const restoreOnselectstart = () => {
      if (document.onselectstart !== originalOnSelectStart)
        document.onselectstart = originalOnSelectStart;
    };
    useEventListener(toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
    useEventListener(toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns).b("fade"),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", {
            ref_key: "instance",
            ref: instance,
            class: normalizeClass([unref(ns).e("bar"), unref(ns).is(unref(bar).key)]),
            onMousedown: clickTrackHandler
          }, [
            createBaseVNode("div", {
              ref_key: "thumb",
              ref: thumb,
              class: normalizeClass(unref(ns).e("thumb")),
              style: normalizeStyle(unref(thumbStyle)),
              onMousedown: clickThumbHandler
            }, null, 38)
          ], 34), [
            [vShow, _ctx.always || visible.value]
          ])
        ]),
        _: 1
      }, 8, ["name"]);
    };
  }
});
var Thumb = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["__file", "thumb.vue"]]);
const barProps = buildProps({
  always: {
    type: Boolean,
    default: true
  },
  minSize: {
    type: Number,
    required: true
  }
});
const _sfc_main$u = /* @__PURE__ */ defineComponent({
  __name: "bar",
  props: barProps,
  setup(__props, { expose }) {
    const props = __props;
    const scrollbar = inject(scrollbarContextKey);
    const moveX = ref(0);
    const moveY = ref(0);
    const sizeWidth = ref("");
    const sizeHeight = ref("");
    const ratioY = ref(1);
    const ratioX = ref(1);
    const handleScroll = (wrap) => {
      if (wrap) {
        const offsetHeight = wrap.offsetHeight - GAP;
        const offsetWidth = wrap.offsetWidth - GAP;
        moveY.value = wrap.scrollTop * 100 / offsetHeight * ratioY.value;
        moveX.value = wrap.scrollLeft * 100 / offsetWidth * ratioX.value;
      }
    };
    const update = () => {
      const wrap = scrollbar == null ? void 0 : scrollbar.wrapElement;
      if (!wrap)
        return;
      const offsetHeight = wrap.offsetHeight - GAP;
      const offsetWidth = wrap.offsetWidth - GAP;
      const originalHeight = offsetHeight ** 2 / wrap.scrollHeight;
      const originalWidth = offsetWidth ** 2 / wrap.scrollWidth;
      const height = Math.max(originalHeight, props.minSize);
      const width = Math.max(originalWidth, props.minSize);
      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));
      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";
      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";
    };
    expose({
      handleScroll,
      update
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(Thumb, {
          move: moveX.value,
          ratio: ratioX.value,
          size: sizeWidth.value,
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"]),
        createVNode(Thumb, {
          move: moveY.value,
          ratio: ratioY.value,
          size: sizeHeight.value,
          vertical: "",
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"])
      ], 64);
    };
  }
});
var Bar = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["__file", "bar.vue"]]);
const scrollbarProps = buildProps({
  height: {
    type: [String, Number],
    default: ""
  },
  maxHeight: {
    type: [String, Number],
    default: ""
  },
  native: {
    type: Boolean,
    default: false
  },
  wrapStyle: {
    type: definePropType([String, Object, Array]),
    default: ""
  },
  wrapClass: {
    type: [String, Array],
    default: ""
  },
  viewClass: {
    type: [String, Array],
    default: ""
  },
  viewStyle: {
    type: [String, Array, Object],
    default: ""
  },
  noresize: Boolean,
  tag: {
    type: String,
    default: "div"
  },
  always: Boolean,
  minSize: {
    type: Number,
    default: 20
  },
  id: String,
  role: String,
  ariaLabel: String,
  ariaOrientation: {
    type: String,
    values: ["horizontal", "vertical"]
  }
});
const scrollbarEmits = {
  scroll: ({
    scrollTop,
    scrollLeft
  }) => [scrollTop, scrollLeft].every(isNumber)
};
const COMPONENT_NAME$1 = "ElScrollbar";
const __default__$d = defineComponent({
  name: COMPONENT_NAME$1
});
const _sfc_main$t = /* @__PURE__ */ defineComponent({
  ...__default__$d,
  props: scrollbarProps,
  emits: scrollbarEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = useNamespace("scrollbar");
    let stopResizeObserver = void 0;
    let stopResizeListener = void 0;
    const scrollbarRef = ref();
    const wrapRef = ref();
    const resizeRef = ref();
    const barRef = ref();
    const wrapStyle = computed(() => {
      const style = {};
      if (props.height)
        style.height = addUnit(props.height);
      if (props.maxHeight)
        style.maxHeight = addUnit(props.maxHeight);
      return [props.wrapStyle, style];
    });
    const wrapKls = computed(() => {
      return [
        props.wrapClass,
        ns.e("wrap"),
        { [ns.em("wrap", "hidden-default")]: !props.native }
      ];
    });
    const resizeKls = computed(() => {
      return [ns.e("view"), props.viewClass];
    });
    const handleScroll = () => {
      var _a2;
      if (wrapRef.value) {
        (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
        emit("scroll", {
          scrollTop: wrapRef.value.scrollTop,
          scrollLeft: wrapRef.value.scrollLeft
        });
      }
    };
    function scrollTo(arg1, arg2) {
      if (isObject$1(arg1)) {
        wrapRef.value.scrollTo(arg1);
      } else if (isNumber(arg1) && isNumber(arg2)) {
        wrapRef.value.scrollTo(arg1, arg2);
      }
    }
    const setScrollTop = (value) => {
      if (!isNumber(value)) {
        return;
      }
      wrapRef.value.scrollTop = value;
    };
    const setScrollLeft = (value) => {
      if (!isNumber(value)) {
        return;
      }
      wrapRef.value.scrollLeft = value;
    };
    const update = () => {
      var _a2;
      (_a2 = barRef.value) == null ? void 0 : _a2.update();
    };
    watch(() => props.noresize, (noresize) => {
      if (noresize) {
        stopResizeObserver == null ? void 0 : stopResizeObserver();
        stopResizeListener == null ? void 0 : stopResizeListener();
      } else {
        ({ stop: stopResizeObserver } = useResizeObserver(resizeRef, update));
        stopResizeListener = useEventListener("resize", update);
      }
    }, { immediate: true });
    watch(() => [props.maxHeight, props.height], () => {
      if (!props.native)
        nextTick(() => {
          var _a2;
          update();
          if (wrapRef.value) {
            (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
          }
        });
    });
    provide(scrollbarContextKey, reactive({
      scrollbarElement: scrollbarRef,
      wrapElement: wrapRef
    }));
    onMounted(() => {
      if (!props.native)
        nextTick(() => {
          update();
        });
    });
    onUpdated(() => update());
    expose({
      wrapRef,
      update,
      scrollTo,
      setScrollTop,
      setScrollLeft,
      handleScroll
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "scrollbarRef",
        ref: scrollbarRef,
        class: normalizeClass(unref(ns).b())
      }, [
        createBaseVNode("div", {
          ref_key: "wrapRef",
          ref: wrapRef,
          class: normalizeClass(unref(wrapKls)),
          style: normalizeStyle(unref(wrapStyle)),
          onScroll: handleScroll
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
            id: _ctx.id,
            ref_key: "resizeRef",
            ref: resizeRef,
            class: normalizeClass(unref(resizeKls)),
            style: normalizeStyle(_ctx.viewStyle),
            role: _ctx.role,
            "aria-label": _ctx.ariaLabel,
            "aria-orientation": _ctx.ariaOrientation
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "class", "style", "role", "aria-label", "aria-orientation"]))
        ], 38),
        !_ctx.native ? (openBlock(), createBlock(Bar, {
          key: 0,
          ref_key: "barRef",
          ref: barRef,
          always: _ctx.always,
          "min-size": _ctx.minSize
        }, null, 8, ["always", "min-size"])) : createCommentVNode("v-if", true)
      ], 2);
    };
  }
});
var Scrollbar = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["__file", "scrollbar.vue"]]);
const ElScrollbar = withInstall(Scrollbar);
const POPPER_INJECTION_KEY = Symbol("popper");
const POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");
const roleTypes = [
  "dialog",
  "grid",
  "group",
  "listbox",
  "menu",
  "navigation",
  "tooltip",
  "tree"
];
const popperProps = buildProps({
  role: {
    type: String,
    values: roleTypes,
    default: "tooltip"
  }
});
const __default__$c = defineComponent({
  name: "ElPopper",
  inheritAttrs: false
});
const _sfc_main$s = /* @__PURE__ */ defineComponent({
  ...__default__$c,
  props: popperProps,
  setup(__props, { expose }) {
    const props = __props;
    const triggerRef = ref();
    const popperInstanceRef = ref();
    const contentRef = ref();
    const referenceRef = ref();
    const role = computed(() => props.role);
    const popperProvides = {
      triggerRef,
      popperInstanceRef,
      contentRef,
      referenceRef,
      role
    };
    expose(popperProvides);
    provide(POPPER_INJECTION_KEY, popperProvides);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
var Popper = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["__file", "popper.vue"]]);
const popperArrowProps = buildProps({
  arrowOffset: {
    type: Number,
    default: 5
  }
});
const __default__$b = defineComponent({
  name: "ElPopperArrow",
  inheritAttrs: false
});
const _sfc_main$r = /* @__PURE__ */ defineComponent({
  ...__default__$b,
  props: popperArrowProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("popper");
    const { arrowOffset, arrowRef, arrowStyle } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);
    watch(() => props.arrowOffset, (val) => {
      arrowOffset.value = val;
    });
    onBeforeUnmount(() => {
      arrowRef.value = void 0;
    });
    expose({
      arrowRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        ref_key: "arrowRef",
        ref: arrowRef,
        class: normalizeClass(unref(ns).e("arrow")),
        style: normalizeStyle(unref(arrowStyle)),
        "data-popper-arrow": ""
      }, null, 6);
    };
  }
});
var ElPopperArrow = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["__file", "arrow.vue"]]);
const NAME = "ElOnlyChild";
const OnlyChild = defineComponent({
  name: NAME,
  setup(_2, {
    slots,
    attrs
  }) {
    var _a2;
    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);
    const forwardRefDirective = useForwardRefDirective((_a2 = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a2 : NOOP);
    return () => {
      var _a22;
      const defaultSlot = (_a22 = slots.default) == null ? void 0 : _a22.call(slots, attrs);
      if (!defaultSlot)
        return null;
      if (defaultSlot.length > 1) {
        return null;
      }
      const firstLegitNode = findFirstLegitChild(defaultSlot);
      if (!firstLegitNode) {
        return null;
      }
      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);
    };
  }
});
function findFirstLegitChild(node) {
  if (!node)
    return null;
  const children = node;
  for (const child of children) {
    if (isObject$1(child)) {
      switch (child.type) {
        case Comment:
          continue;
        case Text:
        case "svg":
          return wrapTextContent(child);
        case Fragment:
          return findFirstLegitChild(child.children);
        default:
          return child;
      }
    }
    return wrapTextContent(child);
  }
  return null;
}
function wrapTextContent(s) {
  const ns = useNamespace("only-child");
  return createVNode("span", {
    "class": ns.e("content")
  }, [s]);
}
const popperTriggerProps = buildProps({
  virtualRef: {
    type: definePropType(Object)
  },
  virtualTriggering: Boolean,
  onMouseenter: {
    type: definePropType(Function)
  },
  onMouseleave: {
    type: definePropType(Function)
  },
  onClick: {
    type: definePropType(Function)
  },
  onKeydown: {
    type: definePropType(Function)
  },
  onFocus: {
    type: definePropType(Function)
  },
  onBlur: {
    type: definePropType(Function)
  },
  onContextmenu: {
    type: definePropType(Function)
  },
  id: String,
  open: Boolean
});
const __default__$a = defineComponent({
  name: "ElPopperTrigger",
  inheritAttrs: false
});
const _sfc_main$q = /* @__PURE__ */ defineComponent({
  ...__default__$a,
  props: popperTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const { role, triggerRef } = inject(POPPER_INJECTION_KEY, void 0);
    useForwardRef(triggerRef);
    const ariaControls = computed(() => {
      return ariaHaspopup.value ? props.id : void 0;
    });
    const ariaDescribedby = computed(() => {
      if (role && role.value === "tooltip") {
        return props.open && props.id ? props.id : void 0;
      }
      return void 0;
    });
    const ariaHaspopup = computed(() => {
      if (role && role.value !== "tooltip") {
        return role.value;
      }
      return void 0;
    });
    const ariaExpanded = computed(() => {
      return ariaHaspopup.value ? `${props.open}` : void 0;
    });
    let virtualTriggerAriaStopWatch = void 0;
    onMounted(() => {
      watch(() => props.virtualRef, (virtualEl) => {
        if (virtualEl) {
          triggerRef.value = unrefElement(virtualEl);
        }
      }, {
        immediate: true
      });
      watch(triggerRef, (el, prevEl) => {
        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
        virtualTriggerAriaStopWatch = void 0;
        if (isElement(el)) {
          [
            "onMouseenter",
            "onMouseleave",
            "onClick",
            "onKeydown",
            "onFocus",
            "onBlur",
            "onContextmenu"
          ].forEach((eventName) => {
            var _a2;
            const handler = props[eventName];
            if (handler) {
              el.addEventListener(eventName.slice(2).toLowerCase(), handler);
              (_a2 = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a2.call(prevEl, eventName.slice(2).toLowerCase(), handler);
            }
          });
          virtualTriggerAriaStopWatch = watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
            [
              "aria-controls",
              "aria-describedby",
              "aria-haspopup",
              "aria-expanded"
            ].forEach((key, idx) => {
              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if (isElement(prevEl)) {
          [
            "aria-controls",
            "aria-describedby",
            "aria-haspopup",
            "aria-expanded"
          ].forEach((key) => prevEl.removeAttribute(key));
        }
      }, {
        immediate: true
      });
    });
    onBeforeUnmount(() => {
      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
      virtualTriggerAriaStopWatch = void 0;
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({ key: 0 }, _ctx.$attrs, {
        "aria-controls": unref(ariaControls),
        "aria-describedby": unref(ariaDescribedby),
        "aria-expanded": unref(ariaExpanded),
        "aria-haspopup": unref(ariaHaspopup)
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : createCommentVNode("v-if", true);
    };
  }
});
var ElPopperTrigger = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["__file", "trigger.vue"]]);
const FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
const FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
const FOCUSOUT_PREVENTED = "focus-trap.focusout-prevented";
const FOCUS_AFTER_TRAPPED_OPTS = {
  cancelable: true,
  bubbles: false
};
const FOCUSOUT_PREVENTED_OPTS = {
  cancelable: true,
  bubbles: false
};
const ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
const ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
const FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");
const focusReason = ref();
const lastUserFocusTimestamp = ref(0);
const lastAutomatedFocusTimestamp = ref(0);
let focusReasonUserCount = 0;
const obtainAllFocusableElements = (element) => {
  const nodes = [];
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
};
const getVisibleElement = (elements, container) => {
  for (const element of elements) {
    if (!isHidden(element, container))
      return element;
  }
};
const isHidden = (element, container) => {
  if (getComputedStyle(element).visibility === "hidden")
    return true;
  while (element) {
    if (container && element === container)
      return false;
    if (getComputedStyle(element).display === "none")
      return true;
    element = element.parentElement;
  }
  return false;
};
const getEdges = (container) => {
  const focusable = obtainAllFocusableElements(container);
  const first = getVisibleElement(focusable, container);
  const last = getVisibleElement(focusable.reverse(), container);
  return [first, last];
};
const isSelectable = (element) => {
  return element instanceof HTMLInputElement && "select" in element;
};
const tryFocus = (element, shouldSelect) => {
  if (element && element.focus) {
    const prevFocusedElement = document.activeElement;
    element.focus({ preventScroll: true });
    lastAutomatedFocusTimestamp.value = window.performance.now();
    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
      element.select();
    }
  }
};
function removeFromStack(list, item) {
  const copy = [...list];
  const idx = list.indexOf(item);
  if (idx !== -1) {
    copy.splice(idx, 1);
  }
  return copy;
}
const createFocusableStack = () => {
  let stack = [];
  const push = (layer) => {
    const currentLayer = stack[0];
    if (currentLayer && layer !== currentLayer) {
      currentLayer.pause();
    }
    stack = removeFromStack(stack, layer);
    stack.unshift(layer);
  };
  const remove = (layer) => {
    var _a2, _b;
    stack = removeFromStack(stack, layer);
    (_b = (_a2 = stack[0]) == null ? void 0 : _a2.resume) == null ? void 0 : _b.call(_a2);
  };
  return {
    push,
    remove
  };
};
const focusFirstDescendant = (elements, shouldSelect = false) => {
  const prevFocusedElement = document.activeElement;
  for (const element of elements) {
    tryFocus(element, shouldSelect);
    if (document.activeElement !== prevFocusedElement)
      return;
  }
};
const focusableStack = createFocusableStack();
const isFocusCausedByUserEvent = () => {
  return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value;
};
const notifyFocusReasonPointer = () => {
  focusReason.value = "pointer";
  lastUserFocusTimestamp.value = window.performance.now();
};
const notifyFocusReasonKeydown = () => {
  focusReason.value = "keyboard";
  lastUserFocusTimestamp.value = window.performance.now();
};
const useFocusReason = () => {
  onMounted(() => {
    if (focusReasonUserCount === 0) {
      document.addEventListener("mousedown", notifyFocusReasonPointer);
      document.addEventListener("touchstart", notifyFocusReasonPointer);
      document.addEventListener("keydown", notifyFocusReasonKeydown);
    }
    focusReasonUserCount++;
  });
  onBeforeUnmount(() => {
    focusReasonUserCount--;
    if (focusReasonUserCount <= 0) {
      document.removeEventListener("mousedown", notifyFocusReasonPointer);
      document.removeEventListener("touchstart", notifyFocusReasonPointer);
      document.removeEventListener("keydown", notifyFocusReasonKeydown);
    }
  });
  return {
    focusReason,
    lastUserFocusTimestamp,
    lastAutomatedFocusTimestamp
  };
};
const createFocusOutPreventedEvent = (detail) => {
  return new CustomEvent(FOCUSOUT_PREVENTED, {
    ...FOCUSOUT_PREVENTED_OPTS,
    detail
  });
};
const _sfc_main$p = defineComponent({
  name: "ElFocusTrap",
  inheritAttrs: false,
  props: {
    loop: Boolean,
    trapped: Boolean,
    focusTrapEl: Object,
    focusStartEl: {
      type: [Object, String],
      default: "first"
    }
  },
  emits: [
    ON_TRAP_FOCUS_EVT,
    ON_RELEASE_FOCUS_EVT,
    "focusin",
    "focusout",
    "focusout-prevented",
    "release-requested"
  ],
  setup(props, { emit }) {
    const forwardRef = ref();
    let lastFocusBeforeTrapped;
    let lastFocusAfterTrapped;
    const { focusReason: focusReason2 } = useFocusReason();
    useEscapeKeydown((event) => {
      if (props.trapped && !focusLayer.paused) {
        emit("release-requested", event);
      }
    });
    const focusLayer = {
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    };
    const onKeydown = (e) => {
      if (!props.loop && !props.trapped)
        return;
      if (focusLayer.paused)
        return;
      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e;
      const { loop } = props;
      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
      const currentFocusingEl = document.activeElement;
      if (isTabbing && currentFocusingEl) {
        const container = currentTarget;
        const [first, last] = getEdges(container);
        const isTabbable = first && last;
        if (!isTabbable) {
          if (currentFocusingEl === container) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
            }
          }
        } else {
          if (!shiftKey && currentFocusingEl === last) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
              if (loop)
                tryFocus(first, true);
            }
          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
              if (loop)
                tryFocus(last, true);
            }
          }
        }
      }
    };
    provide(FOCUS_TRAP_INJECTION_KEY, {
      focusTrapRef: forwardRef,
      onKeydown
    });
    watch(() => props.focusTrapEl, (focusTrapEl) => {
      if (focusTrapEl) {
        forwardRef.value = focusTrapEl;
      }
    }, { immediate: true });
    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {
      if (forwardRef2) {
        forwardRef2.addEventListener("keydown", onKeydown);
        forwardRef2.addEventListener("focusin", onFocusIn);
        forwardRef2.addEventListener("focusout", onFocusOut);
      }
      if (oldForwardRef) {
        oldForwardRef.removeEventListener("keydown", onKeydown);
        oldForwardRef.removeEventListener("focusin", onFocusIn);
        oldForwardRef.removeEventListener("focusout", onFocusOut);
      }
    });
    const trapOnFocus = (e) => {
      emit(ON_TRAP_FOCUS_EVT, e);
    };
    const releaseOnFocus = (e) => emit(ON_RELEASE_FOCUS_EVT, e);
    const onFocusIn = (e) => {
      const trapContainer = unref(forwardRef);
      if (!trapContainer)
        return;
      const target = e.target;
      const relatedTarget = e.relatedTarget;
      const isFocusedInTrap = target && trapContainer.contains(target);
      if (!props.trapped) {
        const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);
        if (!isPrevFocusedInTrap) {
          lastFocusBeforeTrapped = relatedTarget;
        }
      }
      if (isFocusedInTrap)
        emit("focusin", e);
      if (focusLayer.paused)
        return;
      if (props.trapped) {
        if (isFocusedInTrap) {
          lastFocusAfterTrapped = target;
        } else {
          tryFocus(lastFocusAfterTrapped, true);
        }
      }
    };
    const onFocusOut = (e) => {
      const trapContainer = unref(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      if (props.trapped) {
        const relatedTarget = e.relatedTarget;
        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {
          setTimeout(() => {
            if (!focusLayer.paused && props.trapped) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                tryFocus(lastFocusAfterTrapped, true);
              }
            }
          }, 0);
        }
      } else {
        const target = e.target;
        const isFocusedInTrap = target && trapContainer.contains(target);
        if (!isFocusedInTrap)
          emit("focusout", e);
      }
    };
    async function startTrap() {
      await nextTick();
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        focusableStack.push(focusLayer);
        const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;
        lastFocusBeforeTrapped = prevFocusedElement;
        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
        if (!isPrevFocusContained) {
          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
          trapContainer.dispatchEvent(focusEvent);
          if (!focusEvent.defaultPrevented) {
            nextTick(() => {
              let focusStartEl = props.focusStartEl;
              if (!isString$1(focusStartEl)) {
                tryFocus(focusStartEl);
                if (document.activeElement !== focusStartEl) {
                  focusStartEl = "first";
                }
              }
              if (focusStartEl === "first") {
                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
              }
              if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                tryFocus(trapContainer);
              }
            });
          }
        }
      }
    }
    function stopTrap() {
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {
          ...FOCUS_AFTER_TRAPPED_OPTS,
          detail: {
            focusReason: focusReason2.value
          }
        });
        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        trapContainer.dispatchEvent(releasedEvent);
        if (!releasedEvent.defaultPrevented && (focusReason2.value == "keyboard" || !isFocusCausedByUserEvent() || trapContainer.contains(document.activeElement))) {
          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body);
        }
        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        focusableStack.remove(focusLayer);
      }
    }
    onMounted(() => {
      if (props.trapped) {
        startTrap();
      }
      watch(() => props.trapped, (trapped) => {
        if (trapped) {
          startTrap();
        } else {
          stopTrap();
        }
      });
    });
    onBeforeUnmount(() => {
      if (props.trapped) {
        stopTrap();
      }
    });
    return {
      onKeydown
    };
  }
});
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
}
var ElFocusTrap = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$6], ["__file", "focus-trap.vue"]]);
const POSITIONING_STRATEGIES = ["fixed", "absolute"];
const popperCoreConfigProps = buildProps({
  boundariesPadding: {
    type: Number,
    default: 0
  },
  fallbackPlacements: {
    type: definePropType(Array),
    default: void 0
  },
  gpuAcceleration: {
    type: Boolean,
    default: true
  },
  offset: {
    type: Number,
    default: 12
  },
  placement: {
    type: String,
    values: Ee,
    default: "bottom"
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  strategy: {
    type: String,
    values: POSITIONING_STRATEGIES,
    default: "absolute"
  }
});
const popperContentProps = buildProps({
  ...popperCoreConfigProps,
  id: String,
  style: {
    type: definePropType([String, Array, Object])
  },
  className: {
    type: definePropType([String, Array, Object])
  },
  effect: {
    type: String,
    default: "dark"
  },
  visible: Boolean,
  enterable: {
    type: Boolean,
    default: true
  },
  pure: Boolean,
  focusOnShow: {
    type: Boolean,
    default: false
  },
  trapping: {
    type: Boolean,
    default: false
  },
  popperClass: {
    type: definePropType([String, Array, Object])
  },
  popperStyle: {
    type: definePropType([String, Array, Object])
  },
  referenceEl: {
    type: definePropType(Object)
  },
  triggerTargetEl: {
    type: definePropType(Object)
  },
  stopPopperMouseEvent: {
    type: Boolean,
    default: true
  },
  ariaLabel: {
    type: String,
    default: void 0
  },
  virtualTriggering: Boolean,
  zIndex: Number
});
const popperContentEmits = {
  mouseenter: (evt) => evt instanceof MouseEvent,
  mouseleave: (evt) => evt instanceof MouseEvent,
  focus: () => true,
  blur: () => true,
  close: () => true
};
const buildPopperOptions = (props, modifiers = []) => {
  const { placement, strategy, popperOptions } = props;
  const options = {
    placement,
    strategy,
    ...popperOptions,
    modifiers: [...genModifiers(props), ...modifiers]
  };
  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);
  return options;
};
const unwrapMeasurableEl = ($el) => {
  if (!isClient)
    return;
  return unrefElement($el);
};
function genModifiers(options) {
  const { offset, gpuAcceleration, fallbackPlacements } = options;
  return [
    {
      name: "offset",
      options: {
        offset: [0, offset != null ? offset : 12]
      }
    },
    {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    },
    {
      name: "flip",
      options: {
        padding: 5,
        fallbackPlacements
      }
    },
    {
      name: "computeStyles",
      options: {
        gpuAcceleration
      }
    }
  ];
}
function deriveExtraModifiers(options, modifiers) {
  if (modifiers) {
    options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
  }
}
const DEFAULT_ARROW_OFFSET = 0;
const usePopperContent = (props) => {
  const { popperInstanceRef, contentRef, triggerRef, role } = inject(POPPER_INJECTION_KEY, void 0);
  const arrowRef = ref();
  const arrowOffset = ref();
  const eventListenerModifier = computed(() => {
    return {
      name: "eventListeners",
      enabled: !!props.visible
    };
  });
  const arrowModifier = computed(() => {
    var _a2;
    const arrowEl = unref(arrowRef);
    const offset = (_a2 = unref(arrowOffset)) != null ? _a2 : DEFAULT_ARROW_OFFSET;
    return {
      name: "arrow",
      enabled: !isUndefined$1(arrowEl),
      options: {
        element: arrowEl,
        padding: offset
      }
    };
  });
  const options = computed(() => {
    return {
      onFirstUpdate: () => {
        update();
      },
      ...buildPopperOptions(props, [
        unref(arrowModifier),
        unref(eventListenerModifier)
      ])
    };
  });
  const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));
  const { attributes, state, styles, update, forceUpdate, instanceRef } = usePopper(computedReference, contentRef, options);
  watch(instanceRef, (instance) => popperInstanceRef.value = instance);
  onMounted(() => {
    watch(() => {
      var _a2;
      return (_a2 = unref(computedReference)) == null ? void 0 : _a2.getBoundingClientRect();
    }, () => {
      update();
    });
  });
  return {
    attributes,
    arrowRef,
    contentRef,
    instanceRef,
    state,
    styles,
    role,
    forceUpdate,
    update
  };
};
const usePopperContentDOM = (props, {
  attributes,
  styles,
  role
}) => {
  const { nextZIndex } = useZIndex();
  const ns = useNamespace("popper");
  const contentAttrs = computed(() => unref(attributes).popper);
  const contentZIndex = ref(isNumber(props.zIndex) ? props.zIndex : nextZIndex());
  const contentClass = computed(() => [
    ns.b(),
    ns.is("pure", props.pure),
    ns.is(props.effect),
    props.popperClass
  ]);
  const contentStyle = computed(() => {
    return [
      { zIndex: unref(contentZIndex) },
      unref(styles).popper,
      props.popperStyle || {}
    ];
  });
  const ariaModal = computed(() => role.value === "dialog" ? "false" : void 0);
  const arrowStyle = computed(() => unref(styles).arrow || {});
  const updateZIndex = () => {
    contentZIndex.value = isNumber(props.zIndex) ? props.zIndex : nextZIndex();
  };
  return {
    ariaModal,
    arrowStyle,
    contentAttrs,
    contentClass,
    contentStyle,
    contentZIndex,
    updateZIndex
  };
};
const usePopperContentFocusTrap = (props, emit) => {
  const trapped = ref(false);
  const focusStartRef = ref();
  const onFocusAfterTrapped = () => {
    emit("focus");
  };
  const onFocusAfterReleased = (event) => {
    var _a2;
    if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) !== "pointer") {
      focusStartRef.value = "first";
      emit("blur");
    }
  };
  const onFocusInTrap = (event) => {
    if (props.visible && !trapped.value) {
      if (event.target) {
        focusStartRef.value = event.target;
      }
      trapped.value = true;
    }
  };
  const onFocusoutPrevented = (event) => {
    if (!props.trapping) {
      if (event.detail.focusReason === "pointer") {
        event.preventDefault();
      }
      trapped.value = false;
    }
  };
  const onReleaseRequested = () => {
    trapped.value = false;
    emit("close");
  };
  return {
    focusStartRef,
    trapped,
    onFocusAfterReleased,
    onFocusAfterTrapped,
    onFocusInTrap,
    onFocusoutPrevented,
    onReleaseRequested
  };
};
const __default__$9 = defineComponent({
  name: "ElPopperContent"
});
const _sfc_main$o = /* @__PURE__ */ defineComponent({
  ...__default__$9,
  props: popperContentProps,
  emits: popperContentEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const {
      focusStartRef,
      trapped,
      onFocusAfterReleased,
      onFocusAfterTrapped,
      onFocusInTrap,
      onFocusoutPrevented,
      onReleaseRequested
    } = usePopperContentFocusTrap(props, emit);
    const { attributes, arrowRef, contentRef, styles, instanceRef, role, update } = usePopperContent(props);
    const {
      ariaModal,
      arrowStyle,
      contentAttrs,
      contentClass,
      contentStyle,
      updateZIndex
    } = usePopperContentDOM(props, {
      styles,
      attributes,
      role
    });
    const formItemContext = inject(formItemContextKey, void 0);
    const arrowOffset = ref();
    provide(POPPER_CONTENT_INJECTION_KEY, {
      arrowStyle,
      arrowRef,
      arrowOffset
    });
    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {
      provide(formItemContextKey, {
        ...formItemContext,
        addInputId: NOOP,
        removeInputId: NOOP
      });
    }
    let triggerTargetAriaStopWatch = void 0;
    const updatePopper = (shouldUpdateZIndex = true) => {
      update();
      shouldUpdateZIndex && updateZIndex();
    };
    const togglePopperAlive = () => {
      updatePopper(false);
      if (props.visible && props.focusOnShow) {
        trapped.value = true;
      } else if (props.visible === false) {
        trapped.value = false;
      }
    };
    onMounted(() => {
      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
        triggerTargetAriaStopWatch = void 0;
        const el = unref(triggerTargetEl || contentRef.value);
        const prevEl = unref(prevTriggerTargetEl || contentRef.value);
        if (isElement(el)) {
          triggerTargetAriaStopWatch = watch([role, () => props.ariaLabel, ariaModal, () => props.id], (watches) => {
            ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if (prevEl !== el && isElement(prevEl)) {
          ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
            prevEl.removeAttribute(key);
          });
        }
      }, { immediate: true });
      watch(() => props.visible, togglePopperAlive, { immediate: true });
    });
    onBeforeUnmount(() => {
      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
      triggerTargetAriaStopWatch = void 0;
    });
    expose({
      popperContentRef: contentRef,
      popperInstanceRef: instanceRef,
      updatePopper,
      contentStyle
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "contentRef",
        ref: contentRef
      }, unref(contentAttrs), {
        style: unref(contentStyle),
        class: unref(contentClass),
        tabindex: "-1",
        onMouseenter: _cache[0] || (_cache[0] = (e) => _ctx.$emit("mouseenter", e)),
        onMouseleave: _cache[1] || (_cache[1] = (e) => _ctx.$emit("mouseleave", e))
      }), [
        createVNode(unref(ElFocusTrap), {
          trapped: unref(trapped),
          "trap-on-focus-in": true,
          "focus-trap-el": unref(contentRef),
          "focus-start-el": unref(focusStartRef),
          onFocusAfterTrapped: unref(onFocusAfterTrapped),
          onFocusAfterReleased: unref(onFocusAfterReleased),
          onFocusin: unref(onFocusInTrap),
          onFocusoutPrevented: unref(onFocusoutPrevented),
          onReleaseRequested: unref(onReleaseRequested)
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusin", "onFocusoutPrevented", "onReleaseRequested"])
      ], 16);
    };
  }
});
var ElPopperContent = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["__file", "content.vue"]]);
const ElPopper = withInstall(Popper);
const TOOLTIP_INJECTION_KEY = Symbol("elTooltip");
const useTooltipContentProps = buildProps({
  ...useDelayedToggleProps,
  ...popperContentProps,
  appendTo: {
    type: definePropType([String, Object])
  },
  content: {
    type: String,
    default: ""
  },
  rawContent: {
    type: Boolean,
    default: false
  },
  persistent: Boolean,
  ariaLabel: String,
  visible: {
    type: definePropType(Boolean),
    default: null
  },
  transition: String,
  teleported: {
    type: Boolean,
    default: true
  },
  disabled: Boolean
});
const useTooltipTriggerProps = buildProps({
  ...popperTriggerProps,
  disabled: Boolean,
  trigger: {
    type: definePropType([String, Array]),
    default: "hover"
  },
  triggerKeys: {
    type: definePropType(Array),
    default: () => [EVENT_CODE.enter, EVENT_CODE.space]
  }
});
const {
  useModelToggleProps: useTooltipModelToggleProps,
  useModelToggleEmits: useTooltipModelToggleEmits,
  useModelToggle: useTooltipModelToggle
} = createModelToggleComposable("visible");
const useTooltipProps = buildProps({
  ...popperProps,
  ...useTooltipModelToggleProps,
  ...useTooltipContentProps,
  ...useTooltipTriggerProps,
  ...popperArrowProps,
  showArrow: {
    type: Boolean,
    default: true
  }
});
const tooltipEmits = [
  ...useTooltipModelToggleEmits,
  "before-show",
  "before-hide",
  "show",
  "hide",
  "open",
  "close"
];
const isTriggerType = (trigger, type4) => {
  if (isArray$1(trigger)) {
    return trigger.includes(type4);
  }
  return trigger === type4;
};
const whenTrigger = (trigger, type4, handler) => {
  return (e) => {
    isTriggerType(unref(trigger), type4) && handler(e);
  };
};
const __default__$8 = defineComponent({
  name: "ElTooltipTrigger"
});
const _sfc_main$n = /* @__PURE__ */ defineComponent({
  ...__default__$8,
  props: useTooltipTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("tooltip");
    const { controlled, id, open, onOpen, onClose, onToggle } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const triggerRef = ref(null);
    const stopWhenControlledOrDisabled = () => {
      if (unref(controlled) || props.disabled) {
        return true;
      }
    };
    const trigger = toRef(props, "trigger");
    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {
      if (e.button === 0) {
        onToggle(e);
      }
    }));
    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
      e.preventDefault();
      onToggle(e);
    }));
    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
      const { code } = e;
      if (props.triggerKeys.includes(code)) {
        e.preventDefault();
        onToggle(e);
      }
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopperTrigger), {
        id: unref(id),
        "virtual-ref": _ctx.virtualRef,
        open: unref(open),
        "virtual-triggering": _ctx.virtualTriggering,
        class: normalizeClass(unref(ns).e("trigger")),
        onBlur: unref(onBlur),
        onClick: unref(onClick),
        onContextmenu: unref(onContextMenu),
        onFocus: unref(onFocus),
        onMouseenter: unref(onMouseenter),
        onMouseleave: unref(onMouseleave),
        onKeydown: unref(onKeydown)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
    };
  }
});
var ElTooltipTrigger = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["__file", "trigger.vue"]]);
const __default__$7 = defineComponent({
  name: "ElTooltipContent",
  inheritAttrs: false
});
const _sfc_main$m = /* @__PURE__ */ defineComponent({
  ...__default__$7,
  props: useTooltipContentProps,
  setup(__props, { expose }) {
    const props = __props;
    const { selector } = usePopperContainerId();
    const ns = useNamespace("tooltip");
    const contentRef = ref(null);
    const destroyed = ref(false);
    const {
      controlled,
      id,
      open,
      trigger,
      onClose,
      onOpen,
      onShow,
      onHide,
      onBeforeShow,
      onBeforeHide
    } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const transitionClass = computed(() => {
      return props.transition || `${ns.namespace.value}-fade-in-linear`;
    });
    const persistentRef = computed(() => {
      return props.persistent;
    });
    onBeforeUnmount(() => {
      destroyed.value = true;
    });
    const shouldRender = computed(() => {
      return unref(persistentRef) ? true : unref(open);
    });
    const shouldShow = computed(() => {
      return props.disabled ? false : unref(open);
    });
    const appendTo = computed(() => {
      return props.appendTo || selector.value;
    });
    const contentStyle = computed(() => {
      var _a2;
      return (_a2 = props.style) != null ? _a2 : {};
    });
    const ariaHidden = computed(() => !unref(open));
    const onTransitionLeave = () => {
      onHide();
    };
    const stopWhenControlled = () => {
      if (unref(controlled))
        return true;
    };
    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
      if (props.enterable && unref(trigger) === "hover") {
        onOpen();
      }
    });
    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
      if (unref(trigger) === "hover") {
        onClose();
      }
    });
    const onBeforeEnter = () => {
      var _a2, _b;
      (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
      onBeforeShow == null ? void 0 : onBeforeShow();
    };
    const onBeforeLeave = () => {
      onBeforeHide == null ? void 0 : onBeforeHide();
    };
    const onAfterShow = () => {
      onShow();
      stopHandle = onClickOutside(computed(() => {
        var _a2;
        return (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
      }), () => {
        if (unref(controlled))
          return;
        const $trigger = unref(trigger);
        if ($trigger !== "hover") {
          onClose();
        }
      });
    };
    const onBlur = () => {
      if (!props.virtualTriggering) {
        onClose();
      }
    };
    let stopHandle;
    watch(() => unref(open), (val) => {
      if (!val) {
        stopHandle == null ? void 0 : stopHandle();
      }
    }, {
      flush: "post"
    });
    watch(() => props.content, () => {
      var _a2, _b;
      (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    });
    expose({
      contentRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Teleport, {
        disabled: !_ctx.teleported,
        to: unref(appendTo)
      }, [
        createVNode(Transition, {
          name: unref(transitionClass),
          onAfterLeave: onTransitionLeave,
          onBeforeEnter,
          onAfterEnter: onAfterShow,
          onBeforeLeave
        }, {
          default: withCtx(() => [
            unref(shouldRender) ? withDirectives((openBlock(), createBlock(unref(ElPopperContent), mergeProps({
              key: 0,
              id: unref(id),
              ref_key: "contentRef",
              ref: contentRef
            }, _ctx.$attrs, {
              "aria-label": _ctx.ariaLabel,
              "aria-hidden": unref(ariaHidden),
              "boundaries-padding": _ctx.boundariesPadding,
              "fallback-placements": _ctx.fallbackPlacements,
              "gpu-acceleration": _ctx.gpuAcceleration,
              offset: _ctx.offset,
              placement: _ctx.placement,
              "popper-options": _ctx.popperOptions,
              strategy: _ctx.strategy,
              effect: _ctx.effect,
              enterable: _ctx.enterable,
              pure: _ctx.pure,
              "popper-class": _ctx.popperClass,
              "popper-style": [_ctx.popperStyle, unref(contentStyle)],
              "reference-el": _ctx.referenceEl,
              "trigger-target-el": _ctx.triggerTargetEl,
              visible: unref(shouldShow),
              "z-index": _ctx.zIndex,
              onMouseenter: unref(onContentEnter),
              onMouseleave: unref(onContentLeave),
              onBlur,
              onClose: unref(onClose)
            }), {
              default: withCtx(() => [
                !destroyed.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onClose"])), [
              [vShow, unref(shouldShow)]
            ]) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["name"])
      ], 8, ["disabled", "to"]);
    };
  }
});
var ElTooltipContent = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["__file", "content.vue"]]);
const _hoisted_1$d = ["innerHTML"];
const _hoisted_2$a = { key: 1 };
const __default__$6 = defineComponent({
  name: "ElTooltip"
});
const _sfc_main$l = /* @__PURE__ */ defineComponent({
  ...__default__$6,
  props: useTooltipProps,
  emits: tooltipEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    usePopperContainer();
    const id = useId();
    const popperRef = ref();
    const contentRef = ref();
    const updatePopper = () => {
      var _a2;
      const popperComponent = unref(popperRef);
      if (popperComponent) {
        (_a2 = popperComponent.popperInstanceRef) == null ? void 0 : _a2.update();
      }
    };
    const open = ref(false);
    const toggleReason = ref();
    const { show, hide, hasUpdateHandler } = useTooltipModelToggle({
      indicator: open,
      toggleReason
    });
    const { onOpen, onClose } = useDelayedToggle({
      showAfter: toRef(props, "showAfter"),
      hideAfter: toRef(props, "hideAfter"),
      autoClose: toRef(props, "autoClose"),
      open: show,
      close: hide
    });
    const controlled = computed(() => isBoolean(props.visible) && !hasUpdateHandler.value);
    provide(TOOLTIP_INJECTION_KEY, {
      controlled,
      id,
      open: readonly(open),
      trigger: toRef(props, "trigger"),
      onOpen: (event) => {
        onOpen(event);
      },
      onClose: (event) => {
        onClose(event);
      },
      onToggle: (event) => {
        if (unref(open)) {
          onClose(event);
        } else {
          onOpen(event);
        }
      },
      onShow: () => {
        emit("show", toggleReason.value);
      },
      onHide: () => {
        emit("hide", toggleReason.value);
      },
      onBeforeShow: () => {
        emit("before-show", toggleReason.value);
      },
      onBeforeHide: () => {
        emit("before-hide", toggleReason.value);
      },
      updatePopper
    });
    watch(() => props.disabled, (disabled) => {
      if (disabled && open.value) {
        open.value = false;
      }
    });
    const isFocusInsideContent = (event) => {
      var _a2, _b;
      const popperContent = (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.contentRef) == null ? void 0 : _b.popperContentRef;
      const activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;
      return popperContent && popperContent.contains(activeElement);
    };
    onDeactivated(() => open.value && hide());
    expose({
      popperRef,
      contentRef,
      isFocusInsideContent,
      updatePopper,
      onOpen,
      onClose,
      hide
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopper), {
        ref_key: "popperRef",
        ref: popperRef,
        role: _ctx.role
      }, {
        default: withCtx(() => [
          createVNode(ElTooltipTrigger, {
            disabled: _ctx.disabled,
            trigger: _ctx.trigger,
            "trigger-keys": _ctx.triggerKeys,
            "virtual-ref": _ctx.virtualRef,
            "virtual-triggering": _ctx.virtualTriggering
          }, {
            default: withCtx(() => [
              _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
          createVNode(ElTooltipContent, {
            ref_key: "contentRef",
            ref: contentRef,
            "aria-label": _ctx.ariaLabel,
            "boundaries-padding": _ctx.boundariesPadding,
            content: _ctx.content,
            disabled: _ctx.disabled,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            "fallback-placements": _ctx.fallbackPlacements,
            "hide-after": _ctx.hideAfter,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            persistent: _ctx.persistent,
            "popper-class": _ctx.popperClass,
            "popper-style": _ctx.popperStyle,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            pure: _ctx.pure,
            "raw-content": _ctx.rawContent,
            "reference-el": _ctx.referenceEl,
            "trigger-target-el": _ctx.triggerTargetEl,
            "show-after": _ctx.showAfter,
            strategy: _ctx.strategy,
            teleported: _ctx.teleported,
            transition: _ctx.transition,
            "virtual-triggering": _ctx.virtualTriggering,
            "z-index": _ctx.zIndex,
            "append-to": _ctx.appendTo
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "content", {}, () => [
                _ctx.rawContent ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: _ctx.content
                }, null, 8, _hoisted_1$d)) : (openBlock(), createElementBlock("span", _hoisted_2$a, toDisplayString(_ctx.content), 1))
              ]),
              _ctx.showArrow ? (openBlock(), createBlock(unref(ElPopperArrow), {
                key: 0,
                "arrow-offset": _ctx.arrowOffset
              }, null, 8, ["arrow-offset"])) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
        ]),
        _: 3
      }, 8, ["role"]);
    };
  }
});
var Tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["__file", "tooltip.vue"]]);
const ElTooltip = withInstall(Tooltip);
const buttonGroupContextKey = Symbol("buttonGroupContextKey");
const useButton = (props, emit) => {
  useDeprecated({
    from: "type.text",
    replacement: "link",
    version: "3.0.0",
    scope: "props",
    ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
  }, computed(() => props.type === "text"));
  const buttonGroupContext = inject(buttonGroupContextKey, void 0);
  const globalConfig2 = useGlobalConfig("button");
  const { form } = useFormItem();
  const _size = useFormSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
  const _disabled = useFormDisabled();
  const _ref = ref();
  const slots = useSlots();
  const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
  const autoInsertSpace = computed(() => {
    var _a2, _b, _c;
    return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a2 = globalConfig2.value) == null ? void 0 : _a2.autoInsertSpace) != null ? _c : false;
  });
  const _props = computed(() => {
    if (props.tag === "button") {
      return {
        ariaDisabled: _disabled.value || props.loading,
        disabled: _disabled.value || props.loading,
        autofocus: props.autofocus,
        type: props.nativeType
      };
    }
    return {};
  });
  const shouldAddSpace = computed(() => {
    var _a2;
    const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
    if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
      const slot = defaultSlot[0];
      if ((slot == null ? void 0 : slot.type) === Text) {
        const text = slot.children;
        return new RegExp("^\\p{Unified_Ideograph}{2}$", "u").test(text.trim());
      }
    }
    return false;
  });
  const handleClick = (evt) => {
    if (props.nativeType === "reset") {
      form == null ? void 0 : form.resetFields();
    }
    emit("click", evt);
  };
  return {
    _disabled,
    _size,
    _type,
    _ref,
    _props,
    shouldAddSpace,
    handleClick
  };
};
const buttonTypes = [
  "default",
  "primary",
  "success",
  "warning",
  "info",
  "danger",
  "text",
  ""
];
const buttonNativeTypes = ["button", "submit", "reset"];
const buttonProps = buildProps({
  size: useSizeProp,
  disabled: Boolean,
  type: {
    type: String,
    values: buttonTypes,
    default: ""
  },
  icon: {
    type: iconPropType
  },
  nativeType: {
    type: String,
    values: buttonNativeTypes,
    default: "button"
  },
  loading: Boolean,
  loadingIcon: {
    type: iconPropType,
    default: () => loading_default
  },
  plain: Boolean,
  text: Boolean,
  link: Boolean,
  bg: Boolean,
  autofocus: Boolean,
  round: Boolean,
  circle: Boolean,
  color: String,
  dark: Boolean,
  autoInsertSpace: {
    type: Boolean,
    default: void 0
  },
  tag: {
    type: definePropType([String, Object]),
    default: "button"
  }
});
const buttonEmits = {
  click: (evt) => evt instanceof MouseEvent
};
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c2) {
  return c2.length === 1 ? "0" + c2 : String(c2);
}
function rgbToRgb(r2, g2, b) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g2, b);
  var min = Math.min(r2, g2, b);
  var h2 = 0;
  var s = 0;
  var l2 = (max + min) / 2;
  if (max === min) {
    s = 0;
    h2 = 0;
  } else {
    var d2 = max - min;
    s = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
    switch (max) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s, l: l2 };
}
function hue2rgb(p2, q2, t2) {
  if (t2 < 0) {
    t2 += 1;
  }
  if (t2 > 1) {
    t2 -= 1;
  }
  if (t2 < 1 / 6) {
    return p2 + (q2 - p2) * (6 * t2);
  }
  if (t2 < 1 / 2) {
    return q2;
  }
  if (t2 < 2 / 3) {
    return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
  }
  return p2;
}
function hslToRgb(h2, s, l2) {
  var r2;
  var g2;
  var b;
  h2 = bound01(h2, 360);
  s = bound01(s, 100);
  l2 = bound01(l2, 100);
  if (s === 0) {
    g2 = l2;
    b = l2;
    r2 = l2;
  } else {
    var q2 = l2 < 0.5 ? l2 * (1 + s) : l2 + s - l2 * s;
    var p2 = 2 * l2 - q2;
    r2 = hue2rgb(p2, q2, h2 + 1 / 3);
    g2 = hue2rgb(p2, q2, h2);
    b = hue2rgb(p2, q2, h2 - 1 / 3);
  }
  return { r: r2 * 255, g: g2 * 255, b: b * 255 };
}
function rgbToHsv(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g2, b);
  var min = Math.min(r2, g2, b);
  var h2 = 0;
  var v2 = max;
  var d2 = max - min;
  var s = max === 0 ? 0 : d2 / max;
  if (max === min) {
    h2 = 0;
  } else {
    switch (max) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s, v: v2 };
}
function hsvToRgb(h2, s, v2) {
  h2 = bound01(h2, 360) * 6;
  s = bound01(s, 100);
  v2 = bound01(v2, 100);
  var i = Math.floor(h2);
  var f2 = h2 - i;
  var p2 = v2 * (1 - s);
  var q2 = v2 * (1 - f2 * s);
  var t2 = v2 * (1 - (1 - f2) * s);
  var mod = i % 6;
  var r2 = [v2, q2, p2, p2, t2, v2][mod];
  var g2 = [t2, v2, v2, q2, p2, p2][mod];
  var b = [p2, p2, t2, v2, v2, q2][mod];
  return { r: r2 * 255, g: g2 * 255, b: b * 255 };
}
function rgbToHex(r2, g2, b, allow3Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r2, g2, b, a, allow4Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b).toString(16)),
    pad2(convertDecimalToHex(a))
  ];
  if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function convertDecimalToHex(d2) {
  return Math.round(parseFloat(d2) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a = 1;
  var s = null;
  var v2 = null;
  var l2 = null;
  var ok = false;
  var format2 = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v2 = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v2);
      ok = true;
      format2 = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l2 = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l2);
      ok = true;
      format2 = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format2,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match = matchers.rgb.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
var TinyColor = (
  /** @class */
  function() {
    function TinyColor2(color, opts) {
      if (color === void 0) {
        color = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a2;
      if (color instanceof TinyColor2) {
        return color;
      }
      if (typeof color === "number") {
        color = numberInputToObject(color);
      }
      this.originalInput = color;
      var rgb = inputToRGB(color);
      this.originalInput = color;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a2 = opts.format) !== null && _a2 !== void 0 ? _a2 : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R2;
      var G2;
      var B2;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R2 = RsRGB / 12.92;
      } else {
        R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G2 = GsRGB / 12.92;
      } else {
        G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B2 = BsRGB / 12.92;
      } else {
        B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha) {
      this.a = boundAlpha(alpha);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.isMonochrome = function() {
      var s = this.toHsl().s;
      return s === 0;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h2 = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v2 = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h2 = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l2 = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toHexShortString = function(allowShortChar) {
      if (allowShortChar === void 0) {
        allowShortChar = false;
      }
      return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r2 = Math.round(this.r);
      var g2 = Math.round(this.g);
      var b = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r2, ", ").concat(g2, ", ").concat(b, ")") : "rgba(".concat(r2, ", ").concat(g2, ", ").concat(b, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a2 = Object.entries(names); _i < _a2.length; _i++) {
        var _b = _a2[_i], key = _b[0], value = _b[1];
        if (hex2 === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format2) {
      var formatSet = Boolean(format2);
      format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
      if (needsAlphaFormat) {
        if (format2 === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format2 === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format2 === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format2 === "hex" || format2 === "hex6") {
        formattedString = this.toHexString();
      }
      if (format2 === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format2 === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format2 === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format2 === "name") {
        formattedString = this.toName();
      }
      if (format2 === "hsl") {
        formattedString = this.toHslString();
      }
      if (format2 === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color).toRgb();
      var p2 = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
        g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
        b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
        a: (rgb2.a - rgb1.a) * p2 + rgb1.a
      };
      return new TinyColor2(rgba);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h2 = hsv.h;
      var s = hsv.s;
      var v2 = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h: h2, s, v: v2 }));
        v2 = (v2 + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background).toRgb();
      var alpha = fg.a + bg.a * (1 - fg.a);
      return new TinyColor2({
        r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
        g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
        b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
        a: alpha
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({ h: (h2 + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color) {
      return this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    return TinyColor2;
  }()
);
function darken(color, amount = 20) {
  return color.mix("#141414", amount).toString();
}
function useButtonCustomStyle(props) {
  const _disabled = useFormDisabled();
  const ns = useNamespace("button");
  return computed(() => {
    let styles = {};
    const buttonColor = props.color;
    if (buttonColor) {
      const color = new TinyColor(buttonColor);
      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);
      if (props.plain) {
        styles = ns.cssVarBlock({
          "bg-color": props.dark ? darken(color, 90) : color.tint(90).toString(),
          "text-color": buttonColor,
          "border-color": props.dark ? darken(color, 50) : color.tint(50).toString(),
          "hover-text-color": `var(${ns.cssVarName("color-white")})`,
          "hover-bg-color": buttonColor,
          "hover-border-color": buttonColor,
          "active-bg-color": activeBgColor,
          "active-text-color": `var(${ns.cssVarName("color-white")})`,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          styles[ns.cssVarBlockName("disabled-bg-color")] = props.dark ? darken(color, 90) : color.tint(90).toString();
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-border-color")] = props.dark ? darken(color, 80) : color.tint(80).toString();
        }
      } else {
        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();
        const textColor = color.isDark() ? `var(${ns.cssVarName("color-white")})` : `var(${ns.cssVarName("color-black")})`;
        styles = ns.cssVarBlock({
          "bg-color": buttonColor,
          "text-color": textColor,
          "border-color": buttonColor,
          "hover-bg-color": hoverBgColor,
          "hover-text-color": textColor,
          "hover-border-color": hoverBgColor,
          "active-bg-color": activeBgColor,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns.cssVarName("color-white")})`;
          styles[ns.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
        }
      }
    }
    return styles;
  });
}
const __default__$5 = defineComponent({
  name: "ElButton"
});
const _sfc_main$k = /* @__PURE__ */ defineComponent({
  ...__default__$5,
  props: buttonProps,
  emits: buttonEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const buttonStyle = useButtonCustomStyle(props);
    const ns = useNamespace("button");
    const { _ref, _size, _type, _disabled, _props, shouldAddSpace, handleClick } = useButton(props, emit);
    expose({
      ref: _ref,
      size: _size,
      type: _type,
      disabled: _disabled,
      shouldAddSpace
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
        ref_key: "_ref",
        ref: _ref
      }, unref(_props), {
        class: [
          unref(ns).b(),
          unref(ns).m(unref(_type)),
          unref(ns).m(unref(_size)),
          unref(ns).is("disabled", unref(_disabled)),
          unref(ns).is("loading", _ctx.loading),
          unref(ns).is("plain", _ctx.plain),
          unref(ns).is("round", _ctx.round),
          unref(ns).is("circle", _ctx.circle),
          unref(ns).is("text", _ctx.text),
          unref(ns).is("link", _ctx.link),
          unref(ns).is("has-bg", _ctx.bg)
        ],
        style: unref(buttonStyle),
        onClick: unref(handleClick)
      }), {
        default: withCtx(() => [
          _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            _ctx.$slots.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : (openBlock(), createBlock(unref(ElIcon), {
              key: 1,
              class: normalizeClass(unref(ns).is("loading"))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))
              ]),
              _: 1
            }, 8, ["class"]))
          ], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
            default: withCtx(() => [
              _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, "icon", { key: 1 })
            ]),
            _: 3
          })) : createCommentVNode("v-if", true),
          _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
            key: 2,
            class: normalizeClass({ [unref(ns).em("text", "expand")]: unref(shouldAddSpace) })
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 16, ["class", "style", "onClick"]);
    };
  }
});
var Button = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["__file", "button.vue"]]);
const buttonGroupProps = {
  size: buttonProps.size,
  type: buttonProps.type
};
const __default__$4 = defineComponent({
  name: "ElButtonGroup"
});
const _sfc_main$j = /* @__PURE__ */ defineComponent({
  ...__default__$4,
  props: buttonGroupProps,
  setup(__props) {
    const props = __props;
    provide(buttonGroupContextKey, reactive({
      size: toRef(props, "size"),
      type: toRef(props, "type")
    }));
    const ns = useNamespace("button");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(`${unref(ns).b("group")}`)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var ButtonGroup = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["__file", "button-group.vue"]]);
const ElButton = withInstall(Button, {
  ButtonGroup
});
withNoopInstall(ButtonGroup);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var dayjs_min = { exports: {} };
(function(module2, exports2) {
  !function(t2, e) {
    module2.exports = e();
  }(commonjsGlobal, function() {
    var t2 = 1e3, e = 6e4, n = 36e5, r2 = "millisecond", i = "second", s = "minute", u2 = "hour", a = "day", o = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l2 = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
      var e2 = ["th", "st", "nd", "rd"], n2 = t3 % 100;
      return "[" + t3 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
    } }, m2 = function(t3, e2, n2) {
      var r3 = String(t3);
      return !r3 || r3.length >= e2 ? t3 : "" + Array(e2 + 1 - r3.length).join(n2) + t3;
    }, v2 = { s: m2, z: function(t3) {
      var e2 = -t3.utcOffset(), n2 = Math.abs(e2), r3 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i2, 2, "0");
    }, m: function t3(e2, n2) {
      if (e2.date() < n2.date())
        return -t3(n2, e2);
      var r3 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r3, c2), s2 = n2 - i2 < 0, u3 = e2.clone().add(r3 + (s2 ? -1 : 1), c2);
      return +(-(r3 + (n2 - i2) / (s2 ? i2 - u3 : u3 - i2)) || 0);
    }, a: function(t3) {
      return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
    }, p: function(t3) {
      return { M: c2, y: h2, w: o, d: a, D: d2, h: u2, m: s, s: i, ms: r2, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t3) {
      return void 0 === t3;
    } }, g2 = "en", D = {};
    D[g2] = M;
    var p2 = "$isDayjsObject", S3 = function(t3) {
      return t3 instanceof _2 || !(!t3 || !t3[p2]);
    }, w2 = function t3(e2, n2, r3) {
      var i2;
      if (!e2)
        return g2;
      if ("string" == typeof e2) {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u3 = e2.split("-");
        if (!i2 && u3.length > 1)
          return t3(u3[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r3 && i2 && (g2 = i2), i2 || !r3 && g2;
    }, O2 = function(t3, e2) {
      if (S3(t3))
        return t3.clone();
      var n2 = "object" == typeof e2 ? e2 : {};
      return n2.date = t3, n2.args = arguments, new _2(n2);
    }, b = v2;
    b.l = w2, b.i = S3, b.w = function(t3, e2) {
      return O2(t3, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _2 = function() {
      function M2(t3) {
        this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
      }
      var m3 = M2.prototype;
      return m3.parse = function(t3) {
        this.$d = function(t4) {
          var e2 = t4.date, n2 = t4.utc;
          if (null === e2)
            return /* @__PURE__ */ new Date(NaN);
          if (b.u(e2))
            return /* @__PURE__ */ new Date();
          if (e2 instanceof Date)
            return new Date(e2);
          if ("string" == typeof e2 && !/Z$/i.test(e2)) {
            var r3 = e2.match($2);
            if (r3) {
              var i2 = r3[2] - 1 || 0, s2 = (r3[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2)) : new Date(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t3), this.init();
      }, m3.init = function() {
        var t3 = this.$d;
        this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
      }, m3.$utils = function() {
        return b;
      }, m3.isValid = function() {
        return !(this.$d.toString() === l2);
      }, m3.isSame = function(t3, e2) {
        var n2 = O2(t3);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m3.isAfter = function(t3, e2) {
        return O2(t3) < this.startOf(e2);
      }, m3.isBefore = function(t3, e2) {
        return this.endOf(e2) < O2(t3);
      }, m3.$g = function(t3, e2, n2) {
        return b.u(t3) ? this[e2] : this.set(n2, t3);
      }, m3.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m3.valueOf = function() {
        return this.$d.getTime();
      }, m3.startOf = function(t3, e2) {
        var n2 = this, r3 = !!b.u(e2) || e2, f3 = b.p(t3), l3 = function(t4, e3) {
          var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t4) : new Date(n2.$y, e3, t4), n2);
          return r3 ? i2 : i2.endOf(a);
        }, $3 = function(t4, e3) {
          return b.w(n2.toDate()[t4].apply(n2.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y3 = this.$W, M3 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
        switch (f3) {
          case h2:
            return r3 ? l3(1, 0) : l3(31, 11);
          case c2:
            return r3 ? l3(1, M3) : l3(0, M3 + 1);
          case o:
            var g3 = this.$locale().weekStart || 0, D2 = (y3 < g3 ? y3 + 7 : y3) - g3;
            return l3(r3 ? m4 - D2 : m4 + (6 - D2), M3);
          case a:
          case d2:
            return $3(v3 + "Hours", 0);
          case u2:
            return $3(v3 + "Minutes", 1);
          case s:
            return $3(v3 + "Seconds", 2);
          case i:
            return $3(v3 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m3.endOf = function(t3) {
        return this.startOf(t3, false);
      }, m3.$set = function(t3, e2) {
        var n2, o2 = b.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l3 = (n2 = {}, n2[a] = f3 + "Date", n2[d2] = f3 + "Date", n2[c2] = f3 + "Month", n2[h2] = f3 + "FullYear", n2[u2] = f3 + "Hours", n2[s] = f3 + "Minutes", n2[i] = f3 + "Seconds", n2[r2] = f3 + "Milliseconds", n2)[o2], $3 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === c2 || o2 === h2) {
          var y3 = this.clone().set(d2, 1);
          y3.$d[l3]($3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
        } else
          l3 && this.$d[l3]($3);
        return this.init(), this;
      }, m3.set = function(t3, e2) {
        return this.clone().$set(t3, e2);
      }, m3.get = function(t3) {
        return this[b.p(t3)]();
      }, m3.add = function(r3, f3) {
        var d3, l3 = this;
        r3 = Number(r3);
        var $3 = b.p(f3), y3 = function(t3) {
          var e2 = O2(l3);
          return b.w(e2.date(e2.date() + Math.round(t3 * r3)), l3);
        };
        if ($3 === c2)
          return this.set(c2, this.$M + r3);
        if ($3 === h2)
          return this.set(h2, this.$y + r3);
        if ($3 === a)
          return y3(1);
        if ($3 === o)
          return y3(7);
        var M3 = (d3 = {}, d3[s] = e, d3[u2] = n, d3[i] = t2, d3)[$3] || 1, m4 = this.$d.getTime() + r3 * M3;
        return b.w(m4, this);
      }, m3.subtract = function(t3, e2) {
        return this.add(-1 * t3, e2);
      }, m3.format = function(t3) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l2;
        var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u3 = this.$m, a2 = this.$M, o2 = n2.weekdays, c3 = n2.months, f3 = n2.meridiem, h3 = function(t4, n3, i3, s3) {
          return t4 && (t4[n3] || t4(e2, r3)) || i3[n3].slice(0, s3);
        }, d3 = function(t4) {
          return b.s(s2 % 12 || 12, t4, "0");
        }, $3 = f3 || function(t4, e3, n3) {
          var r4 = t4 < 12 ? "AM" : "PM";
          return n3 ? r4.toLowerCase() : r4;
        };
        return r3.replace(y2, function(t4, r4) {
          return r4 || function(t5) {
            switch (t5) {
              case "YY":
                return String(e2.$y).slice(-2);
              case "YYYY":
                return b.s(e2.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h3(n2.monthsShort, a2, c3, 3);
              case "MMMM":
                return h3(c3, a2);
              case "D":
                return e2.$D;
              case "DD":
                return b.s(e2.$D, 2, "0");
              case "d":
                return String(e2.$W);
              case "dd":
                return h3(n2.weekdaysMin, e2.$W, o2, 2);
              case "ddd":
                return h3(n2.weekdaysShort, e2.$W, o2, 3);
              case "dddd":
                return o2[e2.$W];
              case "H":
                return String(s2);
              case "HH":
                return b.s(s2, 2, "0");
              case "h":
                return d3(1);
              case "hh":
                return d3(2);
              case "a":
                return $3(s2, u3, true);
              case "A":
                return $3(s2, u3, false);
              case "m":
                return String(u3);
              case "mm":
                return b.s(u3, 2, "0");
              case "s":
                return String(e2.$s);
              case "ss":
                return b.s(e2.$s, 2, "0");
              case "SSS":
                return b.s(e2.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t4) || i2.replace(":", "");
        });
      }, m3.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m3.diff = function(r3, d3, l3) {
        var $3, y3 = this, M3 = b.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e, g3 = this - m4, D2 = function() {
          return b.m(y3, m4);
        };
        switch (M3) {
          case h2:
            $3 = D2() / 12;
            break;
          case c2:
            $3 = D2();
            break;
          case f2:
            $3 = D2() / 3;
            break;
          case o:
            $3 = (g3 - v3) / 6048e5;
            break;
          case a:
            $3 = (g3 - v3) / 864e5;
            break;
          case u2:
            $3 = g3 / n;
            break;
          case s:
            $3 = g3 / e;
            break;
          case i:
            $3 = g3 / t2;
            break;
          default:
            $3 = g3;
        }
        return l3 ? $3 : b.a($3);
      }, m3.daysInMonth = function() {
        return this.endOf(c2).$D;
      }, m3.$locale = function() {
        return D[this.$L];
      }, m3.locale = function(t3, e2) {
        if (!t3)
          return this.$L;
        var n2 = this.clone(), r3 = w2(t3, e2, true);
        return r3 && (n2.$L = r3), n2;
      }, m3.clone = function() {
        return b.w(this.$d, this);
      }, m3.toDate = function() {
        return new Date(this.valueOf());
      }, m3.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m3.toISOString = function() {
        return this.$d.toISOString();
      }, m3.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k2 = _2.prototype;
    return O2.prototype = k2, [["$ms", r2], ["$s", i], ["$m", s], ["$H", u2], ["$W", a], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t3) {
      k2[t3[1]] = function(e2) {
        return this.$g(e2, t3[0], t3[1]);
      };
    }), O2.extend = function(t3, e2) {
      return t3.$i || (t3(e2, _2, O2), t3.$i = true), O2;
    }, O2.locale = w2, O2.isDayjs = S3, O2.unix = function(t3) {
      return O2(1e3 * t3);
    }, O2.en = D[g2], O2.Ls = D, O2.p = {}, O2;
  });
})(dayjs_min);
var dayjs_minExports = dayjs_min.exports;
const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
var customParseFormat$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t2 = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d\d/, r2 = /\d\d?/, i = /\d*[^-_:/,()\s\d]+/, o = {}, s = function(e2) {
      return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
    };
    var a = function(e2) {
      return function(t3) {
        this[e2] = +t3;
      };
    }, f2 = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
      (this.zone || (this.zone = {})).offset = function(e3) {
        if (!e3)
          return 0;
        if ("Z" === e3)
          return 0;
        var t3 = e3.match(/([+-]|\d\d)/g), n2 = 60 * t3[1] + (+t3[2] || 0);
        return 0 === n2 ? 0 : "+" === t3[0] ? -n2 : n2;
      }(e2);
    }], h2 = function(e2) {
      var t3 = o[e2];
      return t3 && (t3.indexOf ? t3 : t3.s.concat(t3.f));
    }, u2 = function(e2, t3) {
      var n2, r3 = o.meridiem;
      if (r3) {
        for (var i2 = 1; i2 <= 24; i2 += 1)
          if (e2.indexOf(r3(i2, 0, t3)) > -1) {
            n2 = i2 > 12;
            break;
          }
      } else
        n2 = e2 === (t3 ? "pm" : "PM");
      return n2;
    }, d2 = { A: [i, function(e2) {
      this.afternoon = u2(e2, false);
    }], a: [i, function(e2) {
      this.afternoon = u2(e2, true);
    }], S: [/\d/, function(e2) {
      this.milliseconds = 100 * +e2;
    }], SS: [n, function(e2) {
      this.milliseconds = 10 * +e2;
    }], SSS: [/\d{3}/, function(e2) {
      this.milliseconds = +e2;
    }], s: [r2, a("seconds")], ss: [r2, a("seconds")], m: [r2, a("minutes")], mm: [r2, a("minutes")], H: [r2, a("hours")], h: [r2, a("hours")], HH: [r2, a("hours")], hh: [r2, a("hours")], D: [r2, a("day")], DD: [n, a("day")], Do: [i, function(e2) {
      var t3 = o.ordinal, n2 = e2.match(/\d+/);
      if (this.day = n2[0], t3)
        for (var r3 = 1; r3 <= 31; r3 += 1)
          t3(r3).replace(/\[|\]/g, "") === e2 && (this.day = r3);
    }], M: [r2, a("month")], MM: [n, a("month")], MMM: [i, function(e2) {
      var t3 = h2("months"), n2 = (h2("monthsShort") || t3.map(function(e3) {
        return e3.slice(0, 3);
      })).indexOf(e2) + 1;
      if (n2 < 1)
        throw new Error();
      this.month = n2 % 12 || n2;
    }], MMMM: [i, function(e2) {
      var t3 = h2("months").indexOf(e2) + 1;
      if (t3 < 1)
        throw new Error();
      this.month = t3 % 12 || t3;
    }], Y: [/[+-]?\d+/, a("year")], YY: [n, function(e2) {
      this.year = s(e2);
    }], YYYY: [/\d{4}/, a("year")], Z: f2, ZZ: f2 };
    function c2(n2) {
      var r3, i2;
      r3 = n2, i2 = o && o.formats;
      for (var s2 = (n2 = r3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t3, n3, r4) {
        var o2 = r4 && r4.toUpperCase();
        return n3 || i2[r4] || e[r4] || i2[o2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t4, n4) {
          return t4 || n4.slice(1);
        });
      })).match(t2), a2 = s2.length, f3 = 0; f3 < a2; f3 += 1) {
        var h3 = s2[f3], u3 = d2[h3], c3 = u3 && u3[0], l2 = u3 && u3[1];
        s2[f3] = l2 ? { regex: c3, parser: l2 } : h3.replace(/^\[|\]$/g, "");
      }
      return function(e2) {
        for (var t3 = {}, n3 = 0, r4 = 0; n3 < a2; n3 += 1) {
          var i3 = s2[n3];
          if ("string" == typeof i3)
            r4 += i3.length;
          else {
            var o2 = i3.regex, f4 = i3.parser, h4 = e2.slice(r4), u4 = o2.exec(h4)[0];
            f4.call(t3, u4), e2 = e2.replace(u4, "");
          }
        }
        return function(e3) {
          var t4 = e3.afternoon;
          if (void 0 !== t4) {
            var n4 = e3.hours;
            t4 ? n4 < 12 && (e3.hours += 12) : 12 === n4 && (e3.hours = 0), delete e3.afternoon;
          }
        }(t3), t3;
      };
    }
    return function(e2, t3, n2) {
      n2.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (s = e2.parseTwoDigitYear);
      var r3 = t3.prototype, i2 = r3.parse;
      r3.parse = function(e3) {
        var t4 = e3.date, r4 = e3.utc, s2 = e3.args;
        this.$u = r4;
        var a2 = s2[1];
        if ("string" == typeof a2) {
          var f3 = true === s2[2], h3 = true === s2[3], u3 = f3 || h3, d3 = s2[2];
          h3 && (d3 = s2[2]), o = this.$locale(), !f3 && d3 && (o = n2.Ls[d3]), this.$d = function(e4, t5, n3) {
            try {
              if (["x", "X"].indexOf(t5) > -1)
                return new Date(("X" === t5 ? 1e3 : 1) * e4);
              var r5 = c2(t5)(e4), i3 = r5.year, o2 = r5.month, s3 = r5.day, a3 = r5.hours, f4 = r5.minutes, h4 = r5.seconds, u4 = r5.milliseconds, d4 = r5.zone, l3 = /* @__PURE__ */ new Date(), m3 = s3 || (i3 || o2 ? 1 : l3.getDate()), M2 = i3 || l3.getFullYear(), Y2 = 0;
              i3 && !o2 || (Y2 = o2 > 0 ? o2 - 1 : l3.getMonth());
              var p2 = a3 || 0, v2 = f4 || 0, D = h4 || 0, g2 = u4 || 0;
              return d4 ? new Date(Date.UTC(M2, Y2, m3, p2, v2, D, g2 + 60 * d4.offset * 1e3)) : n3 ? new Date(Date.UTC(M2, Y2, m3, p2, v2, D, g2)) : new Date(M2, Y2, m3, p2, v2, D, g2);
            } catch (e5) {
              return /* @__PURE__ */ new Date("");
            }
          }(t4, a2, r4), this.init(), d3 && true !== d3 && (this.$L = this.locale(d3).$L), u3 && t4 != this.format(a2) && (this.$d = /* @__PURE__ */ new Date("")), o = {};
        } else if (a2 instanceof Array)
          for (var l2 = a2.length, m2 = 1; m2 <= l2; m2 += 1) {
            s2[1] = a2[m2 - 1];
            var M = n2.apply(this, s2);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m2 === l2 && (this.$d = /* @__PURE__ */ new Date(""));
          }
        else
          i2.call(this, e3);
      };
    };
  });
})(customParseFormat$1);
var customParseFormatExports = customParseFormat$1.exports;
const customParseFormat = /* @__PURE__ */ getDefaultExportFromCjs(customParseFormatExports);
const timeUnits = ["hours", "minutes", "seconds"];
const DEFAULT_FORMATS_TIME = "HH:mm:ss";
const DEFAULT_FORMATS_DATE = "YYYY-MM-DD";
const DEFAULT_FORMATS_DATEPICKER = {
  date: DEFAULT_FORMATS_DATE,
  dates: DEFAULT_FORMATS_DATE,
  week: "gggg[w]ww",
  year: "YYYY",
  years: "YYYY",
  month: "YYYY-MM",
  datetime: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`,
  monthrange: "YYYY-MM",
  daterange: DEFAULT_FORMATS_DATE,
  datetimerange: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`
};
const buildTimeList = (value, bound) => {
  return [
    value > 0 ? value - 1 : void 0,
    value,
    value < bound ? value + 1 : void 0
  ];
};
const rangeArr = (n) => Array.from(Array.from({ length: n }).keys());
const extractDateFormat = (format2) => {
  return format2.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
};
const extractTimeFormat = (format2) => {
  return format2.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g, "").trim();
};
const dateEquals = function(a, b) {
  const aIsDate = isDate(a);
  const bIsDate = isDate(b);
  if (aIsDate && bIsDate) {
    return a.getTime() === b.getTime();
  }
  if (!aIsDate && !bIsDate) {
    return a === b;
  }
  return false;
};
const valueEquals = function(a, b) {
  const aIsArray = isArray$1(a);
  const bIsArray = isArray$1(b);
  if (aIsArray && bIsArray) {
    if (a.length !== b.length) {
      return false;
    }
    return a.every((item, index) => dateEquals(item, b[index]));
  }
  if (!aIsArray && !bIsArray) {
    return dateEquals(a, b);
  }
  return false;
};
const parseDate = function(date5, format2, lang) {
  const day = isEmpty(format2) || format2 === "x" ? dayjs(date5).locale(lang) : dayjs(date5, format2).locale(lang);
  return day.isValid() ? day : void 0;
};
const formatter = function(date5, format2, lang) {
  if (isEmpty(format2))
    return date5;
  if (format2 === "x")
    return +date5;
  return dayjs(date5).locale(lang).format(format2);
};
const makeList = (total, method4) => {
  var _a2;
  const arr = [];
  const disabledArr = method4 == null ? void 0 : method4();
  for (let i = 0; i < total; i++) {
    arr.push((_a2 = disabledArr == null ? void 0 : disabledArr.includes(i)) != null ? _a2 : false);
  }
  return arr;
};
const disabledTimeListsProps = buildProps({
  disabledHours: {
    type: definePropType(Function)
  },
  disabledMinutes: {
    type: definePropType(Function)
  },
  disabledSeconds: {
    type: definePropType(Function)
  }
});
const timePanelSharedProps = buildProps({
  visible: Boolean,
  actualVisible: {
    type: Boolean,
    default: void 0
  },
  format: {
    type: String,
    default: ""
  }
});
const timePickerDefaultProps = buildProps({
  id: {
    type: definePropType([Array, String])
  },
  name: {
    type: definePropType([Array, String]),
    default: ""
  },
  popperClass: {
    type: String,
    default: ""
  },
  format: String,
  valueFormat: String,
  dateFormat: String,
  timeFormat: String,
  type: {
    type: String,
    default: ""
  },
  clearable: {
    type: Boolean,
    default: true
  },
  clearIcon: {
    type: definePropType([String, Object]),
    default: circle_close_default
  },
  editable: {
    type: Boolean,
    default: true
  },
  prefixIcon: {
    type: definePropType([String, Object]),
    default: ""
  },
  size: useSizeProp,
  readonly: Boolean,
  disabled: Boolean,
  placeholder: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  modelValue: {
    type: definePropType([Date, Array, String, Number]),
    default: ""
  },
  rangeSeparator: {
    type: String,
    default: "-"
  },
  startPlaceholder: String,
  endPlaceholder: String,
  defaultValue: {
    type: definePropType([Date, Array])
  },
  defaultTime: {
    type: definePropType([Date, Array])
  },
  isRange: Boolean,
  ...disabledTimeListsProps,
  disabledDate: {
    type: Function
  },
  cellClassName: {
    type: Function
  },
  shortcuts: {
    type: Array,
    default: () => []
  },
  arrowControl: Boolean,
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: definePropType([String, Number]),
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  unlinkPanels: Boolean
});
const _hoisted_1$c = ["id", "name", "placeholder", "value", "disabled", "readonly"];
const _hoisted_2$9 = ["id", "name", "placeholder", "value", "disabled", "readonly"];
const __default__$3 = defineComponent({
  name: "Picker"
});
const _sfc_main$i = /* @__PURE__ */ defineComponent({
  ...__default__$3,
  props: timePickerDefaultProps,
  emits: [
    "update:modelValue",
    "change",
    "focus",
    "blur",
    "calendar-change",
    "panel-change",
    "visible-change",
    "keydown"
  ],
  setup(__props, { expose, emit }) {
    const props = __props;
    const attrs = useAttrs$1();
    const { lang } = useLocale();
    const nsDate = useNamespace("date");
    const nsInput = useNamespace("input");
    const nsRange = useNamespace("range");
    const { form, formItem } = useFormItem();
    const elPopperOptions = inject("ElPopperOptions", {});
    const refPopper = ref();
    const inputRef = ref();
    const pickerVisible = ref(false);
    const pickerActualVisible = ref(false);
    const valueOnOpen = ref(null);
    let hasJustTabExitedInput = false;
    let ignoreFocusEvent = false;
    const rangeInputKls = computed(() => [
      nsDate.b("editor"),
      nsDate.bm("editor", props.type),
      nsInput.e("wrapper"),
      nsDate.is("disabled", pickerDisabled.value),
      nsDate.is("active", pickerVisible.value),
      nsRange.b("editor"),
      pickerSize ? nsRange.bm("editor", pickerSize.value) : "",
      attrs.class
    ]);
    const clearIconKls = computed(() => [
      nsInput.e("icon"),
      nsRange.e("close-icon"),
      !showClose.value ? nsRange.e("close-icon--hidden") : ""
    ]);
    watch(pickerVisible, (val) => {
      if (!val) {
        userInput.value = null;
        nextTick(() => {
          emitChange(props.modelValue);
        });
      } else {
        nextTick(() => {
          if (val) {
            valueOnOpen.value = props.modelValue;
          }
        });
      }
    });
    const emitChange = (val, isClear) => {
      if (isClear || !valueEquals(val, valueOnOpen.value)) {
        emit("change", val);
        props.validateEvent && (formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn()));
      }
    };
    const emitInput = (input) => {
      if (!valueEquals(props.modelValue, input)) {
        let formatted;
        if (isArray$1(input)) {
          formatted = input.map((item) => formatter(item, props.valueFormat, lang.value));
        } else if (input) {
          formatted = formatter(input, props.valueFormat, lang.value);
        }
        emit("update:modelValue", input ? formatted : input, lang.value);
      }
    };
    const emitKeydown = (e) => {
      emit("keydown", e);
    };
    const refInput = computed(() => {
      if (inputRef.value) {
        const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;
        return Array.from(_r.querySelectorAll("input"));
      }
      return [];
    });
    const setSelectionRange = (start, end, pos) => {
      const _inputs = refInput.value;
      if (!_inputs.length)
        return;
      if (!pos || pos === "min") {
        _inputs[0].setSelectionRange(start, end);
        _inputs[0].focus();
      } else if (pos === "max") {
        _inputs[1].setSelectionRange(start, end);
        _inputs[1].focus();
      }
    };
    const focusOnInputBox = () => {
      focus(true, true);
      nextTick(() => {
        ignoreFocusEvent = false;
      });
    };
    const onPick = (date5 = "", visible = false) => {
      if (!visible) {
        ignoreFocusEvent = true;
      }
      pickerVisible.value = visible;
      let result;
      if (isArray$1(date5)) {
        result = date5.map((_2) => _2.toDate());
      } else {
        result = date5 ? date5.toDate() : date5;
      }
      userInput.value = null;
      emitInput(result);
    };
    const onBeforeShow = () => {
      pickerActualVisible.value = true;
    };
    const onShow = () => {
      emit("visible-change", true);
    };
    const onKeydownPopperContent = (event) => {
      if ((event == null ? void 0 : event.key) === EVENT_CODE.esc) {
        focus(true, true);
      }
    };
    const onHide = () => {
      pickerActualVisible.value = false;
      pickerVisible.value = false;
      ignoreFocusEvent = false;
      emit("visible-change", false);
    };
    const handleOpen = () => {
      pickerVisible.value = true;
    };
    const handleClose = () => {
      pickerVisible.value = false;
    };
    const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {
      ignoreFocusEvent = isIgnoreFocusEvent;
      const [leftInput, rightInput] = unref(refInput);
      let input = leftInput;
      if (!focusStartInput && isRangeInput.value) {
        input = rightInput;
      }
      if (input) {
        input.focus();
      }
    };
    const handleFocusInput = (e) => {
      if (props.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {
        return;
      }
      pickerVisible.value = true;
      emit("focus", e);
    };
    let currentHandleBlurDeferCallback = void 0;
    const handleBlurInput = (e) => {
      const handleBlurDefer = async () => {
        setTimeout(() => {
          var _a2;
          if (currentHandleBlurDeferCallback === handleBlurDefer) {
            if (!(((_a2 = refPopper.value) == null ? void 0 : _a2.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter((input) => {
              return input.contains(document.activeElement);
            }).length === 0) {
              handleChange();
              pickerVisible.value = false;
              emit("blur", e);
              props.validateEvent && (formItem == null ? void 0 : formItem.validate("blur").catch((err) => debugWarn()));
            }
            hasJustTabExitedInput = false;
          }
        }, 0);
      };
      currentHandleBlurDeferCallback = handleBlurDefer;
      handleBlurDefer();
    };
    const pickerDisabled = computed(() => {
      return props.disabled || (form == null ? void 0 : form.disabled);
    });
    const parsedValue2 = computed(() => {
      let dayOrDays;
      if (valueIsEmpty.value) {
        if (pickerOptions.value.getDefaultValue) {
          dayOrDays = pickerOptions.value.getDefaultValue();
        }
      } else {
        if (isArray$1(props.modelValue)) {
          dayOrDays = props.modelValue.map((d2) => parseDate(d2, props.valueFormat, lang.value));
        } else {
          dayOrDays = parseDate(props.modelValue, props.valueFormat, lang.value);
        }
      }
      if (pickerOptions.value.getRangeAvailableTime) {
        const availableResult = pickerOptions.value.getRangeAvailableTime(dayOrDays);
        if (!isEqual(availableResult, dayOrDays)) {
          dayOrDays = availableResult;
          emitInput(isArray$1(dayOrDays) ? dayOrDays.map((_2) => _2.toDate()) : dayOrDays.toDate());
        }
      }
      if (isArray$1(dayOrDays) && dayOrDays.some((day) => !day)) {
        dayOrDays = [];
      }
      return dayOrDays;
    });
    const displayValue = computed(() => {
      if (!pickerOptions.value.panelReady)
        return "";
      const formattedValue = formatDayjsToString(parsedValue2.value);
      if (isArray$1(userInput.value)) {
        return [
          userInput.value[0] || formattedValue && formattedValue[0] || "",
          userInput.value[1] || formattedValue && formattedValue[1] || ""
        ];
      } else if (userInput.value !== null) {
        return userInput.value;
      }
      if (!isTimePicker.value && valueIsEmpty.value)
        return "";
      if (!pickerVisible.value && valueIsEmpty.value)
        return "";
      if (formattedValue) {
        return isDatesPicker.value || isYearsPicker.value ? formattedValue.join(", ") : formattedValue;
      }
      return "";
    });
    const isTimeLikePicker = computed(() => props.type.includes("time"));
    const isTimePicker = computed(() => props.type.startsWith("time"));
    const isDatesPicker = computed(() => props.type === "dates");
    const isYearsPicker = computed(() => props.type === "years");
    const triggerIcon = computed(() => props.prefixIcon || (isTimeLikePicker.value ? clock_default : calendar_default));
    const showClose = ref(false);
    const onClearIconClick = (event) => {
      if (props.readonly || pickerDisabled.value)
        return;
      if (showClose.value) {
        event.stopPropagation();
        focusOnInputBox();
        emitInput(null);
        emitChange(null, true);
        showClose.value = false;
        pickerVisible.value = false;
        pickerOptions.value.handleClear && pickerOptions.value.handleClear();
      }
    };
    const valueIsEmpty = computed(() => {
      const { modelValue } = props;
      return !modelValue || isArray$1(modelValue) && !modelValue.filter(Boolean).length;
    });
    const onMouseDownInput = async (event) => {
      var _a2;
      if (props.readonly || pickerDisabled.value)
        return;
      if (((_a2 = event.target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
        pickerVisible.value = true;
      }
    };
    const onMouseEnter = () => {
      if (props.readonly || pickerDisabled.value)
        return;
      if (!valueIsEmpty.value && props.clearable) {
        showClose.value = true;
      }
    };
    const onMouseLeave = () => {
      showClose.value = false;
    };
    const onTouchStartInput = (event) => {
      var _a2;
      if (props.readonly || pickerDisabled.value)
        return;
      if (((_a2 = event.touches[0].target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
        pickerVisible.value = true;
      }
    };
    const isRangeInput = computed(() => {
      return props.type.includes("range");
    });
    const pickerSize = useFormSize();
    const popperEl = computed(() => {
      var _a2, _b;
      return (_b = (_a2 = unref(refPopper)) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
    });
    const actualInputRef = computed(() => {
      var _a2;
      if (unref(isRangeInput)) {
        return unref(inputRef);
      }
      return (_a2 = unref(inputRef)) == null ? void 0 : _a2.$el;
    });
    onClickOutside(actualInputRef, (e) => {
      const unrefedPopperEl = unref(popperEl);
      const inputEl = unref(actualInputRef);
      if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl))
        return;
      pickerVisible.value = false;
    });
    const userInput = ref(null);
    const handleChange = () => {
      if (userInput.value) {
        const value = parseUserInputToDayjs(displayValue.value);
        if (value) {
          if (isValidValue(value)) {
            emitInput(isArray$1(value) ? value.map((_2) => _2.toDate()) : value.toDate());
            userInput.value = null;
          }
        }
      }
      if (userInput.value === "") {
        emitInput(null);
        emitChange(null);
        userInput.value = null;
      }
    };
    const parseUserInputToDayjs = (value) => {
      if (!value)
        return null;
      return pickerOptions.value.parseUserInput(value);
    };
    const formatDayjsToString = (value) => {
      if (!value)
        return null;
      return pickerOptions.value.formatToString(value);
    };
    const isValidValue = (value) => {
      return pickerOptions.value.isValidValue(value);
    };
    const handleKeydownInput = async (event) => {
      if (props.readonly || pickerDisabled.value)
        return;
      const { code } = event;
      emitKeydown(event);
      if (code === EVENT_CODE.esc) {
        if (pickerVisible.value === true) {
          pickerVisible.value = false;
          event.preventDefault();
          event.stopPropagation();
        }
        return;
      }
      if (code === EVENT_CODE.down) {
        if (pickerOptions.value.handleFocusPicker) {
          event.preventDefault();
          event.stopPropagation();
        }
        if (pickerVisible.value === false) {
          pickerVisible.value = true;
          await nextTick();
        }
        if (pickerOptions.value.handleFocusPicker) {
          pickerOptions.value.handleFocusPicker();
          return;
        }
      }
      if (code === EVENT_CODE.tab) {
        hasJustTabExitedInput = true;
        return;
      }
      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {
        if (userInput.value === null || userInput.value === "" || isValidValue(parseUserInputToDayjs(displayValue.value))) {
          handleChange();
          pickerVisible.value = false;
        }
        event.stopPropagation();
        return;
      }
      if (userInput.value) {
        event.stopPropagation();
        return;
      }
      if (pickerOptions.value.handleKeydownInput) {
        pickerOptions.value.handleKeydownInput(event);
      }
    };
    const onUserInput = (e) => {
      userInput.value = e;
      if (!pickerVisible.value) {
        pickerVisible.value = true;
      }
    };
    const handleStartInput = (event) => {
      const target = event.target;
      if (userInput.value) {
        userInput.value = [target.value, userInput.value[1]];
      } else {
        userInput.value = [target.value, null];
      }
    };
    const handleEndInput = (event) => {
      const target = event.target;
      if (userInput.value) {
        userInput.value = [userInput.value[0], target.value];
      } else {
        userInput.value = [null, target.value];
      }
    };
    const handleStartChange = () => {
      var _a2;
      const values = userInput.value;
      const value = parseUserInputToDayjs(values && values[0]);
      const parsedVal = unref(parsedValue2);
      if (value && value.isValid()) {
        userInput.value = [
          formatDayjsToString(value),
          ((_a2 = displayValue.value) == null ? void 0 : _a2[1]) || null
        ];
        const newValue = [value, parsedVal && (parsedVal[1] || null)];
        if (isValidValue(newValue)) {
          emitInput(newValue);
          userInput.value = null;
        }
      }
    };
    const handleEndChange = () => {
      var _a2;
      const values = unref(userInput);
      const value = parseUserInputToDayjs(values && values[1]);
      const parsedVal = unref(parsedValue2);
      if (value && value.isValid()) {
        userInput.value = [
          ((_a2 = unref(displayValue)) == null ? void 0 : _a2[0]) || null,
          formatDayjsToString(value)
        ];
        const newValue = [parsedVal && parsedVal[0], value];
        if (isValidValue(newValue)) {
          emitInput(newValue);
          userInput.value = null;
        }
      }
    };
    const pickerOptions = ref({});
    const onSetPickerOption = (e) => {
      pickerOptions.value[e[0]] = e[1];
      pickerOptions.value.panelReady = true;
    };
    const onCalendarChange = (e) => {
      emit("calendar-change", e);
    };
    const onPanelChange = (value, mode, view) => {
      emit("panel-change", value, mode, view);
    };
    provide("EP_PICKER_BASE", {
      props
    });
    expose({
      focus,
      handleFocusInput,
      handleBlurInput,
      handleOpen,
      handleClose,
      onPick
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTooltip), mergeProps({
        ref_key: "refPopper",
        ref: refPopper,
        visible: pickerVisible.value,
        effect: "light",
        pure: "",
        trigger: "click"
      }, _ctx.$attrs, {
        role: "dialog",
        teleported: "",
        transition: `${unref(nsDate).namespace.value}-zoom-in-top`,
        "popper-class": [`${unref(nsDate).namespace.value}-picker__popper`, _ctx.popperClass],
        "popper-options": unref(elPopperOptions),
        "fallback-placements": ["bottom", "top", "right", "left"],
        "gpu-acceleration": false,
        "stop-popper-mouse-event": false,
        "hide-after": 0,
        persistent: "",
        onBeforeShow,
        onShow,
        onHide
      }), {
        default: withCtx(() => [
          !unref(isRangeInput) ? (openBlock(), createBlock(unref(ElInput), {
            key: 0,
            id: _ctx.id,
            ref_key: "inputRef",
            ref: inputRef,
            "container-role": "combobox",
            "model-value": unref(displayValue),
            name: _ctx.name,
            size: unref(pickerSize),
            disabled: unref(pickerDisabled),
            placeholder: _ctx.placeholder,
            class: normalizeClass([unref(nsDate).b("editor"), unref(nsDate).bm("editor", _ctx.type), _ctx.$attrs.class]),
            style: normalizeStyle(_ctx.$attrs.style),
            readonly: !_ctx.editable || _ctx.readonly || unref(isDatesPicker) || unref(isYearsPicker) || _ctx.type === "week",
            label: _ctx.label,
            tabindex: _ctx.tabindex,
            "validate-event": false,
            onInput: onUserInput,
            onFocus: handleFocusInput,
            onBlur: handleBlurInput,
            onKeydown: handleKeydownInput,
            onChange: handleChange,
            onMousedown: onMouseDownInput,
            onMouseenter: onMouseEnter,
            onMouseleave: onMouseLeave,
            onTouchstart: onTouchStartInput,
            onClick: _cache[0] || (_cache[0] = withModifiers(() => {
            }, ["stop"]))
          }, {
            prefix: withCtx(() => [
              unref(triggerIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                key: 0,
                class: normalizeClass(unref(nsInput).e("icon")),
                onMousedown: withModifiers(onMouseDownInput, ["prevent"]),
                onTouchstart: onTouchStartInput
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(unref(triggerIcon))))
                ]),
                _: 1
              }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true)
            ]),
            suffix: withCtx(() => [
              showClose.value && _ctx.clearIcon ? (openBlock(), createBlock(unref(ElIcon), {
                key: 0,
                class: normalizeClass(`${unref(nsInput).e("icon")} clear-icon`),
                onClick: withModifiers(onClearIconClick, ["stop"])
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
            ]),
            _: 1
          }, 8, ["id", "model-value", "name", "size", "disabled", "placeholder", "class", "style", "readonly", "label", "tabindex", "onKeydown"])) : (openBlock(), createElementBlock("div", {
            key: 1,
            ref_key: "inputRef",
            ref: inputRef,
            class: normalizeClass(unref(rangeInputKls)),
            style: normalizeStyle(_ctx.$attrs.style),
            onClick: handleFocusInput,
            onMouseenter: onMouseEnter,
            onMouseleave: onMouseLeave,
            onTouchstart: onTouchStartInput,
            onKeydown: handleKeydownInput
          }, [
            unref(triggerIcon) ? (openBlock(), createBlock(unref(ElIcon), {
              key: 0,
              class: normalizeClass([unref(nsInput).e("icon"), unref(nsRange).e("icon")]),
              onMousedown: withModifiers(onMouseDownInput, ["prevent"]),
              onTouchstart: onTouchStartInput
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(triggerIcon))))
              ]),
              _: 1
            }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
            createBaseVNode("input", {
              id: _ctx.id && _ctx.id[0],
              autocomplete: "off",
              name: _ctx.name && _ctx.name[0],
              placeholder: _ctx.startPlaceholder,
              value: unref(displayValue) && unref(displayValue)[0],
              disabled: unref(pickerDisabled),
              readonly: !_ctx.editable || _ctx.readonly,
              class: normalizeClass(unref(nsRange).b("input")),
              onMousedown: onMouseDownInput,
              onInput: handleStartInput,
              onChange: handleStartChange,
              onFocus: handleFocusInput,
              onBlur: handleBlurInput
            }, null, 42, _hoisted_1$c),
            renderSlot(_ctx.$slots, "range-separator", {}, () => [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsRange).b("separator"))
              }, toDisplayString(_ctx.rangeSeparator), 3)
            ]),
            createBaseVNode("input", {
              id: _ctx.id && _ctx.id[1],
              autocomplete: "off",
              name: _ctx.name && _ctx.name[1],
              placeholder: _ctx.endPlaceholder,
              value: unref(displayValue) && unref(displayValue)[1],
              disabled: unref(pickerDisabled),
              readonly: !_ctx.editable || _ctx.readonly,
              class: normalizeClass(unref(nsRange).b("input")),
              onMousedown: onMouseDownInput,
              onFocus: handleFocusInput,
              onBlur: handleBlurInput,
              onInput: handleEndInput,
              onChange: handleEndChange
            }, null, 42, _hoisted_2$9),
            _ctx.clearIcon ? (openBlock(), createBlock(unref(ElIcon), {
              key: 1,
              class: normalizeClass(unref(clearIconKls)),
              onClick: onClearIconClick
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
              ]),
              _: 1
            }, 8, ["class"])) : createCommentVNode("v-if", true)
          ], 38))
        ]),
        content: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {
            visible: pickerVisible.value,
            actualVisible: pickerActualVisible.value,
            parsedValue: unref(parsedValue2),
            format: _ctx.format,
            dateFormat: _ctx.dateFormat,
            timeFormat: _ctx.timeFormat,
            unlinkPanels: _ctx.unlinkPanels,
            type: _ctx.type,
            defaultValue: _ctx.defaultValue,
            onPick,
            onSelectRange: setSelectionRange,
            onSetPickerOption,
            onCalendarChange,
            onPanelChange,
            onKeydown: onKeydownPopperContent,
            onMousedown: _cache[1] || (_cache[1] = withModifiers(() => {
            }, ["stop"]))
          })
        ]),
        _: 3
      }, 16, ["visible", "transition", "popper-class", "popper-options"]);
    };
  }
});
var CommonPicker = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["__file", "picker.vue"]]);
const panelTimePickerProps = buildProps({
  ...timePanelSharedProps,
  datetimeRole: String,
  parsedValue: {
    type: definePropType(Object)
  }
});
const useTimePanel = ({
  getAvailableHours,
  getAvailableMinutes,
  getAvailableSeconds
}) => {
  const getAvailableTime = (date5, role, first, compareDate) => {
    const availableTimeGetters = {
      hour: getAvailableHours,
      minute: getAvailableMinutes,
      second: getAvailableSeconds
    };
    let result = date5;
    ["hour", "minute", "second"].forEach((type4) => {
      if (availableTimeGetters[type4]) {
        let availableTimeSlots;
        const method4 = availableTimeGetters[type4];
        switch (type4) {
          case "minute": {
            availableTimeSlots = method4(result.hour(), role, compareDate);
            break;
          }
          case "second": {
            availableTimeSlots = method4(result.hour(), result.minute(), role, compareDate);
            break;
          }
          default: {
            availableTimeSlots = method4(role, compareDate);
            break;
          }
        }
        if ((availableTimeSlots == null ? void 0 : availableTimeSlots.length) && !availableTimeSlots.includes(result[type4]())) {
          const pos = first ? 0 : availableTimeSlots.length - 1;
          result = result[type4](availableTimeSlots[pos]);
        }
      }
    });
    return result;
  };
  const timePickerOptions = {};
  const onSetOption = ([key, val]) => {
    timePickerOptions[key] = val;
  };
  return {
    timePickerOptions,
    getAvailableTime,
    onSetOption
  };
};
const makeAvailableArr = (disabledList) => {
  const trueOrNumber = (isDisabled, index) => isDisabled || index;
  const getNumber = (predicate) => predicate !== true;
  return disabledList.map(trueOrNumber).filter(getNumber);
};
const getTimeLists = (disabledHours, disabledMinutes, disabledSeconds) => {
  const getHoursList = (role, compare) => {
    return makeList(24, disabledHours && (() => disabledHours == null ? void 0 : disabledHours(role, compare)));
  };
  const getMinutesList = (hour, role, compare) => {
    return makeList(60, disabledMinutes && (() => disabledMinutes == null ? void 0 : disabledMinutes(hour, role, compare)));
  };
  const getSecondsList = (hour, minute, role, compare) => {
    return makeList(60, disabledSeconds && (() => disabledSeconds == null ? void 0 : disabledSeconds(hour, minute, role, compare)));
  };
  return {
    getHoursList,
    getMinutesList,
    getSecondsList
  };
};
const buildAvailableTimeSlotGetter = (disabledHours, disabledMinutes, disabledSeconds) => {
  const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(disabledHours, disabledMinutes, disabledSeconds);
  const getAvailableHours = (role, compare) => {
    return makeAvailableArr(getHoursList(role, compare));
  };
  const getAvailableMinutes = (hour, role, compare) => {
    return makeAvailableArr(getMinutesList(hour, role, compare));
  };
  const getAvailableSeconds = (hour, minute, role, compare) => {
    return makeAvailableArr(getSecondsList(hour, minute, role, compare));
  };
  return {
    getAvailableHours,
    getAvailableMinutes,
    getAvailableSeconds
  };
};
const useOldValue = (props) => {
  const oldValue = ref(props.parsedValue);
  watch(() => props.visible, (val) => {
    if (!val) {
      oldValue.value = props.parsedValue;
    }
  });
  return oldValue;
};
const nodeList = /* @__PURE__ */ new Map();
let startClick;
if (isClient) {
  document.addEventListener("mousedown", (e) => startClick = e);
  document.addEventListener("mouseup", (e) => {
    for (const handlers of nodeList.values()) {
      for (const { documentHandler } of handlers) {
        documentHandler(e, startClick);
      }
    }
  });
}
function createDocumentHandler(el, binding) {
  let excludes = [];
  if (Array.isArray(binding.arg)) {
    excludes = binding.arg;
  } else if (isElement(binding.arg)) {
    excludes.push(binding.arg);
  }
  return function(mouseup, mousedown) {
    const popperRef = binding.instance.popperRef;
    const mouseUpTarget = mouseup.target;
    const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;
    const isBound = !binding || !binding.instance;
    const isTargetExists = !mouseUpTarget || !mouseDownTarget;
    const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
    const isSelf = el === mouseUpTarget;
    const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);
    const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));
    if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {
      return;
    }
    binding.value(mouseup, mousedown);
  };
}
const ClickOutside = {
  beforeMount(el, binding) {
    if (!nodeList.has(el)) {
      nodeList.set(el, []);
    }
    nodeList.get(el).push({
      documentHandler: createDocumentHandler(el, binding),
      bindingFn: binding.value
    });
  },
  updated(el, binding) {
    if (!nodeList.has(el)) {
      nodeList.set(el, []);
    }
    const handlers = nodeList.get(el);
    const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding.oldValue);
    const newHandler = {
      documentHandler: createDocumentHandler(el, binding),
      bindingFn: binding.value
    };
    if (oldHandlerIndex >= 0) {
      handlers.splice(oldHandlerIndex, 1, newHandler);
    } else {
      handlers.push(newHandler);
    }
  },
  unmounted(el) {
    nodeList.delete(el);
  }
};
const REPEAT_INTERVAL = 100;
const REPEAT_DELAY = 600;
const vRepeatClick = {
  beforeMount(el, binding) {
    const value = binding.value;
    const { interval = REPEAT_INTERVAL, delay = REPEAT_DELAY } = isFunction$1(value) ? {} : value;
    let intervalId;
    let delayId;
    const handler = () => isFunction$1(value) ? value() : value.handler();
    const clear = () => {
      if (delayId) {
        clearTimeout(delayId);
        delayId = void 0;
      }
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = void 0;
      }
    };
    el.addEventListener("mousedown", (evt) => {
      if (evt.button !== 0)
        return;
      clear();
      handler();
      document.addEventListener("mouseup", () => clear(), {
        once: true
      });
      delayId = setTimeout(() => {
        intervalId = setInterval(() => {
          handler();
        }, interval);
      }, delay);
    });
  }
};
const basicTimeSpinnerProps = buildProps({
  role: {
    type: String,
    required: true
  },
  spinnerDate: {
    type: definePropType(Object),
    required: true
  },
  showSeconds: {
    type: Boolean,
    default: true
  },
  arrowControl: Boolean,
  amPmMode: {
    type: definePropType(String),
    default: ""
  },
  ...disabledTimeListsProps
});
const _hoisted_1$b = ["onClick"];
const _hoisted_2$8 = ["onMouseenter"];
const _sfc_main$h = /* @__PURE__ */ defineComponent({
  __name: "basic-time-spinner",
  props: basicTimeSpinnerProps,
  emits: ["change", "select-range", "set-option"],
  setup(__props, { emit }) {
    const props = __props;
    const ns = useNamespace("time");
    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);
    let isScrolling = false;
    const currentScrollbar = ref();
    const listHoursRef = ref();
    const listMinutesRef = ref();
    const listSecondsRef = ref();
    const listRefsMap = {
      hours: listHoursRef,
      minutes: listMinutesRef,
      seconds: listSecondsRef
    };
    const spinnerItems = computed(() => {
      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);
    });
    const timePartials = computed(() => {
      const { spinnerDate } = props;
      const hours = spinnerDate.hour();
      const minutes = spinnerDate.minute();
      const seconds = spinnerDate.second();
      return { hours, minutes, seconds };
    });
    const timeList = computed(() => {
      const { hours, minutes } = unref(timePartials);
      return {
        hours: getHoursList(props.role),
        minutes: getMinutesList(hours, props.role),
        seconds: getSecondsList(hours, minutes, props.role)
      };
    });
    const arrowControlTimeList = computed(() => {
      const { hours, minutes, seconds } = unref(timePartials);
      return {
        hours: buildTimeList(hours, 23),
        minutes: buildTimeList(minutes, 59),
        seconds: buildTimeList(seconds, 59)
      };
    });
    const debouncedResetScroll = debounce((type4) => {
      isScrolling = false;
      adjustCurrentSpinner(type4);
    }, 200);
    const getAmPmFlag = (hour) => {
      const shouldShowAmPm = !!props.amPmMode;
      if (!shouldShowAmPm)
        return "";
      const isCapital = props.amPmMode === "A";
      let content = hour < 12 ? " am" : " pm";
      if (isCapital)
        content = content.toUpperCase();
      return content;
    };
    const emitSelectRange = (type4) => {
      let range3;
      switch (type4) {
        case "hours":
          range3 = [0, 2];
          break;
        case "minutes":
          range3 = [3, 5];
          break;
        case "seconds":
          range3 = [6, 8];
          break;
      }
      const [left, right] = range3;
      emit("select-range", left, right);
      currentScrollbar.value = type4;
    };
    const adjustCurrentSpinner = (type4) => {
      adjustSpinner(type4, unref(timePartials)[type4]);
    };
    const adjustSpinners = () => {
      adjustCurrentSpinner("hours");
      adjustCurrentSpinner("minutes");
      adjustCurrentSpinner("seconds");
    };
    const getScrollbarElement = (el) => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);
    const adjustSpinner = (type4, value) => {
      if (props.arrowControl)
        return;
      const scrollbar = unref(listRefsMap[type4]);
      if (scrollbar && scrollbar.$el) {
        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type4));
      }
    };
    const typeItemHeight = (type4) => {
      const scrollbar = unref(listRefsMap[type4]);
      const listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector("li");
      if (listItem) {
        return Number.parseFloat(getStyle(listItem, "height")) || 0;
      }
      return 0;
    };
    const onIncrement = () => {
      scrollDown(1);
    };
    const onDecrement = () => {
      scrollDown(-1);
    };
    const scrollDown = (step) => {
      if (!currentScrollbar.value) {
        emitSelectRange("hours");
      }
      const label = currentScrollbar.value;
      const now2 = unref(timePartials)[label];
      const total = currentScrollbar.value === "hours" ? 24 : 60;
      const next = findNextUnDisabled(label, now2, step, total);
      modifyDateField(label, next);
      adjustSpinner(label, next);
      nextTick(() => emitSelectRange(label));
    };
    const findNextUnDisabled = (type4, now2, step, total) => {
      let next = (now2 + step + total) % total;
      const list = unref(timeList)[type4];
      while (list[next] && next !== now2) {
        next = (next + step + total) % total;
      }
      return next;
    };
    const modifyDateField = (type4, value) => {
      const list = unref(timeList)[type4];
      const isDisabled = list[value];
      if (isDisabled)
        return;
      const { hours, minutes, seconds } = unref(timePartials);
      let changeTo;
      switch (type4) {
        case "hours":
          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);
          break;
        case "minutes":
          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);
          break;
        case "seconds":
          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);
          break;
      }
      emit("change", changeTo);
    };
    const handleClick = (type4, { value, disabled }) => {
      if (!disabled) {
        modifyDateField(type4, value);
        emitSelectRange(type4);
        adjustSpinner(type4, value);
      }
    };
    const handleScroll = (type4) => {
      isScrolling = true;
      debouncedResetScroll(type4);
      const value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type4]).$el).scrollTop - (scrollBarHeight(type4) * 0.5 - 10) / typeItemHeight(type4) + 3) / typeItemHeight(type4)), type4 === "hours" ? 23 : 59);
      modifyDateField(type4, value);
    };
    const scrollBarHeight = (type4) => {
      return unref(listRefsMap[type4]).$el.offsetHeight;
    };
    const bindScrollEvent = () => {
      const bindFunction = (type4) => {
        const scrollbar = unref(listRefsMap[type4]);
        if (scrollbar && scrollbar.$el) {
          getScrollbarElement(scrollbar.$el).onscroll = () => {
            handleScroll(type4);
          };
        }
      };
      bindFunction("hours");
      bindFunction("minutes");
      bindFunction("seconds");
    };
    onMounted(() => {
      nextTick(() => {
        !props.arrowControl && bindScrollEvent();
        adjustSpinners();
        if (props.role === "start")
          emitSelectRange("hours");
      });
    });
    const setRef = (scrollbar, type4) => {
      listRefsMap[type4].value = scrollbar;
    };
    emit("set-option", [`${props.role}_scrollDown`, scrollDown]);
    emit("set-option", [`${props.role}_emitSelectRange`, emitSelectRange]);
    watch(() => props.spinnerDate, () => {
      if (isScrolling)
        return;
      adjustSpinners();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([unref(ns).b("spinner"), { "has-seconds": _ctx.showSeconds }])
      }, [
        !_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(spinnerItems), (item) => {
          return openBlock(), createBlock(unref(ElScrollbar), {
            key: item,
            ref_for: true,
            ref: (scrollbar) => setRef(scrollbar, item),
            class: normalizeClass(unref(ns).be("spinner", "wrapper")),
            "wrap-style": "max-height: inherit;",
            "view-class": unref(ns).be("spinner", "list"),
            noresize: "",
            tag: "ul",
            onMouseenter: ($event) => emitSelectRange(item),
            onMousemove: ($event) => adjustCurrentSpinner(item)
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], (disabled, key) => {
                return openBlock(), createElementBlock("li", {
                  key,
                  class: normalizeClass([
                    unref(ns).be("spinner", "item"),
                    unref(ns).is("active", key === unref(timePartials)[item]),
                    unref(ns).is("disabled", disabled)
                  ]),
                  onClick: ($event) => handleClick(item, { value: key, disabled })
                }, [
                  item === "hours" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    createTextVNode(toDisplayString(("0" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)
                  ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(("0" + key).slice(-2)), 1)
                  ], 64))
                ], 10, _hoisted_1$b);
              }), 128))
            ]),
            _: 2
          }, 1032, ["class", "view-class", "onMouseenter", "onMousemove"]);
        }), 128)) : createCommentVNode("v-if", true),
        _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(spinnerItems), (item) => {
          return openBlock(), createElementBlock("div", {
            key: item,
            class: normalizeClass([unref(ns).be("spinner", "wrapper"), unref(ns).is("arrow")]),
            onMouseenter: ($event) => emitSelectRange(item)
          }, [
            withDirectives((openBlock(), createBlock(unref(ElIcon), {
              class: normalizeClass(["arrow-up", unref(ns).be("spinner", "arrow")])
            }, {
              default: withCtx(() => [
                createVNode(unref(arrow_up_default))
              ]),
              _: 1
            }, 8, ["class"])), [
              [unref(vRepeatClick), onDecrement]
            ]),
            withDirectives((openBlock(), createBlock(unref(ElIcon), {
              class: normalizeClass(["arrow-down", unref(ns).be("spinner", "arrow")])
            }, {
              default: withCtx(() => [
                createVNode(unref(arrow_down_default))
              ]),
              _: 1
            }, 8, ["class"])), [
              [unref(vRepeatClick), onIncrement]
            ]),
            createBaseVNode("ul", {
              class: normalizeClass(unref(ns).be("spinner", "list"))
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], (time, key) => {
                return openBlock(), createElementBlock("li", {
                  key,
                  class: normalizeClass([
                    unref(ns).be("spinner", "item"),
                    unref(ns).is("active", time === unref(timePartials)[item]),
                    unref(ns).is("disabled", unref(timeList)[item][time])
                  ])
                }, [
                  typeof time === "number" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    item === "hours" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      createTextVNode(toDisplayString(("0" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)
                    ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(("0" + time).slice(-2)), 1)
                    ], 64))
                  ], 64)) : createCommentVNode("v-if", true)
                ], 2);
              }), 128))
            ], 2)
          ], 42, _hoisted_2$8);
        }), 128)) : createCommentVNode("v-if", true)
      ], 2);
    };
  }
});
var TimeSpinner = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["__file", "basic-time-spinner.vue"]]);
const _sfc_main$g = /* @__PURE__ */ defineComponent({
  __name: "panel-time-pick",
  props: panelTimePickerProps,
  emits: ["pick", "select-range", "set-picker-option"],
  setup(__props, { emit }) {
    const props = __props;
    const pickerBase = inject("EP_PICKER_BASE");
    const {
      arrowControl,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      defaultValue
    } = pickerBase.props;
    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);
    const ns = useNamespace("time");
    const { t: t2, lang } = useLocale();
    const selectionRange = ref([0, 2]);
    const oldValue = useOldValue(props);
    const transitionName = computed(() => {
      return isUndefined(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : "";
    });
    const showSeconds = computed(() => {
      return props.format.includes("ss");
    });
    const amPmMode = computed(() => {
      if (props.format.includes("A"))
        return "A";
      if (props.format.includes("a"))
        return "a";
      return "";
    });
    const isValidValue = (_date) => {
      const parsedDate = dayjs(_date).locale(lang.value);
      const result = getRangeAvailableTime(parsedDate);
      return parsedDate.isSame(result);
    };
    const handleCancel = () => {
      emit("pick", oldValue.value, false);
    };
    const handleConfirm = (visible = false, first = false) => {
      if (first)
        return;
      emit("pick", props.parsedValue, visible);
    };
    const handleChange = (_date) => {
      if (!props.visible) {
        return;
      }
      const result = getRangeAvailableTime(_date).millisecond(0);
      emit("pick", result, true);
    };
    const setSelectionRange = (start, end) => {
      emit("select-range", start, end);
      selectionRange.value = [start, end];
    };
    const changeSelectionRange = (step) => {
      const list = [0, 3].concat(showSeconds.value ? [6] : []);
      const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
      const index = list.indexOf(selectionRange.value[0]);
      const next = (index + step + list.length) % list.length;
      timePickerOptions["start_emitSelectRange"](mapping[next]);
    };
    const handleKeydown = (event) => {
      const code = event.code;
      const { left, right, up, down } = EVENT_CODE;
      if ([left, right].includes(code)) {
        const step = code === left ? -1 : 1;
        changeSelectionRange(step);
        event.preventDefault();
        return;
      }
      if ([up, down].includes(code)) {
        const step = code === up ? -1 : 1;
        timePickerOptions["start_scrollDown"](step);
        event.preventDefault();
        return;
      }
    };
    const { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    });
    const getRangeAvailableTime = (date5) => {
      return getAvailableTime(date5, props.datetimeRole || "", true);
    };
    const parseUserInput = (value) => {
      if (!value)
        return null;
      return dayjs(value, props.format).locale(lang.value);
    };
    const formatToString = (value) => {
      if (!value)
        return null;
      return value.format(props.format);
    };
    const getDefaultValue2 = () => {
      return dayjs(defaultValue).locale(lang.value);
    };
    emit("set-picker-option", ["isValidValue", isValidValue]);
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
    emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
    emit("set-picker-option", ["getDefaultValue", getDefaultValue2]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, { name: unref(transitionName) }, {
        default: withCtx(() => [
          _ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ns).b("panel"))
          }, [
            createBaseVNode("div", {
              class: normalizeClass([unref(ns).be("panel", "content"), { "has-seconds": unref(showSeconds) }])
            }, [
              createVNode(TimeSpinner, {
                ref: "spinner",
                role: _ctx.datetimeRole || "start",
                "arrow-control": unref(arrowControl),
                "show-seconds": unref(showSeconds),
                "am-pm-mode": unref(amPmMode),
                "spinner-date": _ctx.parsedValue,
                "disabled-hours": unref(disabledHours),
                "disabled-minutes": unref(disabledMinutes),
                "disabled-seconds": unref(disabledSeconds),
                onChange: handleChange,
                onSetOption: unref(onSetOption),
                onSelectRange: setSelectionRange
              }, null, 8, ["role", "arrow-control", "show-seconds", "am-pm-mode", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onSetOption"])
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns).be("panel", "footer"))
            }, [
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass([unref(ns).be("panel", "btn"), "cancel"]),
                onClick: handleCancel
              }, toDisplayString(unref(t2)("el.datepicker.cancel")), 3),
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass([unref(ns).be("panel", "btn"), "confirm"]),
                onClick: _cache[0] || (_cache[0] = ($event) => handleConfirm())
              }, toDisplayString(unref(t2)("el.datepicker.confirm")), 3)
            ], 2)
          ], 2)) : createCommentVNode("v-if", true)
        ]),
        _: 1
      }, 8, ["name"]);
    };
  }
});
var TimePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["__file", "panel-time-pick.vue"]]);
const panelTimeRangeProps = buildProps({
  ...timePanelSharedProps,
  parsedValue: {
    type: definePropType(Array)
  }
});
const _hoisted_1$a = ["disabled"];
const _sfc_main$f = /* @__PURE__ */ defineComponent({
  __name: "panel-time-range",
  props: panelTimeRangeProps,
  emits: ["pick", "select-range", "set-picker-option"],
  setup(__props, { emit }) {
    const props = __props;
    const makeSelectRange = (start, end) => {
      const result = [];
      for (let i = start; i <= end; i++) {
        result.push(i);
      }
      return result;
    };
    const { t: t2, lang } = useLocale();
    const nsTime = useNamespace("time");
    const nsPicker = useNamespace("picker");
    const pickerBase = inject("EP_PICKER_BASE");
    const {
      arrowControl,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      defaultValue
    } = pickerBase.props;
    const startContainerKls = computed(() => [
      nsTime.be("range-picker", "body"),
      nsTime.be("panel", "content"),
      nsTime.is("arrow", arrowControl),
      showSeconds.value ? "has-seconds" : ""
    ]);
    const endContainerKls = computed(() => [
      nsTime.be("range-picker", "body"),
      nsTime.be("panel", "content"),
      nsTime.is("arrow", arrowControl),
      showSeconds.value ? "has-seconds" : ""
    ]);
    const startTime = computed(() => props.parsedValue[0]);
    const endTime = computed(() => props.parsedValue[1]);
    const oldValue = useOldValue(props);
    const handleCancel = () => {
      emit("pick", oldValue.value, false);
    };
    const showSeconds = computed(() => {
      return props.format.includes("ss");
    });
    const amPmMode = computed(() => {
      if (props.format.includes("A"))
        return "A";
      if (props.format.includes("a"))
        return "a";
      return "";
    });
    const handleConfirm = (visible = false) => {
      emit("pick", [startTime.value, endTime.value], visible);
    };
    const handleMinChange = (date5) => {
      handleChange(date5.millisecond(0), endTime.value);
    };
    const handleMaxChange = (date5) => {
      handleChange(startTime.value, date5.millisecond(0));
    };
    const isValidValue = (_date) => {
      const parsedDate = _date.map((_2) => dayjs(_2).locale(lang.value));
      const result = getRangeAvailableTime(parsedDate);
      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);
    };
    const handleChange = (start, end) => {
      emit("pick", [start, end], true);
    };
    const btnConfirmDisabled = computed(() => {
      return startTime.value > endTime.value;
    });
    const selectionRange = ref([0, 2]);
    const setMinSelectionRange = (start, end) => {
      emit("select-range", start, end, "min");
      selectionRange.value = [start, end];
    };
    const offset = computed(() => showSeconds.value ? 11 : 8);
    const setMaxSelectionRange = (start, end) => {
      emit("select-range", start, end, "max");
      const _offset = unref(offset);
      selectionRange.value = [start + _offset, end + _offset];
    };
    const changeSelectionRange = (step) => {
      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
      const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
      const index = list.indexOf(selectionRange.value[0]);
      const next = (index + step + list.length) % list.length;
      const half = list.length / 2;
      if (next < half) {
        timePickerOptions["start_emitSelectRange"](mapping[next]);
      } else {
        timePickerOptions["end_emitSelectRange"](mapping[next - half]);
      }
    };
    const handleKeydown = (event) => {
      const code = event.code;
      const { left, right, up, down } = EVENT_CODE;
      if ([left, right].includes(code)) {
        const step = code === left ? -1 : 1;
        changeSelectionRange(step);
        event.preventDefault();
        return;
      }
      if ([up, down].includes(code)) {
        const step = code === up ? -1 : 1;
        const role = selectionRange.value[0] < offset.value ? "start" : "end";
        timePickerOptions[`${role}_scrollDown`](step);
        event.preventDefault();
        return;
      }
    };
    const disabledHours_ = (role, compare) => {
      const defaultDisable = disabledHours ? disabledHours(role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);
      return union(defaultDisable, nextDisable);
    };
    const disabledMinutes_ = (hour, role, compare) => {
      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      if (hour !== compareHour) {
        return defaultDisable;
      }
      const compareMinute = compareDate.minute();
      const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);
      return union(defaultDisable, nextDisable);
    };
    const disabledSeconds_ = (hour, minute, role, compare) => {
      const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      const compareMinute = compareDate.minute();
      if (hour !== compareHour || minute !== compareMinute) {
        return defaultDisable;
      }
      const compareSecond = compareDate.second();
      const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);
      return union(defaultDisable, nextDisable);
    };
    const getRangeAvailableTime = ([start, end]) => {
      return [
        getAvailableTime(start, "start", true, end),
        getAvailableTime(end, "end", false, start)
      ];
    };
    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours_, disabledMinutes_, disabledSeconds_);
    const {
      timePickerOptions,
      getAvailableTime,
      onSetOption
    } = useTimePanel({
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    });
    const parseUserInput = (days) => {
      if (!days)
        return null;
      if (isArray$1(days)) {
        return days.map((d2) => dayjs(d2, props.format).locale(lang.value));
      }
      return dayjs(days, props.format).locale(lang.value);
    };
    const formatToString = (days) => {
      if (!days)
        return null;
      if (isArray$1(days)) {
        return days.map((d2) => d2.format(props.format));
      }
      return days.format(props.format);
    };
    const getDefaultValue2 = () => {
      if (isArray$1(defaultValue)) {
        return defaultValue.map((d2) => dayjs(d2).locale(lang.value));
      }
      const defaultDay = dayjs(defaultValue).locale(lang.value);
      return [defaultDay, defaultDay.add(60, "m")];
    };
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["isValidValue", isValidValue]);
    emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
    emit("set-picker-option", ["getDefaultValue", getDefaultValue2]);
    emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
    return (_ctx, _cache) => {
      return _ctx.actualVisible ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass([unref(nsTime).b("range-picker"), unref(nsPicker).b("panel")])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(nsTime).be("range-picker", "content"))
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(nsTime).be("range-picker", "cell"))
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(nsTime).be("range-picker", "header"))
            }, toDisplayString(unref(t2)("el.datepicker.startTime")), 3),
            createBaseVNode("div", {
              class: normalizeClass(unref(startContainerKls))
            }, [
              createVNode(TimeSpinner, {
                ref: "minSpinner",
                role: "start",
                "show-seconds": unref(showSeconds),
                "am-pm-mode": unref(amPmMode),
                "arrow-control": unref(arrowControl),
                "spinner-date": unref(startTime),
                "disabled-hours": disabledHours_,
                "disabled-minutes": disabledMinutes_,
                "disabled-seconds": disabledSeconds_,
                onChange: handleMinChange,
                onSetOption: unref(onSetOption),
                onSelectRange: setMinSelectionRange
              }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
            ], 2)
          ], 2),
          createBaseVNode("div", {
            class: normalizeClass(unref(nsTime).be("range-picker", "cell"))
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(nsTime).be("range-picker", "header"))
            }, toDisplayString(unref(t2)("el.datepicker.endTime")), 3),
            createBaseVNode("div", {
              class: normalizeClass(unref(endContainerKls))
            }, [
              createVNode(TimeSpinner, {
                ref: "maxSpinner",
                role: "end",
                "show-seconds": unref(showSeconds),
                "am-pm-mode": unref(amPmMode),
                "arrow-control": unref(arrowControl),
                "spinner-date": unref(endTime),
                "disabled-hours": disabledHours_,
                "disabled-minutes": disabledMinutes_,
                "disabled-seconds": disabledSeconds_,
                onChange: handleMaxChange,
                onSetOption: unref(onSetOption),
                onSelectRange: setMaxSelectionRange
              }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
            ], 2)
          ], 2)
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(unref(nsTime).be("panel", "footer"))
        }, [
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass([unref(nsTime).be("panel", "btn"), "cancel"]),
            onClick: _cache[0] || (_cache[0] = ($event) => handleCancel())
          }, toDisplayString(unref(t2)("el.datepicker.cancel")), 3),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass([unref(nsTime).be("panel", "btn"), "confirm"]),
            disabled: unref(btnConfirmDisabled),
            onClick: _cache[1] || (_cache[1] = ($event) => handleConfirm())
          }, toDisplayString(unref(t2)("el.datepicker.confirm")), 11, _hoisted_1$a)
        ], 2)
      ], 2)) : createCommentVNode("v-if", true);
    };
  }
});
var TimeRangePanel = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["__file", "panel-time-range.vue"]]);
dayjs.extend(customParseFormat);
var TimePicker = defineComponent({
  name: "ElTimePicker",
  install: null,
  props: {
    ...timePickerDefaultProps,
    isRange: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(props, ctx) {
    const commonPicker = ref();
    const [type4, Panel] = props.isRange ? ["timerange", TimeRangePanel] : ["time", TimePickPanel];
    const modelUpdater = (value) => ctx.emit("update:modelValue", value);
    provide("ElPopperOptions", props.popperOptions);
    ctx.expose({
      focus: (e) => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleFocusInput(e);
      },
      blur: (e) => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleBlurInput(e);
      },
      handleOpen: () => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleOpen();
      },
      handleClose: () => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleClose();
      }
    });
    return () => {
      var _a2;
      const format2 = (_a2 = props.format) != null ? _a2 : DEFAULT_FORMATS_TIME;
      return createVNode(CommonPicker, mergeProps(props, {
        "ref": commonPicker,
        "type": type4,
        "format": format2,
        "onUpdate:modelValue": modelUpdater
      }), {
        default: (props2) => createVNode(Panel, props2, null)
      });
    };
  }
});
const _TimePicker = TimePicker;
_TimePicker.install = (app) => {
  app.component(_TimePicker.name, _TimePicker);
};
const ElTimePicker = _TimePicker;
var localeData$1 = { exports: {} };
(function(module2, exports2) {
  !function(n, e) {
    module2.exports = e();
  }(commonjsGlobal, function() {
    return function(n, e, t2) {
      var r2 = e.prototype, o = function(n2) {
        return n2 && (n2.indexOf ? n2 : n2.s);
      }, u2 = function(n2, e2, t3, r3, u3) {
        var i2 = n2.name ? n2 : n2.$locale(), a2 = o(i2[e2]), s2 = o(i2[t3]), f2 = a2 || s2.map(function(n3) {
          return n3.slice(0, r3);
        });
        if (!u3)
          return f2;
        var d2 = i2.weekStart;
        return f2.map(function(n3, e3) {
          return f2[(e3 + (d2 || 0)) % 7];
        });
      }, i = function() {
        return t2.Ls[t2.locale()];
      }, a = function(n2, e2) {
        return n2.formats[e2] || function(n3) {
          return n3.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n4, e3, t3) {
            return e3 || t3.slice(1);
          });
        }(n2.formats[e2.toUpperCase()]);
      }, s = function() {
        var n2 = this;
        return { months: function(e2) {
          return e2 ? e2.format("MMMM") : u2(n2, "months");
        }, monthsShort: function(e2) {
          return e2 ? e2.format("MMM") : u2(n2, "monthsShort", "months", 3);
        }, firstDayOfWeek: function() {
          return n2.$locale().weekStart || 0;
        }, weekdays: function(e2) {
          return e2 ? e2.format("dddd") : u2(n2, "weekdays");
        }, weekdaysMin: function(e2) {
          return e2 ? e2.format("dd") : u2(n2, "weekdaysMin", "weekdays", 2);
        }, weekdaysShort: function(e2) {
          return e2 ? e2.format("ddd") : u2(n2, "weekdaysShort", "weekdays", 3);
        }, longDateFormat: function(e2) {
          return a(n2.$locale(), e2);
        }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
      };
      r2.localeData = function() {
        return s.bind(this)();
      }, t2.localeData = function() {
        var n2 = i();
        return { firstDayOfWeek: function() {
          return n2.weekStart || 0;
        }, weekdays: function() {
          return t2.weekdays();
        }, weekdaysShort: function() {
          return t2.weekdaysShort();
        }, weekdaysMin: function() {
          return t2.weekdaysMin();
        }, months: function() {
          return t2.months();
        }, monthsShort: function() {
          return t2.monthsShort();
        }, longDateFormat: function(e2) {
          return a(n2, e2);
        }, meridiem: n2.meridiem, ordinal: n2.ordinal };
      }, t2.months = function() {
        return u2(i(), "months");
      }, t2.monthsShort = function() {
        return u2(i(), "monthsShort", "months", 3);
      }, t2.weekdays = function(n2) {
        return u2(i(), "weekdays", null, null, n2);
      }, t2.weekdaysShort = function(n2) {
        return u2(i(), "weekdaysShort", "weekdays", 3, n2);
      }, t2.weekdaysMin = function(n2) {
        return u2(i(), "weekdaysMin", "weekdays", 2, n2);
      };
    };
  });
})(localeData$1);
var localeDataExports = localeData$1.exports;
const localeData = /* @__PURE__ */ getDefaultExportFromCjs(localeDataExports);
const tagProps = buildProps({
  type: {
    type: String,
    values: ["primary", "success", "info", "warning", "danger"],
    default: "primary"
  },
  closable: Boolean,
  disableTransitions: Boolean,
  hit: Boolean,
  color: String,
  size: {
    type: String,
    values: componentSizes
  },
  effect: {
    type: String,
    values: ["dark", "light", "plain"],
    default: "light"
  },
  round: Boolean
});
const tagEmits = {
  close: (evt) => evt instanceof MouseEvent,
  click: (evt) => evt instanceof MouseEvent
};
const __default__$2 = defineComponent({
  name: "ElTag"
});
const _sfc_main$e = /* @__PURE__ */ defineComponent({
  ...__default__$2,
  props: tagProps,
  emits: tagEmits,
  setup(__props, { emit }) {
    const props = __props;
    const tagSize = useFormSize();
    const ns = useNamespace("tag");
    const containerKls = computed(() => {
      const { type: type4, hit, effect, closable, round } = props;
      return [
        ns.b(),
        ns.is("closable", closable),
        ns.m(type4 || "primary"),
        ns.m(tagSize.value),
        ns.m(effect),
        ns.is("hit", hit),
        ns.is("round", round)
      ];
    });
    const handleClose = (event) => {
      emit("close", event);
    };
    const handleClick = (event) => {
      emit("click", event);
    };
    return (_ctx, _cache) => {
      return _ctx.disableTransitions ? (openBlock(), createElementBlock("span", {
        key: 0,
        class: normalizeClass(unref(containerKls)),
        style: normalizeStyle({ backgroundColor: _ctx.color }),
        onClick: handleClick
      }, [
        createBaseVNode("span", {
          class: normalizeClass(unref(ns).e("content"))
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2),
        _ctx.closable ? (openBlock(), createBlock(unref(ElIcon), {
          key: 0,
          class: normalizeClass(unref(ns).e("close")),
          onClick: withModifiers(handleClose, ["stop"])
        }, {
          default: withCtx(() => [
            createVNode(unref(close_default))
          ]),
          _: 1
        }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
      ], 6)) : (openBlock(), createBlock(Transition, {
        key: 1,
        name: `${unref(ns).namespace.value}-zoom-in-center`,
        appear: ""
      }, {
        default: withCtx(() => [
          createBaseVNode("span", {
            class: normalizeClass(unref(containerKls)),
            style: normalizeStyle({ backgroundColor: _ctx.color }),
            onClick: handleClick
          }, [
            createBaseVNode("span", {
              class: normalizeClass(unref(ns).e("content"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2),
            _ctx.closable ? (openBlock(), createBlock(unref(ElIcon), {
              key: 0,
              class: normalizeClass(unref(ns).e("close")),
              onClick: withModifiers(handleClose, ["stop"])
            }, {
              default: withCtx(() => [
                createVNode(unref(close_default))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
          ], 6)
        ]),
        _: 3
      }, 8, ["name"]));
    };
  }
});
var Tag = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["__file", "tag.vue"]]);
const ElTag = withInstall(Tag);
var advancedFormat$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    return function(e, t2) {
      var r2 = t2.prototype, n = r2.format;
      r2.format = function(e2) {
        var t3 = this, r3 = this.$locale();
        if (!this.isValid())
          return n.bind(this)(e2);
        var s = this.$utils(), a = (e2 || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e3) {
          switch (e3) {
            case "Q":
              return Math.ceil((t3.$M + 1) / 3);
            case "Do":
              return r3.ordinal(t3.$D);
            case "gggg":
              return t3.weekYear();
            case "GGGG":
              return t3.isoWeekYear();
            case "wo":
              return r3.ordinal(t3.week(), "W");
            case "w":
            case "ww":
              return s.s(t3.week(), "w" === e3 ? 1 : 2, "0");
            case "W":
            case "WW":
              return s.s(t3.isoWeek(), "W" === e3 ? 1 : 2, "0");
            case "k":
            case "kk":
              return s.s(String(0 === t3.$H ? 24 : t3.$H), "k" === e3 ? 1 : 2, "0");
            case "X":
              return Math.floor(t3.$d.getTime() / 1e3);
            case "x":
              return t3.$d.getTime();
            case "z":
              return "[" + t3.offsetName() + "]";
            case "zzz":
              return "[" + t3.offsetName("long") + "]";
            default:
              return e3;
          }
        });
        return n.bind(this)(a);
      };
    };
  });
})(advancedFormat$1);
var advancedFormatExports = advancedFormat$1.exports;
const advancedFormat = /* @__PURE__ */ getDefaultExportFromCjs(advancedFormatExports);
var weekOfYear$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    var e = "week", t2 = "year";
    return function(i, n, r2) {
      var f2 = n.prototype;
      f2.week = function(i2) {
        if (void 0 === i2 && (i2 = null), null !== i2)
          return this.add(7 * (i2 - this.week()), "day");
        var n2 = this.$locale().yearStart || 1;
        if (11 === this.month() && this.date() > 25) {
          var f3 = r2(this).startOf(t2).add(1, t2).date(n2), s = r2(this).endOf(e);
          if (f3.isBefore(s))
            return 1;
        }
        var a = r2(this).startOf(t2).date(n2).startOf(e).subtract(1, "millisecond"), o = this.diff(a, e, true);
        return o < 0 ? r2(this).startOf("week").week() : Math.ceil(o);
      }, f2.weeks = function(e2) {
        return void 0 === e2 && (e2 = null), this.week(e2);
      };
    };
  });
})(weekOfYear$1);
var weekOfYearExports = weekOfYear$1.exports;
const weekOfYear = /* @__PURE__ */ getDefaultExportFromCjs(weekOfYearExports);
var weekYear$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    return function(e, t2) {
      t2.prototype.weekYear = function() {
        var e2 = this.month(), t3 = this.week(), n = this.year();
        return 1 === t3 && 11 === e2 ? n + 1 : 0 === e2 && t3 >= 52 ? n - 1 : n;
      };
    };
  });
})(weekYear$1);
var weekYearExports = weekYear$1.exports;
const weekYear = /* @__PURE__ */ getDefaultExportFromCjs(weekYearExports);
var dayOfYear$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    return function(e, t2, n) {
      t2.prototype.dayOfYear = function(e2) {
        var t3 = Math.round((n(this).startOf("day") - n(this).startOf("year")) / 864e5) + 1;
        return null == e2 ? t3 : this.add(e2 - t3, "day");
      };
    };
  });
})(dayOfYear$1);
var dayOfYearExports = dayOfYear$1.exports;
const dayOfYear = /* @__PURE__ */ getDefaultExportFromCjs(dayOfYearExports);
var isSameOrAfter$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    return function(e, t2) {
      t2.prototype.isSameOrAfter = function(e2, t3) {
        return this.isSame(e2, t3) || this.isAfter(e2, t3);
      };
    };
  });
})(isSameOrAfter$1);
var isSameOrAfterExports = isSameOrAfter$1.exports;
const isSameOrAfter = /* @__PURE__ */ getDefaultExportFromCjs(isSameOrAfterExports);
var isSameOrBefore$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, i) {
    module2.exports = i();
  }(commonjsGlobal, function() {
    return function(e, i) {
      i.prototype.isSameOrBefore = function(e2, i2) {
        return this.isSame(e2, i2) || this.isBefore(e2, i2);
      };
    };
  });
})(isSameOrBefore$1);
var isSameOrBeforeExports = isSameOrBefore$1.exports;
const isSameOrBefore = /* @__PURE__ */ getDefaultExportFromCjs(isSameOrBeforeExports);
const ROOT_PICKER_INJECTION_KEY = Symbol();
const datePickerProps = buildProps({
  ...timePickerDefaultProps,
  type: {
    type: definePropType(String),
    default: "date"
  }
});
const selectionModes = [
  "date",
  "dates",
  "year",
  "years",
  "month",
  "week",
  "range"
];
const datePickerSharedProps = buildProps({
  disabledDate: {
    type: definePropType(Function)
  },
  date: {
    type: definePropType(Object),
    required: true
  },
  minDate: {
    type: definePropType(Object)
  },
  maxDate: {
    type: definePropType(Object)
  },
  parsedValue: {
    type: definePropType([Object, Array])
  },
  rangeState: {
    type: definePropType(Object),
    default: () => ({
      endDate: null,
      selecting: false
    })
  }
});
const panelSharedProps = buildProps({
  type: {
    type: definePropType(String),
    required: true,
    values: datePickTypes
  },
  dateFormat: String,
  timeFormat: String
});
const panelRangeSharedProps = buildProps({
  unlinkPanels: Boolean,
  parsedValue: {
    type: definePropType(Array)
  }
});
const selectionModeWithDefault = (mode) => {
  return {
    type: String,
    values: selectionModes,
    default: mode
  };
};
const panelDatePickProps = buildProps({
  ...panelSharedProps,
  parsedValue: {
    type: definePropType([Object, Array])
  },
  visible: {
    type: Boolean
  },
  format: {
    type: String,
    default: ""
  }
});
const basicDateTableProps = buildProps({
  ...datePickerSharedProps,
  cellClassName: {
    type: definePropType(Function)
  },
  showWeekNumber: Boolean,
  selectionMode: selectionModeWithDefault("date")
});
const basicDateTableEmits = ["changerange", "pick", "select"];
const isValidRange = (range3) => {
  if (!isArray$1(range3))
    return false;
  const [left, right] = range3;
  return dayjs.isDayjs(left) && dayjs.isDayjs(right) && left.isSameOrBefore(right);
};
const getDefaultValue = (defaultValue, { lang, unit: unit2, unlinkPanels }) => {
  let start;
  if (isArray$1(defaultValue)) {
    let [left, right] = defaultValue.map((d2) => dayjs(d2).locale(lang));
    if (!unlinkPanels) {
      right = left.add(1, unit2);
    }
    return [left, right];
  } else if (defaultValue) {
    start = dayjs(defaultValue);
  } else {
    start = dayjs();
  }
  start = start.locale(lang);
  return [start, start.add(1, unit2)];
};
const buildPickerTable = (dimension, rows, {
  columnIndexOffset,
  startDate,
  nextEndDate,
  now: now2,
  unit: unit2,
  relativeDateGetter,
  setCellMetadata,
  setRowMetadata
}) => {
  for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {
    const row = rows[rowIndex];
    for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {
      let cell = row[columnIndex + columnIndexOffset];
      if (!cell) {
        cell = {
          row: rowIndex,
          column: columnIndex,
          type: "normal",
          inRange: false,
          start: false,
          end: false
        };
      }
      const index = rowIndex * dimension.column + columnIndex;
      const nextStartDate = relativeDateGetter(index);
      cell.dayjs = nextStartDate;
      cell.date = nextStartDate.toDate();
      cell.timestamp = nextStartDate.valueOf();
      cell.type = "normal";
      cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit2) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit2)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit2) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit2));
      if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {
        cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit2);
        cell.end = startDate && nextStartDate.isSame(startDate, unit2);
      } else {
        cell.start = !!startDate && nextStartDate.isSame(startDate, unit2);
        cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit2);
      }
      const isToday = nextStartDate.isSame(now2, unit2);
      if (isToday) {
        cell.type = "today";
      }
      setCellMetadata == null ? void 0 : setCellMetadata(cell, { rowIndex, columnIndex });
      row[columnIndex + columnIndexOffset] = cell;
    }
    setRowMetadata == null ? void 0 : setRowMetadata(row);
  }
};
const isNormalDay = (type4 = "") => {
  return ["normal", "today"].includes(type4);
};
const useBasicDateTable = (props, emit) => {
  const { lang } = useLocale();
  const tbodyRef = ref();
  const currentCellRef = ref();
  const lastRow = ref();
  const lastColumn = ref();
  const tableRows = ref([[], [], [], [], [], []]);
  let focusWithClick = false;
  const firstDayOfWeek = props.date.$locale().weekStart || 7;
  const WEEKS_CONSTANT = props.date.locale("en").localeData().weekdaysShort().map((_2) => _2.toLowerCase());
  const offsetDay = computed(() => {
    return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;
  });
  const startDate = computed(() => {
    const startDayOfMonth = props.date.startOf("month");
    return startDayOfMonth.subtract(startDayOfMonth.day() || 7, "day");
  });
  const WEEKS = computed(() => {
    return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);
  });
  const hasCurrent = computed(() => {
    return flatten(unref(rows)).some((row) => {
      return row.isCurrent;
    });
  });
  const days = computed(() => {
    const startOfMonth = props.date.startOf("month");
    const startOfMonthDay = startOfMonth.day() || 7;
    const dateCountOfMonth = startOfMonth.daysInMonth();
    const dateCountOfLastMonth = startOfMonth.subtract(1, "month").daysInMonth();
    return {
      startOfMonthDay,
      dateCountOfMonth,
      dateCountOfLastMonth
    };
  });
  const selectedDate = computed(() => {
    return props.selectionMode === "dates" ? castArray(props.parsedValue) : [];
  });
  const setDateText = (cell, { count, rowIndex, columnIndex }) => {
    const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);
    const offset = unref(offsetDay);
    if (rowIndex >= 0 && rowIndex <= 1) {
      const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;
      if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {
        cell.text = count;
        return true;
      } else {
        cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;
        cell.type = "prev-month";
      }
    } else {
      if (count <= dateCountOfMonth) {
        cell.text = count;
      } else {
        cell.text = count - dateCountOfMonth;
        cell.type = "next-month";
      }
      return true;
    }
    return false;
  };
  const setCellMetadata = (cell, { columnIndex, rowIndex }, count) => {
    const { disabledDate: disabledDate2, cellClassName } = props;
    const _selectedDate = unref(selectedDate);
    const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });
    const cellDate = cell.dayjs.toDate();
    cell.selected = _selectedDate.find((d2) => d2.isSame(cell.dayjs, "day"));
    cell.isSelected = !!cell.selected;
    cell.isCurrent = isCurrent(cell);
    cell.disabled = disabledDate2 == null ? void 0 : disabledDate2(cellDate);
    cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);
    return shouldIncrement;
  };
  const setRowMetadata = (row) => {
    if (props.selectionMode === "week") {
      const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];
      const isActive = isWeekActive(row[start + 1]);
      row[start].inRange = isActive;
      row[start].start = isActive;
      row[end].inRange = isActive;
      row[end].end = isActive;
    }
  };
  const rows = computed(() => {
    const { minDate, maxDate, rangeState, showWeekNumber } = props;
    const offset = unref(offsetDay);
    const rows_ = unref(tableRows);
    const dateUnit = "day";
    let count = 1;
    if (showWeekNumber) {
      for (let rowIndex = 0; rowIndex < 6; rowIndex++) {
        if (!rows_[rowIndex][0]) {
          rows_[rowIndex][0] = {
            type: "week",
            text: unref(startDate).add(rowIndex * 7 + 1, dateUnit).week()
          };
        }
      }
    }
    buildPickerTable({ row: 6, column: 7 }, rows_, {
      startDate: minDate,
      columnIndexOffset: showWeekNumber ? 1 : 0,
      nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,
      now: dayjs().locale(unref(lang)).startOf(dateUnit),
      unit: dateUnit,
      relativeDateGetter: (idx) => unref(startDate).add(idx - offset, dateUnit),
      setCellMetadata: (...args) => {
        if (setCellMetadata(...args, count)) {
          count += 1;
        }
      },
      setRowMetadata
    });
    return rows_;
  });
  watch(() => props.date, async () => {
    var _a2;
    if ((_a2 = unref(tbodyRef)) == null ? void 0 : _a2.contains(document.activeElement)) {
      await nextTick();
      await focus();
    }
  });
  const focus = async () => {
    var _a2;
    return (_a2 = unref(currentCellRef)) == null ? void 0 : _a2.focus();
  };
  const isCurrent = (cell) => {
    return props.selectionMode === "date" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);
  };
  const cellMatchesDate = (cell, date5) => {
    if (!date5)
      return false;
    return dayjs(date5).locale(unref(lang)).isSame(props.date.date(Number(cell.text)), "day");
  };
  const getDateOfCell = (row, column) => {
    const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - unref(offsetDay);
    return unref(startDate).add(offsetFromStart, "day");
  };
  const handleMouseMove = (event) => {
    var _a2;
    if (!props.rangeState.selecting)
      return;
    let target = event.target;
    if (target.tagName === "SPAN") {
      target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
    }
    if (target.tagName === "DIV") {
      target = target.parentNode;
    }
    if (target.tagName !== "TD")
      return;
    const row = target.parentNode.rowIndex - 1;
    const column = target.cellIndex;
    if (unref(rows)[row][column].disabled)
      return;
    if (row !== unref(lastRow) || column !== unref(lastColumn)) {
      lastRow.value = row;
      lastColumn.value = column;
      emit("changerange", {
        selecting: true,
        endDate: getDateOfCell(row, column)
      });
    }
  };
  const isSelectedCell = (cell) => {
    return !unref(hasCurrent) && (cell == null ? void 0 : cell.text) === 1 && cell.type === "normal" || cell.isCurrent;
  };
  const handleFocus = (event) => {
    if (focusWithClick || unref(hasCurrent) || props.selectionMode !== "date")
      return;
    handlePickDate(event, true);
  };
  const handleMouseDown = (event) => {
    const target = event.target.closest("td");
    if (!target)
      return;
    focusWithClick = true;
  };
  const handleMouseUp = (event) => {
    const target = event.target.closest("td");
    if (!target)
      return;
    focusWithClick = false;
  };
  const handleRangePick = (newDate) => {
    if (!props.rangeState.selecting || !props.minDate) {
      emit("pick", { minDate: newDate, maxDate: null });
      emit("select", true);
    } else {
      if (newDate >= props.minDate) {
        emit("pick", { minDate: props.minDate, maxDate: newDate });
      } else {
        emit("pick", { minDate: newDate, maxDate: props.minDate });
      }
      emit("select", false);
    }
  };
  const handleWeekPick = (newDate) => {
    const weekNumber = newDate.week();
    const value = `${newDate.year()}w${weekNumber}`;
    emit("pick", {
      year: newDate.year(),
      week: weekNumber,
      value,
      date: newDate.startOf("week")
    });
  };
  const handleDatesPick = (newDate, selected) => {
    const newValue = selected ? castArray(props.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);
    emit("pick", newValue);
  };
  const handlePickDate = (event, isKeyboardMovement = false) => {
    const target = event.target.closest("td");
    if (!target)
      return;
    const row = target.parentNode.rowIndex - 1;
    const column = target.cellIndex;
    const cell = unref(rows)[row][column];
    if (cell.disabled || cell.type === "week")
      return;
    const newDate = getDateOfCell(row, column);
    switch (props.selectionMode) {
      case "range": {
        handleRangePick(newDate);
        break;
      }
      case "date": {
        emit("pick", newDate, isKeyboardMovement);
        break;
      }
      case "week": {
        handleWeekPick(newDate);
        break;
      }
      case "dates": {
        handleDatesPick(newDate, !!cell.selected);
        break;
      }
    }
  };
  const isWeekActive = (cell) => {
    if (props.selectionMode !== "week")
      return false;
    let newDate = props.date.startOf("day");
    if (cell.type === "prev-month") {
      newDate = newDate.subtract(1, "month");
    }
    if (cell.type === "next-month") {
      newDate = newDate.add(1, "month");
    }
    newDate = newDate.date(Number.parseInt(cell.text, 10));
    if (props.parsedValue && !Array.isArray(props.parsedValue)) {
      const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;
      const weekDate = props.parsedValue.subtract(dayOffset, "day");
      return weekDate.isSame(newDate, "day");
    }
    return false;
  };
  return {
    WEEKS,
    rows,
    tbodyRef,
    currentCellRef,
    focus,
    isCurrent,
    isWeekActive,
    isSelectedCell,
    handlePickDate,
    handleMouseUp,
    handleMouseDown,
    handleMouseMove,
    handleFocus
  };
};
const useBasicDateTableDOM = (props, {
  isCurrent,
  isWeekActive
}) => {
  const ns = useNamespace("date-table");
  const { t: t2 } = useLocale();
  const tableKls = computed(() => [
    ns.b(),
    { "is-week-mode": props.selectionMode === "week" }
  ]);
  const tableLabel = computed(() => t2("el.datepicker.dateTablePrompt"));
  const weekLabel = computed(() => t2("el.datepicker.week"));
  const getCellClasses = (cell) => {
    const classes = [];
    if (isNormalDay(cell.type) && !cell.disabled) {
      classes.push("available");
      if (cell.type === "today") {
        classes.push("today");
      }
    } else {
      classes.push(cell.type);
    }
    if (isCurrent(cell)) {
      classes.push("current");
    }
    if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === "week")) {
      classes.push("in-range");
      if (cell.start) {
        classes.push("start-date");
      }
      if (cell.end) {
        classes.push("end-date");
      }
    }
    if (cell.disabled) {
      classes.push("disabled");
    }
    if (cell.selected) {
      classes.push("selected");
    }
    if (cell.customClass) {
      classes.push(cell.customClass);
    }
    return classes.join(" ");
  };
  const getRowKls = (cell) => [
    ns.e("row"),
    { current: isWeekActive(cell) }
  ];
  return {
    tableKls,
    tableLabel,
    weekLabel,
    getCellClasses,
    getRowKls,
    t: t2
  };
};
const basicCellProps = buildProps({
  cell: {
    type: definePropType(Object)
  }
});
var ElDatePickerCell = defineComponent({
  name: "ElDatePickerCell",
  props: basicCellProps,
  setup(props) {
    const ns = useNamespace("date-table-cell");
    const {
      slots
    } = inject(ROOT_PICKER_INJECTION_KEY);
    return () => {
      const {
        cell
      } = props;
      return renderSlot(slots, "default", {
        ...cell
      }, () => [createVNode("div", {
        "class": ns.b()
      }, [createVNode("span", {
        "class": ns.e("text")
      }, [cell == null ? void 0 : cell.text])])]);
    };
  }
});
const _hoisted_1$9 = ["aria-label"];
const _hoisted_2$7 = {
  key: 0,
  scope: "col"
};
const _hoisted_3$6 = ["aria-label"];
const _hoisted_4$4 = ["aria-current", "aria-selected", "tabindex"];
const _sfc_main$d = /* @__PURE__ */ defineComponent({
  __name: "basic-date-table",
  props: basicDateTableProps,
  emits: basicDateTableEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const {
      WEEKS,
      rows,
      tbodyRef,
      currentCellRef,
      focus,
      isCurrent,
      isWeekActive,
      isSelectedCell,
      handlePickDate,
      handleMouseUp,
      handleMouseDown,
      handleMouseMove,
      handleFocus
    } = useBasicDateTable(props, emit);
    const { tableLabel, tableKls, weekLabel, getCellClasses, getRowKls, t: t2 } = useBasicDateTableDOM(props, {
      isCurrent,
      isWeekActive
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("table", {
        "aria-label": unref(tableLabel),
        class: normalizeClass(unref(tableKls)),
        cellspacing: "0",
        cellpadding: "0",
        role: "grid",
        onClick: _cache[1] || (_cache[1] = (...args) => unref(handlePickDate) && unref(handlePickDate)(...args)),
        onMousemove: _cache[2] || (_cache[2] = (...args) => unref(handleMouseMove) && unref(handleMouseMove)(...args)),
        onMousedown: _cache[3] || (_cache[3] = withModifiers((...args) => unref(handleMouseDown) && unref(handleMouseDown)(...args), ["prevent"])),
        onMouseup: _cache[4] || (_cache[4] = (...args) => unref(handleMouseUp) && unref(handleMouseUp)(...args))
      }, [
        createBaseVNode("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          createBaseVNode("tr", null, [
            _ctx.showWeekNumber ? (openBlock(), createElementBlock("th", _hoisted_2$7, toDisplayString(unref(weekLabel)), 1)) : createCommentVNode("v-if", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(WEEKS), (week, key) => {
              return openBlock(), createElementBlock("th", {
                key,
                "aria-label": unref(t2)("el.datepicker.weeksFull." + week),
                scope: "col"
              }, toDisplayString(unref(t2)("el.datepicker.weeks." + week)), 9, _hoisted_3$6);
            }), 128))
          ]),
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, rowKey) => {
            return openBlock(), createElementBlock("tr", {
              key: rowKey,
              class: normalizeClass(unref(getRowKls)(row[1]))
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, columnKey) => {
                return openBlock(), createElementBlock("td", {
                  key: `${rowKey}.${columnKey}`,
                  ref_for: true,
                  ref: (el) => unref(isSelectedCell)(cell) && (currentCellRef.value = el),
                  class: normalizeClass(unref(getCellClasses)(cell)),
                  "aria-current": cell.isCurrent ? "date" : void 0,
                  "aria-selected": cell.isCurrent,
                  tabindex: unref(isSelectedCell)(cell) ? 0 : -1,
                  onFocus: _cache[0] || (_cache[0] = (...args) => unref(handleFocus) && unref(handleFocus)(...args))
                }, [
                  createVNode(unref(ElDatePickerCell), { cell }, null, 8, ["cell"])
                ], 42, _hoisted_4$4);
              }), 128))
            ], 2);
          }), 128))
        ], 512)
      ], 42, _hoisted_1$9);
    };
  }
});
var DateTable = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["__file", "basic-date-table.vue"]]);
const basicMonthTableProps = buildProps({
  ...datePickerSharedProps,
  selectionMode: selectionModeWithDefault("month")
});
const _hoisted_1$8 = ["aria-label"];
const _hoisted_2$6 = ["aria-selected", "aria-label", "tabindex", "onKeydown"];
const _hoisted_3$5 = { class: "cell" };
const _sfc_main$c = /* @__PURE__ */ defineComponent({
  __name: "basic-month-table",
  props: basicMonthTableProps,
  emits: ["changerange", "pick", "select"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const datesInMonth = (year, month, lang2) => {
      const firstDay = dayjs().locale(lang2).startOf("month").month(month).year(year);
      const numOfDays = firstDay.daysInMonth();
      return rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
    };
    const ns = useNamespace("month-table");
    const { t: t2, lang } = useLocale();
    const tbodyRef = ref();
    const currentCellRef = ref();
    const months = ref(props.date.locale("en").localeData().monthsShort().map((_2) => _2.toLowerCase()));
    const tableRows = ref([
      [],
      [],
      []
    ]);
    const lastRow = ref();
    const lastColumn = ref();
    const rows = computed(() => {
      var _a2, _b;
      const rows2 = tableRows.value;
      const now2 = dayjs().locale(lang.value).startOf("month");
      for (let i = 0; i < 3; i++) {
        const row = rows2[i];
        for (let j2 = 0; j2 < 4; j2++) {
          const cell = row[j2] || (row[j2] = {
            row: i,
            column: j2,
            type: "normal",
            inRange: false,
            start: false,
            end: false,
            text: -1,
            disabled: false
          });
          cell.type = "normal";
          const index = i * 4 + j2;
          const calTime = props.date.startOf("year").month(index);
          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;
          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, "month") && calEndDate && calTime.isSameOrBefore(calEndDate, "month")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, "month") && calEndDate && calTime.isSameOrAfter(calEndDate, "month"));
          if ((_a2 = props.minDate) == null ? void 0 : _a2.isSameOrAfter(calEndDate)) {
            cell.start = !!(calEndDate && calTime.isSame(calEndDate, "month"));
            cell.end = props.minDate && calTime.isSame(props.minDate, "month");
          } else {
            cell.start = !!(props.minDate && calTime.isSame(props.minDate, "month"));
            cell.end = !!(calEndDate && calTime.isSame(calEndDate, "month"));
          }
          const isToday = now2.isSame(calTime);
          if (isToday) {
            cell.type = "today";
          }
          cell.text = index;
          cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, calTime.toDate())) || false;
        }
      }
      return rows2;
    });
    const focus = () => {
      var _a2;
      (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
    };
    const getCellStyle = (cell) => {
      const style = {};
      const year = props.date.year();
      const today = /* @__PURE__ */ new Date();
      const month = cell.text;
      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;
      style.current = castArray(props.parsedValue).findIndex((date5) => dayjs.isDayjs(date5) && date5.year() === year && date5.month() === month) >= 0;
      style.today = today.getFullYear() === year && today.getMonth() === month;
      if (cell.inRange) {
        style["in-range"] = true;
        if (cell.start) {
          style["start-date"] = true;
        }
        if (cell.end) {
          style["end-date"] = true;
        }
      }
      return style;
    };
    const isSelectedCell = (cell) => {
      const year = props.date.year();
      const month = cell.text;
      return castArray(props.date).findIndex((date5) => date5.year() === year && date5.month() === month) >= 0;
    };
    const handleMouseMove = (event) => {
      var _a2;
      if (!props.rangeState.selecting)
        return;
      let target = event.target;
      if (target.tagName === "SPAN") {
        target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
      }
      if (target.tagName === "DIV") {
        target = target.parentNode;
      }
      if (target.tagName !== "TD")
        return;
      const row = target.parentNode.rowIndex;
      const column = target.cellIndex;
      if (rows.value[row][column].disabled)
        return;
      if (row !== lastRow.value || column !== lastColumn.value) {
        lastRow.value = row;
        lastColumn.value = column;
        emit("changerange", {
          selecting: true,
          endDate: props.date.startOf("year").month(row * 4 + column)
        });
      }
    };
    const handleMonthTableClick = (event) => {
      var _a2;
      const target = (_a2 = event.target) == null ? void 0 : _a2.closest("td");
      if ((target == null ? void 0 : target.tagName) !== "TD")
        return;
      if (hasClass(target, "disabled"))
        return;
      const column = target.cellIndex;
      const row = target.parentNode.rowIndex;
      const month = row * 4 + column;
      const newDate = props.date.startOf("year").month(month);
      if (props.selectionMode === "range") {
        if (!props.rangeState.selecting) {
          emit("pick", { minDate: newDate, maxDate: null });
          emit("select", true);
        } else {
          if (props.minDate && newDate >= props.minDate) {
            emit("pick", { minDate: props.minDate, maxDate: newDate });
          } else {
            emit("pick", { minDate: newDate, maxDate: props.minDate });
          }
          emit("select", false);
        }
      } else {
        emit("pick", month);
      }
    };
    watch(() => props.date, async () => {
      var _a2, _b;
      if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
        await nextTick();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("table", {
        role: "grid",
        "aria-label": unref(t2)("el.datepicker.monthTablePrompt"),
        class: normalizeClass(unref(ns).b()),
        onClick: handleMonthTableClick,
        onMousemove: handleMouseMove
      }, [
        createBaseVNode("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, key) => {
            return openBlock(), createElementBlock("tr", { key }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {
                return openBlock(), createElementBlock("td", {
                  key: key_,
                  ref_for: true,
                  ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                  class: normalizeClass(getCellStyle(cell)),
                  "aria-selected": `${isSelectedCell(cell)}`,
                  "aria-label": unref(t2)(`el.datepicker.month${+cell.text + 1}`),
                  tabindex: isSelectedCell(cell) ? 0 : -1,
                  onKeydown: [
                    withKeys(withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["space"]),
                    withKeys(withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["enter"])
                  ]
                }, [
                  createBaseVNode("div", null, [
                    createBaseVNode("span", _hoisted_3$5, toDisplayString(unref(t2)("el.datepicker.months." + months.value[cell.text])), 1)
                  ])
                ], 42, _hoisted_2$6);
              }), 128))
            ]);
          }), 128))
        ], 512)
      ], 42, _hoisted_1$8);
    };
  }
});
var MonthTable = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["__file", "basic-month-table.vue"]]);
const { date: date4, disabledDate, parsedValue } = datePickerSharedProps;
const basicYearTableProps = buildProps({
  date: date4,
  disabledDate,
  parsedValue,
  selectionMode: selectionModeWithDefault("year")
});
const _hoisted_1$7 = ["aria-label"];
const _hoisted_2$5 = ["aria-selected", "tabindex", "onKeydown"];
const _hoisted_3$4 = { class: "cell" };
const _hoisted_4$3 = { key: 1 };
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  __name: "basic-year-table",
  props: basicYearTableProps,
  emits: ["pick"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const datesInYear = (year, lang2) => {
      const firstDay = dayjs(String(year)).locale(lang2).startOf("year");
      const lastDay = firstDay.endOf("year");
      const numOfDays = lastDay.dayOfYear();
      return rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
    };
    const ns = useNamespace("year-table");
    const { t: t2, lang } = useLocale();
    const tbodyRef = ref();
    const currentCellRef = ref();
    const startYear = computed(() => {
      return Math.floor(props.date.year() / 10) * 10;
    });
    const focus = () => {
      var _a2;
      (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
    };
    const getCellKls = (year) => {
      const kls = {};
      const today = dayjs().locale(lang.value);
      kls.disabled = props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false;
      kls.current = castArray(props.parsedValue).findIndex((d2) => d2.year() === year) >= 0;
      kls.today = today.year() === year;
      return kls;
    };
    const isSelectedCell = (year) => {
      return year === startYear.value && props.date.year() < startYear.value && props.date.year() > startYear.value + 9 || castArray(props.date).findIndex((date5) => date5.year() === year) >= 0 || castArray(props.parsedValue).findIndex((date5) => (date5 == null ? void 0 : date5.year()) === year) >= 0;
    };
    const handleYearTableClick = (event) => {
      const clickTarget = event.target;
      const target = clickTarget.closest("td");
      if (target && target.textContent) {
        if (hasClass(target, "disabled"))
          return;
        const year = target.textContent || target.innerText;
        if (props.selectionMode === "years") {
          if (event.type === "keydown") {
            emit("pick", castArray(props.parsedValue), false);
            return;
          }
          const newValue = hasClass(target, "current") ? castArray(props.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.year()) !== Number(year)) : castArray(props.parsedValue).concat([dayjs(year)]);
          emit("pick", newValue);
        } else {
          emit("pick", Number(year));
        }
      }
    };
    watch(() => props.date, async () => {
      var _a2, _b;
      if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
        await nextTick();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("table", {
        role: "grid",
        "aria-label": unref(t2)("el.datepicker.yearTablePrompt"),
        class: normalizeClass(unref(ns).b()),
        onClick: handleYearTableClick
      }, [
        createBaseVNode("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          (openBlock(), createElementBlock(Fragment, null, renderList(3, (_2, i) => {
            return createBaseVNode("tr", { key: i }, [
              (openBlock(), createElementBlock(Fragment, null, renderList(4, (__, j2) => {
                return openBlock(), createElementBlock(Fragment, {
                  key: i + "_" + j2
                }, [
                  i * 4 + j2 < 10 ? (openBlock(), createElementBlock("td", {
                    key: 0,
                    ref_for: true,
                    ref: (el) => isSelectedCell(unref(startYear) + i * 4 + j2) && (currentCellRef.value = el),
                    class: normalizeClass(["available", getCellKls(unref(startYear) + i * 4 + j2)]),
                    "aria-selected": `${isSelectedCell(unref(startYear) + i * 4 + j2)}`,
                    tabindex: isSelectedCell(unref(startYear) + i * 4 + j2) ? 0 : -1,
                    onKeydown: [
                      withKeys(withModifiers(handleYearTableClick, ["prevent", "stop"]), ["space"]),
                      withKeys(withModifiers(handleYearTableClick, ["prevent", "stop"]), ["enter"])
                    ]
                  }, [
                    createBaseVNode("div", null, [
                      createBaseVNode("span", _hoisted_3$4, toDisplayString(unref(startYear) + i * 4 + j2), 1)
                    ])
                  ], 42, _hoisted_2$5)) : (openBlock(), createElementBlock("td", _hoisted_4$3))
                ], 64);
              }), 64))
            ]);
          }), 64))
        ], 512)
      ], 10, _hoisted_1$7);
    };
  }
});
var YearTable = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["__file", "basic-year-table.vue"]]);
const _hoisted_1$6 = ["onClick"];
const _hoisted_2$4 = ["aria-label"];
const _hoisted_3$3 = ["aria-label"];
const _hoisted_4$2 = ["aria-label"];
const _hoisted_5$1 = ["aria-label"];
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  __name: "panel-date-pick",
  props: panelDatePickProps,
  emits: ["pick", "set-picker-option", "panel-change"],
  setup(__props, { emit: contextEmit }) {
    const props = __props;
    const timeWithinRange = (_2, __, ___) => true;
    const ppNs = useNamespace("picker-panel");
    const dpNs = useNamespace("date-picker");
    const attrs = useAttrs$1();
    const slots = useSlots();
    const { t: t2, lang } = useLocale();
    const pickerBase = inject("EP_PICKER_BASE");
    const popper = inject(TOOLTIP_INJECTION_KEY);
    const { shortcuts, disabledDate: disabledDate2, cellClassName, defaultTime } = pickerBase.props;
    const defaultValue = toRef(pickerBase.props, "defaultValue");
    const currentViewRef = ref();
    const innerDate = ref(dayjs().locale(lang.value));
    const isChangeToNow = ref(false);
    let isShortcut = false;
    const defaultTimeD = computed(() => {
      return dayjs(defaultTime).locale(lang.value);
    });
    const month = computed(() => {
      return innerDate.value.month();
    });
    const year = computed(() => {
      return innerDate.value.year();
    });
    const selectableRange = ref([]);
    const userInputDate = ref(null);
    const userInputTime = ref(null);
    const checkDateWithinRange = (date5) => {
      return selectableRange.value.length > 0 ? timeWithinRange(date5, selectableRange.value, props.format || "HH:mm:ss") : true;
    };
    const formatEmit = (emitDayjs) => {
      if (defaultTime && !visibleTime.value && !isChangeToNow.value && !isShortcut) {
        return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
      }
      if (showTime.value)
        return emitDayjs.millisecond(0);
      return emitDayjs.startOf("day");
    };
    const emit = (value, ...args) => {
      if (!value) {
        contextEmit("pick", value, ...args);
      } else if (isArray$1(value)) {
        const dates = value.map(formatEmit);
        contextEmit("pick", dates, ...args);
      } else {
        contextEmit("pick", formatEmit(value), ...args);
      }
      userInputDate.value = null;
      userInputTime.value = null;
      isChangeToNow.value = false;
      isShortcut = false;
    };
    const handleDatePick = async (value, keepOpen) => {
      if (selectionMode.value === "date") {
        value = value;
        let newDate = props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;
        if (!checkDateWithinRange(newDate)) {
          newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());
        }
        innerDate.value = newDate;
        emit(newDate, showTime.value || keepOpen);
        if (props.type === "datetime") {
          await nextTick();
          handleFocusPicker();
        }
      } else if (selectionMode.value === "week") {
        emit(value.date);
      } else if (selectionMode.value === "dates") {
        emit(value, true);
      }
    };
    const moveByMonth = (forward) => {
      const action = forward ? "add" : "subtract";
      innerDate.value = innerDate.value[action](1, "month");
      handlePanelChange("month");
    };
    const moveByYear = (forward) => {
      const currentDate = innerDate.value;
      const action = forward ? "add" : "subtract";
      innerDate.value = currentView.value === "year" ? currentDate[action](10, "year") : currentDate[action](1, "year");
      handlePanelChange("year");
    };
    const currentView = ref("date");
    const yearLabel = computed(() => {
      const yearTranslation = t2("el.datepicker.year");
      if (currentView.value === "year") {
        const startYear = Math.floor(year.value / 10) * 10;
        if (yearTranslation) {
          return `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;
        }
        return `${startYear} - ${startYear + 9}`;
      }
      return `${year.value} ${yearTranslation}`;
    });
    const handleShortcutClick = (shortcut) => {
      const shortcutValue = isFunction$1(shortcut.value) ? shortcut.value() : shortcut.value;
      if (shortcutValue) {
        isShortcut = true;
        emit(dayjs(shortcutValue).locale(lang.value));
        return;
      }
      if (shortcut.onClick) {
        shortcut.onClick({
          attrs,
          slots,
          emit: contextEmit
        });
      }
    };
    const selectionMode = computed(() => {
      const { type: type4 } = props;
      if (["week", "month", "year", "years", "dates"].includes(type4))
        return type4;
      return "date";
    });
    const keyboardMode = computed(() => {
      return selectionMode.value === "date" ? currentView.value : selectionMode.value;
    });
    const hasShortcuts = computed(() => !!shortcuts.length);
    const handleMonthPick = async (month2) => {
      innerDate.value = innerDate.value.startOf("month").month(month2);
      if (selectionMode.value === "month") {
        emit(innerDate.value, false);
      } else {
        currentView.value = "date";
        if (["month", "year", "date", "week"].includes(selectionMode.value)) {
          emit(innerDate.value, true);
          await nextTick();
          handleFocusPicker();
        }
      }
      handlePanelChange("month");
    };
    const handleYearPick = async (year2, keepOpen) => {
      if (selectionMode.value === "year") {
        innerDate.value = innerDate.value.startOf("year").year(year2);
        emit(innerDate.value, false);
      } else if (selectionMode.value === "years") {
        emit(year2, keepOpen != null ? keepOpen : true);
      } else {
        innerDate.value = innerDate.value.year(year2);
        currentView.value = "month";
        if (["month", "year", "date", "week"].includes(selectionMode.value)) {
          emit(innerDate.value, true);
          await nextTick();
          handleFocusPicker();
        }
      }
      handlePanelChange("year");
    };
    const showPicker = async (view) => {
      currentView.value = view;
      await nextTick();
      handleFocusPicker();
    };
    const showTime = computed(() => props.type === "datetime" || props.type === "datetimerange");
    const footerVisible = computed(() => {
      const showDateFooter = showTime.value || selectionMode.value === "dates";
      const showYearFooter = selectionMode.value === "years";
      const isDateView = currentView.value === "date";
      const isYearView = currentView.value === "year";
      return showDateFooter && isDateView || showYearFooter && isYearView;
    });
    const disabledConfirm = computed(() => {
      if (!disabledDate2)
        return false;
      if (!props.parsedValue)
        return true;
      if (isArray$1(props.parsedValue)) {
        return disabledDate2(props.parsedValue[0].toDate());
      }
      return disabledDate2(props.parsedValue.toDate());
    });
    const onConfirm = () => {
      if (selectionMode.value === "dates" || selectionMode.value === "years") {
        emit(props.parsedValue);
      } else {
        let result = props.parsedValue;
        if (!result) {
          const defaultTimeD2 = dayjs(defaultTime).locale(lang.value);
          const defaultValueD = getDefaultValue2();
          result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());
        }
        innerDate.value = result;
        emit(result);
      }
    };
    const disabledNow = computed(() => {
      if (!disabledDate2)
        return false;
      return disabledDate2(dayjs().locale(lang.value).toDate());
    });
    const changeToNow = () => {
      const now2 = dayjs().locale(lang.value);
      const nowDate = now2.toDate();
      isChangeToNow.value = true;
      if ((!disabledDate2 || !disabledDate2(nowDate)) && checkDateWithinRange(nowDate)) {
        innerDate.value = dayjs().locale(lang.value);
        emit(innerDate.value);
      }
    };
    const timeFormat = computed(() => {
      return props.timeFormat || extractTimeFormat(props.format);
    });
    const dateFormat = computed(() => {
      return props.dateFormat || extractDateFormat(props.format);
    });
    const visibleTime = computed(() => {
      if (userInputTime.value)
        return userInputTime.value;
      if (!props.parsedValue && !defaultValue.value)
        return;
      return (props.parsedValue || innerDate.value).format(timeFormat.value);
    });
    const visibleDate = computed(() => {
      if (userInputDate.value)
        return userInputDate.value;
      if (!props.parsedValue && !defaultValue.value)
        return;
      return (props.parsedValue || innerDate.value).format(dateFormat.value);
    });
    const timePickerVisible = ref(false);
    const onTimePickerInputFocus = () => {
      timePickerVisible.value = true;
    };
    const handleTimePickClose = () => {
      timePickerVisible.value = false;
    };
    const getUnits = (date5) => {
      return {
        hour: date5.hour(),
        minute: date5.minute(),
        second: date5.second(),
        year: date5.year(),
        month: date5.month(),
        date: date5.date()
      };
    };
    const handleTimePick = (value, visible, first) => {
      const { hour, minute, second } = getUnits(value);
      const newDate = props.parsedValue ? props.parsedValue.hour(hour).minute(minute).second(second) : value;
      innerDate.value = newDate;
      emit(innerDate.value, true);
      if (!first) {
        timePickerVisible.value = visible;
      }
    };
    const handleVisibleTimeChange = (value) => {
      const newDate = dayjs(value, timeFormat.value).locale(lang.value);
      if (newDate.isValid() && checkDateWithinRange(newDate)) {
        const { year: year2, month: month2, date: date5 } = getUnits(innerDate.value);
        innerDate.value = newDate.year(year2).month(month2).date(date5);
        userInputTime.value = null;
        timePickerVisible.value = false;
        emit(innerDate.value, true);
      }
    };
    const handleVisibleDateChange = (value) => {
      const newDate = dayjs(value, dateFormat.value).locale(lang.value);
      if (newDate.isValid()) {
        if (disabledDate2 && disabledDate2(newDate.toDate())) {
          return;
        }
        const { hour, minute, second } = getUnits(innerDate.value);
        innerDate.value = newDate.hour(hour).minute(minute).second(second);
        userInputDate.value = null;
        emit(innerDate.value, true);
      }
    };
    const isValidValue = (date5) => {
      return dayjs.isDayjs(date5) && date5.isValid() && (disabledDate2 ? !disabledDate2(date5.toDate()) : true);
    };
    const formatToString = (value) => {
      return Array.isArray(value) ? value.map((_2) => _2.format(props.format)) : value.format(props.format);
    };
    const parseUserInput = (value) => {
      return dayjs(value, props.format).locale(lang.value);
    };
    const getDefaultValue2 = () => {
      const parseDate2 = dayjs(defaultValue.value).locale(lang.value);
      if (!defaultValue.value) {
        const defaultTimeDValue = defaultTimeD.value;
        return dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);
      }
      return parseDate2;
    };
    const handleFocusPicker = async () => {
      var _a2;
      if (["week", "month", "year", "date"].includes(selectionMode.value)) {
        (_a2 = currentViewRef.value) == null ? void 0 : _a2.focus();
        if (selectionMode.value === "week") {
          handleKeyControl(EVENT_CODE.down);
        }
      }
    };
    const handleKeydownTable = (event) => {
      const { code } = event;
      const validCode = [
        EVENT_CODE.up,
        EVENT_CODE.down,
        EVENT_CODE.left,
        EVENT_CODE.right,
        EVENT_CODE.home,
        EVENT_CODE.end,
        EVENT_CODE.pageUp,
        EVENT_CODE.pageDown
      ];
      if (validCode.includes(code)) {
        handleKeyControl(code);
        event.stopPropagation();
        event.preventDefault();
      }
      if ([EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.numpadEnter].includes(code) && userInputDate.value === null && userInputTime.value === null) {
        event.preventDefault();
        emit(innerDate.value, false);
      }
    };
    const handleKeyControl = (code) => {
      var _a2;
      const { up, down, left, right, home, end, pageUp, pageDown } = EVENT_CODE;
      const mapping = {
        year: {
          [up]: -4,
          [down]: 4,
          [left]: -1,
          [right]: 1,
          offset: (date5, step) => date5.setFullYear(date5.getFullYear() + step)
        },
        month: {
          [up]: -4,
          [down]: 4,
          [left]: -1,
          [right]: 1,
          offset: (date5, step) => date5.setMonth(date5.getMonth() + step)
        },
        week: {
          [up]: -1,
          [down]: 1,
          [left]: -1,
          [right]: 1,
          offset: (date5, step) => date5.setDate(date5.getDate() + step * 7)
        },
        date: {
          [up]: -7,
          [down]: 7,
          [left]: -1,
          [right]: 1,
          [home]: (date5) => -date5.getDay(),
          [end]: (date5) => -date5.getDay() + 6,
          [pageUp]: (date5) => -new Date(date5.getFullYear(), date5.getMonth(), 0).getDate(),
          [pageDown]: (date5) => new Date(date5.getFullYear(), date5.getMonth() + 1, 0).getDate(),
          offset: (date5, step) => date5.setDate(date5.getDate() + step)
        }
      };
      const newDate = innerDate.value.toDate();
      while (Math.abs(innerDate.value.diff(newDate, "year", true)) < 1) {
        const map = mapping[keyboardMode.value];
        if (!map)
          return;
        map.offset(newDate, isFunction$1(map[code]) ? map[code](newDate) : (_a2 = map[code]) != null ? _a2 : 0);
        if (disabledDate2 && disabledDate2(newDate)) {
          break;
        }
        const result = dayjs(newDate).locale(lang.value);
        innerDate.value = result;
        contextEmit("pick", result, true);
        break;
      }
    };
    const handlePanelChange = (mode) => {
      contextEmit("panel-change", innerDate.value.toDate(), mode, currentView.value);
    };
    watch(() => selectionMode.value, (val) => {
      if (["month", "year"].includes(val)) {
        currentView.value = val;
        return;
      } else if (val === "years") {
        currentView.value = "year";
        return;
      }
      currentView.value = "date";
    }, { immediate: true });
    watch(() => currentView.value, () => {
      popper == null ? void 0 : popper.updatePopper();
    });
    watch(() => defaultValue.value, (val) => {
      if (val) {
        innerDate.value = getDefaultValue2();
      }
    }, { immediate: true });
    watch(() => props.parsedValue, (val) => {
      if (val) {
        if (selectionMode.value === "dates" || selectionMode.value === "years")
          return;
        if (Array.isArray(val))
          return;
        innerDate.value = val;
      } else {
        innerDate.value = getDefaultValue2();
      }
    }, { immediate: true });
    contextEmit("set-picker-option", ["isValidValue", isValidValue]);
    contextEmit("set-picker-option", ["formatToString", formatToString]);
    contextEmit("set-picker-option", ["parseUserInput", parseUserInput]);
    contextEmit("set-picker-option", ["handleFocusPicker", handleFocusPicker]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(ppNs).b(),
          unref(dpNs).b(),
          {
            "has-sidebar": _ctx.$slots.sidebar || unref(hasShortcuts),
            "has-time": unref(showTime)
          }
        ])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(ppNs).e("body-wrapper"))
        }, [
          renderSlot(_ctx.$slots, "sidebar", {
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }),
          unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
              return openBlock(), createElementBlock("button", {
                key,
                type: "button",
                class: normalizeClass(unref(ppNs).e("shortcut")),
                onClick: ($event) => handleShortcutClick(shortcut)
              }, toDisplayString(shortcut.text), 11, _hoisted_1$6);
            }), 128))
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            class: normalizeClass(unref(ppNs).e("body"))
          }, [
            unref(showTime) ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(dpNs).e("time-header"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(dpNs).e("editor-wrap"))
              }, [
                createVNode(unref(ElInput), {
                  placeholder: unref(t2)("el.datepicker.selectDate"),
                  "model-value": unref(visibleDate),
                  size: "small",
                  "validate-event": false,
                  onInput: _cache[0] || (_cache[0] = (val) => userInputDate.value = val),
                  onChange: handleVisibleDateChange
                }, null, 8, ["placeholder", "model-value"])
              ], 2),
              withDirectives((openBlock(), createElementBlock("span", {
                class: normalizeClass(unref(dpNs).e("editor-wrap"))
              }, [
                createVNode(unref(ElInput), {
                  placeholder: unref(t2)("el.datepicker.selectTime"),
                  "model-value": unref(visibleTime),
                  size: "small",
                  "validate-event": false,
                  onFocus: onTimePickerInputFocus,
                  onInput: _cache[1] || (_cache[1] = (val) => userInputTime.value = val),
                  onChange: handleVisibleTimeChange
                }, null, 8, ["placeholder", "model-value"]),
                createVNode(unref(TimePickPanel), {
                  visible: timePickerVisible.value,
                  format: unref(timeFormat),
                  "parsed-value": innerDate.value,
                  onPick: handleTimePick
                }, null, 8, ["visible", "format", "parsed-value"])
              ], 2)), [
                [unref(ClickOutside), handleTimePickClose]
              ])
            ], 2)) : createCommentVNode("v-if", true),
            withDirectives(createBaseVNode("div", {
              class: normalizeClass([
                unref(dpNs).e("header"),
                (currentView.value === "year" || currentView.value === "month") && unref(dpNs).e("header--bordered")
              ])
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(dpNs).e("prev-btn"))
              }, [
                createBaseVNode("button", {
                  type: "button",
                  "aria-label": unref(t2)(`el.datepicker.prevYear`),
                  class: normalizeClass(["d-arrow-left", unref(ppNs).e("icon-btn")]),
                  onClick: _cache[2] || (_cache[2] = ($event) => moveByYear(false))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_2$4),
                withDirectives(createBaseVNode("button", {
                  type: "button",
                  "aria-label": unref(t2)(`el.datepicker.prevMonth`),
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-left"]),
                  onClick: _cache[3] || (_cache[3] = ($event) => moveByMonth(false))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_3$3), [
                  [vShow, currentView.value === "date"]
                ])
              ], 2),
              createBaseVNode("span", {
                role: "button",
                class: normalizeClass(unref(dpNs).e("header-label")),
                "aria-live": "polite",
                tabindex: "0",
                onKeydown: _cache[4] || (_cache[4] = withKeys(($event) => showPicker("year"), ["enter"])),
                onClick: _cache[5] || (_cache[5] = ($event) => showPicker("year"))
              }, toDisplayString(unref(yearLabel)), 35),
              withDirectives(createBaseVNode("span", {
                role: "button",
                "aria-live": "polite",
                tabindex: "0",
                class: normalizeClass([
                  unref(dpNs).e("header-label"),
                  { active: currentView.value === "month" }
                ]),
                onKeydown: _cache[6] || (_cache[6] = withKeys(($event) => showPicker("month"), ["enter"])),
                onClick: _cache[7] || (_cache[7] = ($event) => showPicker("month"))
              }, toDisplayString(unref(t2)(`el.datepicker.month${unref(month) + 1}`)), 35), [
                [vShow, currentView.value === "date"]
              ]),
              createBaseVNode("span", {
                class: normalizeClass(unref(dpNs).e("next-btn"))
              }, [
                withDirectives(createBaseVNode("button", {
                  type: "button",
                  "aria-label": unref(t2)(`el.datepicker.nextMonth`),
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-right"]),
                  onClick: _cache[8] || (_cache[8] = ($event) => moveByMonth(true))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_4$2), [
                  [vShow, currentView.value === "date"]
                ]),
                createBaseVNode("button", {
                  type: "button",
                  "aria-label": unref(t2)(`el.datepicker.nextYear`),
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: _cache[9] || (_cache[9] = ($event) => moveByYear(true))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_5$1)
              ], 2)
            ], 2), [
              [vShow, currentView.value !== "time"]
            ]),
            createBaseVNode("div", {
              class: normalizeClass(unref(ppNs).e("content")),
              onKeydown: handleKeydownTable
            }, [
              currentView.value === "date" ? (openBlock(), createBlock(DateTable, {
                key: 0,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                "selection-mode": unref(selectionMode),
                date: innerDate.value,
                "parsed-value": _ctx.parsedValue,
                "disabled-date": unref(disabledDate2),
                "cell-class-name": unref(cellClassName),
                onPick: handleDatePick
              }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date", "cell-class-name"])) : createCommentVNode("v-if", true),
              currentView.value === "year" ? (openBlock(), createBlock(YearTable, {
                key: 1,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                "selection-mode": unref(selectionMode),
                date: innerDate.value,
                "disabled-date": unref(disabledDate2),
                "parsed-value": _ctx.parsedValue,
                onPick: handleYearPick
              }, null, 8, ["selection-mode", "date", "disabled-date", "parsed-value"])) : createCommentVNode("v-if", true),
              currentView.value === "month" ? (openBlock(), createBlock(MonthTable, {
                key: 2,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                date: innerDate.value,
                "parsed-value": _ctx.parsedValue,
                "disabled-date": unref(disabledDate2),
                onPick: handleMonthPick
              }, null, 8, ["date", "parsed-value", "disabled-date"])) : createCommentVNode("v-if", true)
            ], 34)
          ], 2)
        ], 2),
        withDirectives(createBaseVNode("div", {
          class: normalizeClass(unref(ppNs).e("footer"))
        }, [
          withDirectives(createVNode(unref(ElButton), {
            text: "",
            size: "small",
            class: normalizeClass(unref(ppNs).e("link-btn")),
            disabled: unref(disabledNow),
            onClick: changeToNow
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(t2)("el.datepicker.now")), 1)
            ]),
            _: 1
          }, 8, ["class", "disabled"]), [
            [vShow, unref(selectionMode) !== "dates" && unref(selectionMode) !== "years"]
          ]),
          createVNode(unref(ElButton), {
            plain: "",
            size: "small",
            class: normalizeClass(unref(ppNs).e("link-btn")),
            disabled: unref(disabledConfirm),
            onClick: onConfirm
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(t2)("el.datepicker.confirm")), 1)
            ]),
            _: 1
          }, 8, ["class", "disabled"])
        ], 2), [
          [vShow, unref(footerVisible)]
        ])
      ], 2);
    };
  }
});
var DatePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["__file", "panel-date-pick.vue"]]);
const panelDateRangeProps = buildProps({
  ...panelSharedProps,
  ...panelRangeSharedProps
});
const useShortcut = (lang) => {
  const { emit } = getCurrentInstance();
  const attrs = useAttrs$1();
  const slots = useSlots();
  const handleShortcutClick = (shortcut) => {
    const shortcutValues = isFunction$1(shortcut.value) ? shortcut.value() : shortcut.value;
    if (shortcutValues) {
      emit("pick", [
        dayjs(shortcutValues[0]).locale(lang.value),
        dayjs(shortcutValues[1]).locale(lang.value)
      ]);
      return;
    }
    if (shortcut.onClick) {
      shortcut.onClick({
        attrs,
        slots,
        emit
      });
    }
  };
  return handleShortcutClick;
};
const useRangePicker = (props, {
  defaultValue,
  leftDate,
  rightDate,
  unit: unit2,
  onParsedValueChanged
}) => {
  const { emit } = getCurrentInstance();
  const { pickerNs } = inject(ROOT_PICKER_INJECTION_KEY);
  const drpNs = useNamespace("date-range-picker");
  const { t: t2, lang } = useLocale();
  const handleShortcutClick = useShortcut(lang);
  const minDate = ref();
  const maxDate = ref();
  const rangeState = ref({
    endDate: null,
    selecting: false
  });
  const handleChangeRange = (val) => {
    rangeState.value = val;
  };
  const handleRangeConfirm = (visible = false) => {
    const _minDate = unref(minDate);
    const _maxDate = unref(maxDate);
    if (isValidRange([_minDate, _maxDate])) {
      emit("pick", [_minDate, _maxDate], visible);
    }
  };
  const onSelect = (selecting) => {
    rangeState.value.selecting = selecting;
    if (!selecting) {
      rangeState.value.endDate = null;
    }
  };
  const restoreDefault = () => {
    const [start, end] = getDefaultValue(unref(defaultValue), {
      lang: unref(lang),
      unit: unit2,
      unlinkPanels: props.unlinkPanels
    });
    minDate.value = void 0;
    maxDate.value = void 0;
    leftDate.value = start;
    rightDate.value = end;
  };
  watch(defaultValue, (val) => {
    if (val) {
      restoreDefault();
    }
  }, { immediate: true });
  watch(() => props.parsedValue, (parsedValue2) => {
    if (isArray$1(parsedValue2) && parsedValue2.length === 2) {
      const [start, end] = parsedValue2;
      minDate.value = start;
      leftDate.value = start;
      maxDate.value = end;
      onParsedValueChanged(unref(minDate), unref(maxDate));
    } else {
      restoreDefault();
    }
  }, { immediate: true });
  return {
    minDate,
    maxDate,
    rangeState,
    lang,
    ppNs: pickerNs,
    drpNs,
    handleChangeRange,
    handleRangeConfirm,
    handleShortcutClick,
    onSelect,
    t: t2
  };
};
const _hoisted_1$5 = ["onClick"];
const _hoisted_2$3 = ["aria-label"];
const _hoisted_3$2 = ["aria-label"];
const _hoisted_4$1 = ["disabled", "aria-label"];
const _hoisted_5 = ["disabled", "aria-label"];
const _hoisted_6 = ["disabled", "aria-label"];
const _hoisted_7 = ["disabled", "aria-label"];
const _hoisted_8 = ["aria-label"];
const _hoisted_9 = ["aria-label"];
const unit$1 = "month";
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  __name: "panel-date-range",
  props: panelDateRangeProps,
  emits: [
    "pick",
    "set-picker-option",
    "calendar-change",
    "panel-change"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const pickerBase = inject("EP_PICKER_BASE");
    const { disabledDate: disabledDate2, cellClassName, format: format2, defaultTime, clearable } = pickerBase.props;
    const shortcuts = toRef(pickerBase.props, "shortcuts");
    const defaultValue = toRef(pickerBase.props, "defaultValue");
    const { lang } = useLocale();
    const leftDate = ref(dayjs().locale(lang.value));
    const rightDate = ref(dayjs().locale(lang.value).add(1, unit$1));
    const {
      minDate,
      maxDate,
      rangeState,
      ppNs,
      drpNs,
      handleChangeRange,
      handleRangeConfirm,
      handleShortcutClick,
      onSelect,
      t: t2
    } = useRangePicker(props, {
      defaultValue,
      leftDate,
      rightDate,
      unit: unit$1,
      onParsedValueChanged
    });
    const dateUserInput = ref({
      min: null,
      max: null
    });
    const timeUserInput = ref({
      min: null,
      max: null
    });
    const leftLabel = computed(() => {
      return `${leftDate.value.year()} ${t2("el.datepicker.year")} ${t2(`el.datepicker.month${leftDate.value.month() + 1}`)}`;
    });
    const rightLabel = computed(() => {
      return `${rightDate.value.year()} ${t2("el.datepicker.year")} ${t2(`el.datepicker.month${rightDate.value.month() + 1}`)}`;
    });
    const leftYear = computed(() => {
      return leftDate.value.year();
    });
    const leftMonth = computed(() => {
      return leftDate.value.month();
    });
    const rightYear = computed(() => {
      return rightDate.value.year();
    });
    const rightMonth = computed(() => {
      return rightDate.value.month();
    });
    const hasShortcuts = computed(() => !!shortcuts.value.length);
    const minVisibleDate = computed(() => {
      if (dateUserInput.value.min !== null)
        return dateUserInput.value.min;
      if (minDate.value)
        return minDate.value.format(dateFormat.value);
      return "";
    });
    const maxVisibleDate = computed(() => {
      if (dateUserInput.value.max !== null)
        return dateUserInput.value.max;
      if (maxDate.value || minDate.value)
        return (maxDate.value || minDate.value).format(dateFormat.value);
      return "";
    });
    const minVisibleTime = computed(() => {
      if (timeUserInput.value.min !== null)
        return timeUserInput.value.min;
      if (minDate.value)
        return minDate.value.format(timeFormat.value);
      return "";
    });
    const maxVisibleTime = computed(() => {
      if (timeUserInput.value.max !== null)
        return timeUserInput.value.max;
      if (maxDate.value || minDate.value)
        return (maxDate.value || minDate.value).format(timeFormat.value);
      return "";
    });
    const timeFormat = computed(() => {
      return props.timeFormat || extractTimeFormat(format2);
    });
    const dateFormat = computed(() => {
      return props.dateFormat || extractDateFormat(format2);
    });
    const isValidValue = (date5) => {
      return isValidRange(date5) && (disabledDate2 ? !disabledDate2(date5[0].toDate()) && !disabledDate2(date5[1].toDate()) : true);
    };
    const leftPrevYear = () => {
      leftDate.value = leftDate.value.subtract(1, "year");
      if (!props.unlinkPanels) {
        rightDate.value = leftDate.value.add(1, "month");
      }
      handlePanelChange("year");
    };
    const leftPrevMonth = () => {
      leftDate.value = leftDate.value.subtract(1, "month");
      if (!props.unlinkPanels) {
        rightDate.value = leftDate.value.add(1, "month");
      }
      handlePanelChange("month");
    };
    const rightNextYear = () => {
      if (!props.unlinkPanels) {
        leftDate.value = leftDate.value.add(1, "year");
        rightDate.value = leftDate.value.add(1, "month");
      } else {
        rightDate.value = rightDate.value.add(1, "year");
      }
      handlePanelChange("year");
    };
    const rightNextMonth = () => {
      if (!props.unlinkPanels) {
        leftDate.value = leftDate.value.add(1, "month");
        rightDate.value = leftDate.value.add(1, "month");
      } else {
        rightDate.value = rightDate.value.add(1, "month");
      }
      handlePanelChange("month");
    };
    const leftNextYear = () => {
      leftDate.value = leftDate.value.add(1, "year");
      handlePanelChange("year");
    };
    const leftNextMonth = () => {
      leftDate.value = leftDate.value.add(1, "month");
      handlePanelChange("month");
    };
    const rightPrevYear = () => {
      rightDate.value = rightDate.value.subtract(1, "year");
      handlePanelChange("year");
    };
    const rightPrevMonth = () => {
      rightDate.value = rightDate.value.subtract(1, "month");
      handlePanelChange("month");
    };
    const handlePanelChange = (mode) => {
      emit("panel-change", [leftDate.value.toDate(), rightDate.value.toDate()], mode);
    };
    const enableMonthArrow = computed(() => {
      const nextMonth = (leftMonth.value + 1) % 12;
      const yearOffset = leftMonth.value + 1 >= 12 ? 1 : 0;
      return props.unlinkPanels && new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);
    });
    const enableYearArrow = computed(() => {
      return props.unlinkPanels && rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;
    });
    const btnDisabled = computed(() => {
      return !(minDate.value && maxDate.value && !rangeState.value.selecting && isValidRange([minDate.value, maxDate.value]));
    });
    const showTime = computed(() => props.type === "datetime" || props.type === "datetimerange");
    const formatEmit = (emitDayjs, index) => {
      if (!emitDayjs)
        return;
      if (defaultTime) {
        const defaultTimeD = dayjs(defaultTime[index] || defaultTime).locale(lang.value);
        return defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
      }
      return emitDayjs;
    };
    const handleRangePick = (val, close = true) => {
      const min_ = val.minDate;
      const max_ = val.maxDate;
      const minDate_ = formatEmit(min_, 0);
      const maxDate_ = formatEmit(max_, 1);
      if (maxDate.value === maxDate_ && minDate.value === minDate_) {
        return;
      }
      emit("calendar-change", [min_.toDate(), max_ && max_.toDate()]);
      maxDate.value = maxDate_;
      minDate.value = minDate_;
      if (!close || showTime.value)
        return;
      handleRangeConfirm();
    };
    const minTimePickerVisible = ref(false);
    const maxTimePickerVisible = ref(false);
    const handleMinTimeClose = () => {
      minTimePickerVisible.value = false;
    };
    const handleMaxTimeClose = () => {
      maxTimePickerVisible.value = false;
    };
    const handleDateInput = (value, type4) => {
      dateUserInput.value[type4] = value;
      const parsedValueD = dayjs(value, dateFormat.value).locale(lang.value);
      if (parsedValueD.isValid()) {
        if (disabledDate2 && disabledDate2(parsedValueD.toDate())) {
          return;
        }
        if (type4 === "min") {
          leftDate.value = parsedValueD;
          minDate.value = (minDate.value || leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
          if (!props.unlinkPanels && (!maxDate.value || maxDate.value.isBefore(minDate.value))) {
            rightDate.value = parsedValueD.add(1, "month");
            maxDate.value = minDate.value.add(1, "month");
          }
        } else {
          rightDate.value = parsedValueD;
          maxDate.value = (maxDate.value || rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
          if (!props.unlinkPanels && (!minDate.value || minDate.value.isAfter(maxDate.value))) {
            leftDate.value = parsedValueD.subtract(1, "month");
            minDate.value = maxDate.value.subtract(1, "month");
          }
        }
      }
    };
    const handleDateChange = (_2, type4) => {
      dateUserInput.value[type4] = null;
    };
    const handleTimeInput = (value, type4) => {
      timeUserInput.value[type4] = value;
      const parsedValueD = dayjs(value, timeFormat.value).locale(lang.value);
      if (parsedValueD.isValid()) {
        if (type4 === "min") {
          minTimePickerVisible.value = true;
          minDate.value = (minDate.value || leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
          if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
            maxDate.value = minDate.value;
          }
        } else {
          maxTimePickerVisible.value = true;
          maxDate.value = (maxDate.value || rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
          rightDate.value = maxDate.value;
          if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
            minDate.value = maxDate.value;
          }
        }
      }
    };
    const handleTimeChange = (value, type4) => {
      timeUserInput.value[type4] = null;
      if (type4 === "min") {
        leftDate.value = minDate.value;
        minTimePickerVisible.value = false;
      } else {
        rightDate.value = maxDate.value;
        maxTimePickerVisible.value = false;
      }
    };
    const handleMinTimePick = (value, visible, first) => {
      if (timeUserInput.value.min)
        return;
      if (value) {
        leftDate.value = value;
        minDate.value = (minDate.value || leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
      }
      if (!first) {
        minTimePickerVisible.value = visible;
      }
      if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
        maxDate.value = minDate.value;
        rightDate.value = value;
      }
    };
    const handleMaxTimePick = (value, visible, first) => {
      if (timeUserInput.value.max)
        return;
      if (value) {
        rightDate.value = value;
        maxDate.value = (maxDate.value || rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
      }
      if (!first) {
        maxTimePickerVisible.value = visible;
      }
      if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
        minDate.value = maxDate.value;
      }
    };
    const handleClear = () => {
      leftDate.value = getDefaultValue(unref(defaultValue), {
        lang: unref(lang),
        unit: "month",
        unlinkPanels: props.unlinkPanels
      })[0];
      rightDate.value = leftDate.value.add(1, "month");
      emit("pick", null);
    };
    const formatToString = (value) => {
      return isArray$1(value) ? value.map((_2) => _2.format(format2)) : value.format(format2);
    };
    const parseUserInput = (value) => {
      return isArray$1(value) ? value.map((_2) => dayjs(_2, format2).locale(lang.value)) : dayjs(value, format2).locale(lang.value);
    };
    function onParsedValueChanged(minDate2, maxDate2) {
      if (props.unlinkPanels && maxDate2) {
        const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
        const minDateMonth = (minDate2 == null ? void 0 : minDate2.month()) || 0;
        const maxDateYear = maxDate2.year();
        const maxDateMonth = maxDate2.month();
        rightDate.value = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? maxDate2.add(1, unit$1) : maxDate2;
      } else {
        rightDate.value = leftDate.value.add(1, unit$1);
        if (maxDate2) {
          rightDate.value = rightDate.value.hour(maxDate2.hour()).minute(maxDate2.minute()).second(maxDate2.second());
        }
      }
    }
    emit("set-picker-option", ["isValidValue", isValidValue]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["handleClear", handleClear]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(ppNs).b(),
          unref(drpNs).b(),
          {
            "has-sidebar": _ctx.$slots.sidebar || unref(hasShortcuts),
            "has-time": unref(showTime)
          }
        ])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(ppNs).e("body-wrapper"))
        }, [
          renderSlot(_ctx.$slots, "sidebar", {
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }),
          unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
              return openBlock(), createElementBlock("button", {
                key,
                type: "button",
                class: normalizeClass(unref(ppNs).e("shortcut")),
                onClick: ($event) => unref(handleShortcutClick)(shortcut)
              }, toDisplayString(shortcut.text), 11, _hoisted_1$5);
            }), 128))
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            class: normalizeClass(unref(ppNs).e("body"))
          }, [
            unref(showTime) ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(drpNs).e("time-header"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(drpNs).e("editors-wrap"))
              }, [
                createBaseVNode("span", {
                  class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                }, [
                  createVNode(unref(ElInput), {
                    size: "small",
                    disabled: unref(rangeState).selecting,
                    placeholder: unref(t2)("el.datepicker.startDate"),
                    class: normalizeClass(unref(drpNs).e("editor")),
                    "model-value": unref(minVisibleDate),
                    "validate-event": false,
                    onInput: _cache[0] || (_cache[0] = (val) => handleDateInput(val, "min")),
                    onChange: _cache[1] || (_cache[1] = (val) => handleDateChange(val, "min"))
                  }, null, 8, ["disabled", "placeholder", "class", "model-value"])
                ], 2),
                withDirectives((openBlock(), createElementBlock("span", {
                  class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                }, [
                  createVNode(unref(ElInput), {
                    size: "small",
                    class: normalizeClass(unref(drpNs).e("editor")),
                    disabled: unref(rangeState).selecting,
                    placeholder: unref(t2)("el.datepicker.startTime"),
                    "model-value": unref(minVisibleTime),
                    "validate-event": false,
                    onFocus: _cache[2] || (_cache[2] = ($event) => minTimePickerVisible.value = true),
                    onInput: _cache[3] || (_cache[3] = (val) => handleTimeInput(val, "min")),
                    onChange: _cache[4] || (_cache[4] = (val) => handleTimeChange(val, "min"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value"]),
                  createVNode(unref(TimePickPanel), {
                    visible: minTimePickerVisible.value,
                    format: unref(timeFormat),
                    "datetime-role": "start",
                    "parsed-value": leftDate.value,
                    onPick: handleMinTimePick
                  }, null, 8, ["visible", "format", "parsed-value"])
                ], 2)), [
                  [unref(ClickOutside), handleMinTimeClose]
                ])
              ], 2),
              createBaseVNode("span", null, [
                createVNode(unref(ElIcon), null, {
                  default: withCtx(() => [
                    createVNode(unref(arrow_right_default))
                  ]),
                  _: 1
                })
              ]),
              createBaseVNode("span", {
                class: normalizeClass([unref(drpNs).e("editors-wrap"), "is-right"])
              }, [
                createBaseVNode("span", {
                  class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                }, [
                  createVNode(unref(ElInput), {
                    size: "small",
                    class: normalizeClass(unref(drpNs).e("editor")),
                    disabled: unref(rangeState).selecting,
                    placeholder: unref(t2)("el.datepicker.endDate"),
                    "model-value": unref(maxVisibleDate),
                    readonly: !unref(minDate),
                    "validate-event": false,
                    onInput: _cache[5] || (_cache[5] = (val) => handleDateInput(val, "max")),
                    onChange: _cache[6] || (_cache[6] = (val) => handleDateChange(val, "max"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"])
                ], 2),
                withDirectives((openBlock(), createElementBlock("span", {
                  class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                }, [
                  createVNode(unref(ElInput), {
                    size: "small",
                    class: normalizeClass(unref(drpNs).e("editor")),
                    disabled: unref(rangeState).selecting,
                    placeholder: unref(t2)("el.datepicker.endTime"),
                    "model-value": unref(maxVisibleTime),
                    readonly: !unref(minDate),
                    "validate-event": false,
                    onFocus: _cache[7] || (_cache[7] = ($event) => unref(minDate) && (maxTimePickerVisible.value = true)),
                    onInput: _cache[8] || (_cache[8] = (val) => handleTimeInput(val, "max")),
                    onChange: _cache[9] || (_cache[9] = (val) => handleTimeChange(val, "max"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"]),
                  createVNode(unref(TimePickPanel), {
                    "datetime-role": "end",
                    visible: maxTimePickerVisible.value,
                    format: unref(timeFormat),
                    "parsed-value": rightDate.value,
                    onPick: handleMaxTimePick
                  }, null, 8, ["visible", "format", "parsed-value"])
                ], 2)), [
                  [unref(ClickOutside), handleMaxTimeClose]
                ])
              ], 2)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-left"])
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(drpNs).e("header"))
              }, [
                createBaseVNode("button", {
                  type: "button",
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                  "aria-label": unref(t2)(`el.datepicker.prevYear`),
                  onClick: leftPrevYear
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_2$3),
                createBaseVNode("button", {
                  type: "button",
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-left"]),
                  "aria-label": unref(t2)(`el.datepicker.prevMonth`),
                  onClick: leftPrevMonth
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_3$2),
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  disabled: !unref(enableYearArrow),
                  class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-right"]),
                  "aria-label": unref(t2)(`el.datepicker.nextYear`),
                  onClick: leftNextYear
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_4$1)) : createCommentVNode("v-if", true),
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 1,
                  type: "button",
                  disabled: !unref(enableMonthArrow),
                  class: normalizeClass([[
                    unref(ppNs).e("icon-btn"),
                    { "is-disabled": !unref(enableMonthArrow) }
                  ], "arrow-right"]),
                  "aria-label": unref(t2)(`el.datepicker.nextMonth`),
                  onClick: leftNextMonth
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_5)) : createCommentVNode("v-if", true),
                createBaseVNode("div", null, toDisplayString(unref(leftLabel)), 1)
              ], 2),
              createVNode(DateTable, {
                "selection-mode": "range",
                date: leftDate.value,
                "min-date": unref(minDate),
                "max-date": unref(maxDate),
                "range-state": unref(rangeState),
                "disabled-date": unref(disabledDate2),
                "cell-class-name": unref(cellClassName),
                onChangerange: unref(handleChangeRange),
                onPick: handleRangePick,
                onSelect: unref(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-right"])
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(drpNs).e("header"))
              }, [
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  disabled: !unref(enableYearArrow),
                  class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-left"]),
                  "aria-label": unref(t2)(`el.datepicker.prevYear`),
                  onClick: rightPrevYear
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_6)) : createCommentVNode("v-if", true),
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 1,
                  type: "button",
                  disabled: !unref(enableMonthArrow),
                  class: normalizeClass([[
                    unref(ppNs).e("icon-btn"),
                    { "is-disabled": !unref(enableMonthArrow) }
                  ], "arrow-left"]),
                  "aria-label": unref(t2)(`el.datepicker.prevMonth`),
                  onClick: rightPrevMonth
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_7)) : createCommentVNode("v-if", true),
                createBaseVNode("button", {
                  type: "button",
                  "aria-label": unref(t2)(`el.datepicker.nextYear`),
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: rightNextYear
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_8),
                createBaseVNode("button", {
                  type: "button",
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-right"]),
                  "aria-label": unref(t2)(`el.datepicker.nextMonth`),
                  onClick: rightNextMonth
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_9),
                createBaseVNode("div", null, toDisplayString(unref(rightLabel)), 1)
              ], 2),
              createVNode(DateTable, {
                "selection-mode": "range",
                date: rightDate.value,
                "min-date": unref(minDate),
                "max-date": unref(maxDate),
                "range-state": unref(rangeState),
                "disabled-date": unref(disabledDate2),
                "cell-class-name": unref(cellClassName),
                onChangerange: unref(handleChangeRange),
                onPick: handleRangePick,
                onSelect: unref(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
            ], 2)
          ], 2)
        ], 2),
        unref(showTime) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(ppNs).e("footer"))
        }, [
          unref(clearable) ? (openBlock(), createBlock(unref(ElButton), {
            key: 0,
            text: "",
            size: "small",
            class: normalizeClass(unref(ppNs).e("link-btn")),
            onClick: handleClear
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(t2)("el.datepicker.clear")), 1)
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("v-if", true),
          createVNode(unref(ElButton), {
            plain: "",
            size: "small",
            class: normalizeClass(unref(ppNs).e("link-btn")),
            disabled: unref(btnDisabled),
            onClick: _cache[10] || (_cache[10] = ($event) => unref(handleRangeConfirm)(false))
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(t2)("el.datepicker.confirm")), 1)
            ]),
            _: 1
          }, 8, ["class", "disabled"])
        ], 2)) : createCommentVNode("v-if", true)
      ], 2);
    };
  }
});
var DateRangePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["__file", "panel-date-range.vue"]]);
const panelMonthRangeProps = buildProps({
  ...panelRangeSharedProps
});
const panelMonthRangeEmits = [
  "pick",
  "set-picker-option",
  "calendar-change"
];
const useMonthRangeHeader = ({
  unlinkPanels,
  leftDate,
  rightDate
}) => {
  const { t: t2 } = useLocale();
  const leftPrevYear = () => {
    leftDate.value = leftDate.value.subtract(1, "year");
    if (!unlinkPanels.value) {
      rightDate.value = rightDate.value.subtract(1, "year");
    }
  };
  const rightNextYear = () => {
    if (!unlinkPanels.value) {
      leftDate.value = leftDate.value.add(1, "year");
    }
    rightDate.value = rightDate.value.add(1, "year");
  };
  const leftNextYear = () => {
    leftDate.value = leftDate.value.add(1, "year");
  };
  const rightPrevYear = () => {
    rightDate.value = rightDate.value.subtract(1, "year");
  };
  const leftLabel = computed(() => {
    return `${leftDate.value.year()} ${t2("el.datepicker.year")}`;
  });
  const rightLabel = computed(() => {
    return `${rightDate.value.year()} ${t2("el.datepicker.year")}`;
  });
  const leftYear = computed(() => {
    return leftDate.value.year();
  });
  const rightYear = computed(() => {
    return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();
  });
  return {
    leftPrevYear,
    rightNextYear,
    leftNextYear,
    rightPrevYear,
    leftLabel,
    rightLabel,
    leftYear,
    rightYear
  };
};
const _hoisted_1$4 = ["onClick"];
const _hoisted_2$2 = ["disabled"];
const _hoisted_3$1 = ["disabled"];
const unit = "year";
const __default__$1 = defineComponent({
  name: "DatePickerMonthRange"
});
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  ...__default__$1,
  props: panelMonthRangeProps,
  emits: panelMonthRangeEmits,
  setup(__props, { emit }) {
    const props = __props;
    const { lang } = useLocale();
    const pickerBase = inject("EP_PICKER_BASE");
    const { shortcuts, disabledDate: disabledDate2, format: format2 } = pickerBase.props;
    const defaultValue = toRef(pickerBase.props, "defaultValue");
    const leftDate = ref(dayjs().locale(lang.value));
    const rightDate = ref(dayjs().locale(lang.value).add(1, unit));
    const {
      minDate,
      maxDate,
      rangeState,
      ppNs,
      drpNs,
      handleChangeRange,
      handleRangeConfirm,
      handleShortcutClick,
      onSelect
    } = useRangePicker(props, {
      defaultValue,
      leftDate,
      rightDate,
      unit,
      onParsedValueChanged
    });
    const hasShortcuts = computed(() => !!shortcuts.length);
    const {
      leftPrevYear,
      rightNextYear,
      leftNextYear,
      rightPrevYear,
      leftLabel,
      rightLabel,
      leftYear,
      rightYear
    } = useMonthRangeHeader({
      unlinkPanels: toRef(props, "unlinkPanels"),
      leftDate,
      rightDate
    });
    const enableYearArrow = computed(() => {
      return props.unlinkPanels && rightYear.value > leftYear.value + 1;
    });
    const handleRangePick = (val, close = true) => {
      const minDate_ = val.minDate;
      const maxDate_ = val.maxDate;
      if (maxDate.value === maxDate_ && minDate.value === minDate_) {
        return;
      }
      emit("calendar-change", [minDate_.toDate(), maxDate_ && maxDate_.toDate()]);
      maxDate.value = maxDate_;
      minDate.value = minDate_;
      if (!close)
        return;
      handleRangeConfirm();
    };
    const formatToString = (days) => {
      return days.map((day) => day.format(format2));
    };
    function onParsedValueChanged(minDate2, maxDate2) {
      if (props.unlinkPanels && maxDate2) {
        const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
        const maxDateYear = maxDate2.year();
        rightDate.value = minDateYear === maxDateYear ? maxDate2.add(1, unit) : maxDate2;
      } else {
        rightDate.value = leftDate.value.add(1, unit);
      }
    }
    emit("set-picker-option", ["formatToString", formatToString]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(ppNs).b(),
          unref(drpNs).b(),
          {
            "has-sidebar": Boolean(_ctx.$slots.sidebar) || unref(hasShortcuts)
          }
        ])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(ppNs).e("body-wrapper"))
        }, [
          renderSlot(_ctx.$slots, "sidebar", {
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }),
          unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ppNs).e("sidebar"))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
              return openBlock(), createElementBlock("button", {
                key,
                type: "button",
                class: normalizeClass(unref(ppNs).e("shortcut")),
                onClick: ($event) => unref(handleShortcutClick)(shortcut)
              }, toDisplayString(shortcut.text), 11, _hoisted_1$4);
            }), 128))
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            class: normalizeClass(unref(ppNs).e("body"))
          }, [
            createBaseVNode("div", {
              class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-left"])
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(drpNs).e("header"))
              }, [
                createBaseVNode("button", {
                  type: "button",
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                  onClick: _cache[0] || (_cache[0] = (...args) => unref(leftPrevYear) && unref(leftPrevYear)(...args))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 2),
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  disabled: !unref(enableYearArrow),
                  class: normalizeClass([[
                    unref(ppNs).e("icon-btn"),
                    { [unref(ppNs).is("disabled")]: !unref(enableYearArrow) }
                  ], "d-arrow-right"]),
                  onClick: _cache[1] || (_cache[1] = (...args) => unref(leftNextYear) && unref(leftNextYear)(...args))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_2$2)) : createCommentVNode("v-if", true),
                createBaseVNode("div", null, toDisplayString(unref(leftLabel)), 1)
              ], 2),
              createVNode(MonthTable, {
                "selection-mode": "range",
                date: leftDate.value,
                "min-date": unref(minDate),
                "max-date": unref(maxDate),
                "range-state": unref(rangeState),
                "disabled-date": unref(disabledDate2),
                onChangerange: unref(handleChangeRange),
                onPick: handleRangePick,
                onSelect: unref(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-right"])
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(drpNs).e("header"))
              }, [
                _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  disabled: !unref(enableYearArrow),
                  class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-left"]),
                  onClick: _cache[2] || (_cache[2] = (...args) => unref(rightPrevYear) && unref(rightPrevYear)(...args))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_left_default))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_3$1)) : createCommentVNode("v-if", true),
                createBaseVNode("button", {
                  type: "button",
                  class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: _cache[3] || (_cache[3] = (...args) => unref(rightNextYear) && unref(rightNextYear)(...args))
                }, [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(d_arrow_right_default))
                    ]),
                    _: 1
                  })
                ], 2),
                createBaseVNode("div", null, toDisplayString(unref(rightLabel)), 1)
              ], 2),
              createVNode(MonthTable, {
                "selection-mode": "range",
                date: rightDate.value,
                "min-date": unref(minDate),
                "max-date": unref(maxDate),
                "range-state": unref(rangeState),
                "disabled-date": unref(disabledDate2),
                onChangerange: unref(handleChangeRange),
                onPick: handleRangePick,
                onSelect: unref(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
            ], 2)
          ], 2)
        ], 2)
      ], 2);
    };
  }
});
var MonthRangePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["__file", "panel-month-range.vue"]]);
const getPanel = function(type4) {
  switch (type4) {
    case "daterange":
    case "datetimerange": {
      return DateRangePickPanel;
    }
    case "monthrange": {
      return MonthRangePickPanel;
    }
    default: {
      return DatePickPanel;
    }
  }
};
dayjs.extend(localeData);
dayjs.extend(advancedFormat);
dayjs.extend(customParseFormat);
dayjs.extend(weekOfYear);
dayjs.extend(weekYear);
dayjs.extend(dayOfYear);
dayjs.extend(isSameOrAfter);
dayjs.extend(isSameOrBefore);
var DatePicker = defineComponent({
  name: "ElDatePicker",
  install: null,
  props: datePickerProps,
  emits: ["update:modelValue"],
  setup(props, {
    expose,
    emit,
    slots
  }) {
    const ns = useNamespace("picker-panel");
    provide("ElPopperOptions", reactive(toRef(props, "popperOptions")));
    provide(ROOT_PICKER_INJECTION_KEY, {
      slots,
      pickerNs: ns
    });
    const commonPicker = ref();
    const refProps = {
      focus: (focusStartInput = true) => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.focus(focusStartInput);
      },
      handleOpen: () => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleOpen();
      },
      handleClose: () => {
        var _a2;
        (_a2 = commonPicker.value) == null ? void 0 : _a2.handleClose();
      }
    };
    expose(refProps);
    const onModelValueUpdated = (val) => {
      emit("update:modelValue", val);
    };
    return () => {
      var _a2;
      const format2 = (_a2 = props.format) != null ? _a2 : DEFAULT_FORMATS_DATEPICKER[props.type] || DEFAULT_FORMATS_DATE;
      const Component = getPanel(props.type);
      return createVNode(CommonPicker, mergeProps(props, {
        "format": format2,
        "type": props.type,
        "ref": commonPicker,
        "onUpdate:modelValue": onModelValueUpdated
      }), {
        default: (scopedProps) => createVNode(Component, scopedProps, null),
        "range-separator": slots["range-separator"]
      });
    };
  }
});
const _DatePicker = DatePicker;
_DatePicker.install = (app) => {
  app.component(_DatePicker.name, _DatePicker);
};
const ElDatePicker = _DatePicker;
const selectGroupKey = Symbol("ElSelectGroup");
const selectKey = Symbol("ElSelect");
function useOption(props, states) {
  const select = inject(selectKey);
  const selectGroup = inject(selectGroupKey, { disabled: false });
  const itemSelected = computed(() => {
    if (select.props.multiple) {
      return contains(select.props.modelValue, props.value);
    } else {
      return contains([select.props.modelValue], props.value);
    }
  });
  const limitReached = computed(() => {
    if (select.props.multiple) {
      const modelValue = select.props.modelValue || [];
      return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;
    } else {
      return false;
    }
  });
  const currentLabel = computed(() => {
    return props.label || (isObject$1(props.value) ? "" : props.value);
  });
  const currentValue = computed(() => {
    return props.value || props.label || "";
  });
  const isDisabled = computed(() => {
    return props.disabled || states.groupDisabled || limitReached.value;
  });
  const instance = getCurrentInstance();
  const contains = (arr = [], target) => {
    if (!isObject$1(props.value)) {
      return arr && arr.includes(target);
    } else {
      const valueKey = select.props.valueKey;
      return arr && arr.some((item) => {
        return toRaw(get(item, valueKey)) === get(target, valueKey);
      });
    }
  };
  const hoverItem = () => {
    if (!props.disabled && !selectGroup.disabled) {
      select.states.hoveringIndex = select.optionsArray.indexOf(instance.proxy);
    }
  };
  const updateOption = (query) => {
    const regexp4 = new RegExp(escapeStringRegexp(query), "i");
    states.visible = regexp4.test(currentLabel.value) || props.created;
  };
  watch(() => currentLabel.value, () => {
    if (!props.created && !select.props.remote)
      select.setSelected();
  });
  watch(() => props.value, (val, oldVal) => {
    const { remote, valueKey } = select.props;
    if (!isEqual(val, oldVal)) {
      select.onOptionDestroy(oldVal, instance.proxy);
      select.onOptionCreate(instance.proxy);
    }
    if (!props.created && !remote) {
      if (valueKey && isObject$1(val) && isObject$1(oldVal) && val[valueKey] === oldVal[valueKey]) {
        return;
      }
      select.setSelected();
    }
  });
  watch(() => selectGroup.disabled, () => {
    states.groupDisabled = selectGroup.disabled;
  }, { immediate: true });
  return {
    select,
    currentLabel,
    currentValue,
    itemSelected,
    isDisabled,
    hoverItem,
    updateOption
  };
}
const _sfc_main$7 = defineComponent({
  name: "ElOption",
  componentName: "ElOption",
  props: {
    value: {
      required: true,
      type: [String, Number, Boolean, Object]
    },
    label: [String, Number],
    created: Boolean,
    disabled: Boolean
  },
  setup(props) {
    const ns = useNamespace("select");
    const id = useId();
    const containerKls = computed(() => [
      ns.be("dropdown", "item"),
      ns.is("disabled", unref(isDisabled)),
      ns.is("selected", unref(itemSelected)),
      ns.is("hovering", unref(hover))
    ]);
    const states = reactive({
      index: -1,
      groupDisabled: false,
      visible: true,
      hover: false
    });
    const {
      currentLabel,
      itemSelected,
      isDisabled,
      select,
      hoverItem,
      updateOption
    } = useOption(props, states);
    const { visible, hover } = toRefs(states);
    const vm = getCurrentInstance().proxy;
    select.onOptionCreate(vm);
    onBeforeUnmount(() => {
      const key = vm.value;
      const { selected } = select.states;
      const selectedOptions = select.props.multiple ? selected : [selected];
      const doesSelected = selectedOptions.some((item) => {
        return item.value === vm.value;
      });
      nextTick(() => {
        if (select.states.cachedOptions.get(key) === vm && !doesSelected) {
          select.states.cachedOptions.delete(key);
        }
      });
      select.onOptionDestroy(key, vm);
    });
    function selectOptionClick() {
      if (props.disabled !== true && states.groupDisabled !== true) {
        select.handleOptionSelect(vm);
      }
    }
    return {
      ns,
      id,
      containerKls,
      currentLabel,
      itemSelected,
      isDisabled,
      select,
      hoverItem,
      updateOption,
      visible,
      hover,
      selectOptionClick,
      states
    };
  }
});
const _hoisted_1$3 = ["id", "aria-disabled", "aria-selected"];
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  return withDirectives((openBlock(), createElementBlock("li", {
    id: _ctx.id,
    class: normalizeClass(_ctx.containerKls),
    role: "option",
    "aria-disabled": _ctx.isDisabled || void 0,
    "aria-selected": _ctx.itemSelected,
    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),
    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createBaseVNode("span", null, toDisplayString(_ctx.currentLabel), 1)
    ])
  ], 42, _hoisted_1$3)), [
    [vShow, _ctx.visible]
  ]);
}
var Option = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$5], ["__file", "option.vue"]]);
const _sfc_main$6 = defineComponent({
  name: "ElSelectDropdown",
  componentName: "ElSelectDropdown",
  setup() {
    const select = inject(selectKey);
    const ns = useNamespace("select");
    const popperClass = computed(() => select.props.popperClass);
    const isMultiple = computed(() => select.props.multiple);
    const isFitInputWidth = computed(() => select.props.fitInputWidth);
    const minWidth = ref("");
    function updateMinWidth() {
      var _a2;
      minWidth.value = `${(_a2 = select.selectRef) == null ? void 0 : _a2.offsetWidth}px`;
    }
    onMounted(() => {
      updateMinWidth();
      useResizeObserver(select.selectRef, updateMinWidth);
    });
    return {
      ns,
      minWidth,
      popperClass,
      isMultiple,
      isFitInputWidth
    };
  }
});
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),
    style: normalizeStyle({ [_ctx.isFitInputWidth ? "width" : "minWidth"]: _ctx.minWidth })
  }, [
    _ctx.$slots.header ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(_ctx.ns.be("dropdown", "header"))
    }, [
      renderSlot(_ctx.$slots, "header")
    ], 2)) : createCommentVNode("v-if", true),
    renderSlot(_ctx.$slots, "default"),
    _ctx.$slots.footer ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(_ctx.ns.be("dropdown", "footer"))
    }, [
      renderSlot(_ctx.$slots, "footer")
    ], 2)) : createCommentVNode("v-if", true)
  ], 6);
}
var ElSelectMenu = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$4], ["__file", "select-dropdown.vue"]]);
function useInput(handleInput) {
  const isComposing = ref(false);
  const handleCompositionStart = () => {
    isComposing.value = true;
  };
  const handleCompositionUpdate = (event) => {
    const text = event.target.value;
    const lastCharacter = text[text.length - 1] || "";
    isComposing.value = !isKorean(lastCharacter);
  };
  const handleCompositionEnd = (event) => {
    if (isComposing.value) {
      isComposing.value = false;
      if (isFunction$1(handleInput)) {
        handleInput(event);
      }
    }
  };
  return {
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  };
}
const MINIMUM_INPUT_WIDTH = 11;
const useSelect = (props, emit) => {
  const { t: t2 } = useLocale();
  const contentId = useId();
  const nsSelect = useNamespace("select");
  const nsInput = useNamespace("input");
  const states = reactive({
    inputValue: "",
    options: /* @__PURE__ */ new Map(),
    cachedOptions: /* @__PURE__ */ new Map(),
    disabledOptions: /* @__PURE__ */ new Map(),
    optionValues: [],
    selected: props.multiple ? [] : {},
    selectionWidth: 0,
    calculatorWidth: 0,
    collapseItemWidth: 0,
    selectedLabel: "",
    hoveringIndex: -1,
    previousQuery: null,
    inputHovering: false,
    menuVisibleOnFocus: false,
    isBeforeHide: false
  });
  const selectRef = ref(null);
  const selectionRef = ref(null);
  const tooltipRef = ref(null);
  const tagTooltipRef = ref(null);
  const inputRef = ref(null);
  const calculatorRef = ref(null);
  const prefixRef = ref(null);
  const suffixRef = ref(null);
  const menuRef = ref(null);
  const tagMenuRef = ref(null);
  const collapseItemRef = ref(null);
  const scrollbarRef = ref(null);
  const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(inputRef, {
    afterFocus() {
      if (props.automaticDropdown && !expanded.value) {
        expanded.value = true;
        states.menuVisibleOnFocus = true;
      }
    },
    beforeBlur(event) {
      var _a2, _b;
      return ((_a2 = tooltipRef.value) == null ? void 0 : _a2.isFocusInsideContent(event)) || ((_b = tagTooltipRef.value) == null ? void 0 : _b.isFocusInsideContent(event));
    },
    afterBlur() {
      expanded.value = false;
      states.menuVisibleOnFocus = false;
    }
  });
  const expanded = ref(false);
  const hoverOption = ref();
  const { form, formItem } = useFormItem();
  const { inputId } = useFormItemInputId(props, {
    formItemContext: formItem
  });
  const selectDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));
  const hasEmptyStringOption = computed(() => optionsArray.value.some((option) => option.value === ""));
  const hasModelValue = computed(() => {
    return props.multiple ? isArray$1(props.modelValue) && props.modelValue.length > 0 : !isNil(props.modelValue) && (props.modelValue !== "" || hasEmptyStringOption.value);
  });
  const showClose = computed(() => {
    const criteria = props.clearable && !selectDisabled.value && states.inputHovering && hasModelValue.value;
    return criteria;
  });
  const iconComponent = computed(() => props.remote && props.filterable && !props.remoteShowSuffix ? "" : props.suffixIcon);
  const iconReverse = computed(() => nsSelect.is("reverse", iconComponent.value && expanded.value));
  const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || "");
  const validateIcon = computed(() => ValidateComponentsMap[validateState.value]);
  const debounce$1 = computed(() => props.remote ? 300 : 0);
  const emptyText = computed(() => {
    if (props.loading) {
      return props.loadingText || t2("el.select.loading");
    } else {
      if (props.remote && !states.inputValue && states.options.size === 0)
        return false;
      if (props.filterable && states.inputValue && states.options.size > 0 && filteredOptionsCount.value === 0) {
        return props.noMatchText || t2("el.select.noMatch");
      }
      if (states.options.size === 0) {
        return props.noDataText || t2("el.select.noData");
      }
    }
    return null;
  });
  const filteredOptionsCount = computed(() => optionsArray.value.filter((option) => option.visible).length);
  const optionsArray = computed(() => {
    const list = Array.from(states.options.values());
    const newList = [];
    states.optionValues.forEach((item) => {
      const index = list.findIndex((i) => i.value === item);
      if (index > -1) {
        newList.push(list[index]);
      }
    });
    return newList.length >= list.length ? newList : list;
  });
  const cachedOptionsArray = computed(() => Array.from(states.cachedOptions.values()));
  const showNewOption = computed(() => {
    const hasExistingOption = optionsArray.value.filter((option) => {
      return !option.created;
    }).some((option) => {
      return option.currentLabel === states.inputValue;
    });
    return props.filterable && props.allowCreate && states.inputValue !== "" && !hasExistingOption;
  });
  const updateOptions = () => {
    if (props.filterable && isFunction$1(props.filterMethod))
      return;
    if (props.filterable && props.remote && isFunction$1(props.remoteMethod))
      return;
    optionsArray.value.forEach((option) => {
      option.updateOption(states.inputValue);
    });
  };
  const selectSize = useFormSize();
  const collapseTagSize = computed(() => ["small"].includes(selectSize.value) ? "small" : "default");
  const dropdownMenuVisible = computed({
    get() {
      return expanded.value && emptyText.value !== false;
    },
    set(val) {
      expanded.value = val;
    }
  });
  const shouldShowPlaceholder = computed(() => {
    if (isArray$1(props.modelValue)) {
      return props.modelValue.length === 0 && !states.inputValue;
    }
    return props.filterable ? !states.inputValue : true;
  });
  const currentPlaceholder = computed(() => {
    var _a2;
    const _placeholder = (_a2 = props.placeholder) != null ? _a2 : t2("el.select.placeholder");
    return props.multiple || !hasModelValue.value ? _placeholder : states.selectedLabel;
  });
  watch(() => props.modelValue, (val, oldVal) => {
    if (props.multiple) {
      if (props.filterable && !props.reserveKeyword) {
        states.inputValue = "";
        handleQueryChange("");
      }
    }
    setSelected();
    if (!isEqual(val, oldVal) && props.validateEvent) {
      formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn());
    }
  }, {
    flush: "post",
    deep: true
  });
  watch(() => expanded.value, (val) => {
    if (val) {
      handleQueryChange(states.inputValue);
    } else {
      states.inputValue = "";
      states.previousQuery = null;
      states.isBeforeHide = true;
    }
    emit("visible-change", val);
  });
  watch(() => states.options.entries(), () => {
    var _a2;
    if (!isClient)
      return;
    const inputs = ((_a2 = selectRef.value) == null ? void 0 : _a2.querySelectorAll("input")) || [];
    if (!props.filterable && !props.defaultFirstOption && !isUndefined(props.modelValue) || !Array.from(inputs).includes(document.activeElement)) {
      setSelected();
    }
    if (props.defaultFirstOption && (props.filterable || props.remote) && filteredOptionsCount.value) {
      checkDefaultFirstOption();
    }
  }, {
    flush: "post"
  });
  watch(() => states.hoveringIndex, (val) => {
    if (isNumber(val) && val > -1) {
      hoverOption.value = optionsArray.value[val] || {};
    } else {
      hoverOption.value = {};
    }
    optionsArray.value.forEach((option) => {
      option.hover = hoverOption.value === option;
    });
  });
  watchEffect(() => {
    if (states.isBeforeHide)
      return;
    updateOptions();
  });
  const handleQueryChange = (val) => {
    if (states.previousQuery === val) {
      return;
    }
    states.previousQuery = val;
    if (props.filterable && isFunction$1(props.filterMethod)) {
      props.filterMethod(val);
    } else if (props.filterable && props.remote && isFunction$1(props.remoteMethod)) {
      props.remoteMethod(val);
    }
    if (props.defaultFirstOption && (props.filterable || props.remote) && filteredOptionsCount.value) {
      nextTick(checkDefaultFirstOption);
    } else {
      nextTick(updateHoveringIndex);
    }
  };
  const checkDefaultFirstOption = () => {
    const optionsInDropdown = optionsArray.value.filter((n) => n.visible && !n.disabled && !n.states.groupDisabled);
    const userCreatedOption = optionsInDropdown.find((n) => n.created);
    const firstOriginOption = optionsInDropdown[0];
    states.hoveringIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);
  };
  const setSelected = () => {
    if (!props.multiple) {
      const option = getOption(props.modelValue);
      states.selectedLabel = option.currentLabel;
      states.selected = option;
      return;
    } else {
      states.selectedLabel = "";
    }
    const result = [];
    if (isArray$1(props.modelValue)) {
      props.modelValue.forEach((value) => {
        result.push(getOption(value));
      });
    }
    states.selected = result;
  };
  const getOption = (value) => {
    let option;
    const isObjectValue = toRawType(value).toLowerCase() === "object";
    const isNull = toRawType(value).toLowerCase() === "null";
    const isUndefined2 = toRawType(value).toLowerCase() === "undefined";
    for (let i = states.cachedOptions.size - 1; i >= 0; i--) {
      const cachedOption = cachedOptionsArray.value[i];
      const isEqualValue = isObjectValue ? get(cachedOption.value, props.valueKey) === get(value, props.valueKey) : cachedOption.value === value;
      if (isEqualValue) {
        option = {
          value,
          currentLabel: cachedOption.currentLabel,
          isDisabled: cachedOption.isDisabled
        };
        break;
      }
    }
    if (option)
      return option;
    const label = isObjectValue ? value.label : !isNull && !isUndefined2 ? value : "";
    const newOption = {
      value,
      currentLabel: label
    };
    return newOption;
  };
  const updateHoveringIndex = () => {
    if (!props.multiple) {
      states.hoveringIndex = optionsArray.value.findIndex((item) => {
        return getValueKey(item) === getValueKey(states.selected);
      });
    } else {
      states.hoveringIndex = optionsArray.value.findIndex((item) => states.selected.some((selected) => getValueKey(selected) === getValueKey(item)));
    }
  };
  const resetSelectionWidth = () => {
    states.selectionWidth = selectionRef.value.getBoundingClientRect().width;
  };
  const resetCalculatorWidth = () => {
    states.calculatorWidth = calculatorRef.value.getBoundingClientRect().width;
  };
  const resetCollapseItemWidth = () => {
    states.collapseItemWidth = collapseItemRef.value.getBoundingClientRect().width;
  };
  const updateTooltip = () => {
    var _a2, _b;
    (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
  };
  const updateTagTooltip = () => {
    var _a2, _b;
    (_b = (_a2 = tagTooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
  };
  const onInputChange = () => {
    if (states.inputValue.length > 0 && !expanded.value) {
      expanded.value = true;
    }
    handleQueryChange(states.inputValue);
  };
  const onInput = (event) => {
    states.inputValue = event.target.value;
    if (props.remote) {
      debouncedOnInputChange();
    } else {
      return onInputChange();
    }
  };
  const debouncedOnInputChange = debounce(() => {
    onInputChange();
  }, debounce$1.value);
  const emitChange = (val) => {
    if (!isEqual(props.modelValue, val)) {
      emit(CHANGE_EVENT, val);
    }
  };
  const getLastNotDisabledIndex = (value) => findLastIndex(value, (it2) => !states.disabledOptions.has(it2));
  const deletePrevTag = (e) => {
    if (!props.multiple)
      return;
    if (e.code === EVENT_CODE.delete)
      return;
    if (e.target.value.length <= 0) {
      const value = props.modelValue.slice();
      const lastNotDisabledIndex = getLastNotDisabledIndex(value);
      if (lastNotDisabledIndex < 0)
        return;
      value.splice(lastNotDisabledIndex, 1);
      emit(UPDATE_MODEL_EVENT, value);
      emitChange(value);
    }
  };
  const deleteTag = (event, tag) => {
    const index = states.selected.indexOf(tag);
    if (index > -1 && !selectDisabled.value) {
      const value = props.modelValue.slice();
      value.splice(index, 1);
      emit(UPDATE_MODEL_EVENT, value);
      emitChange(value);
      emit("remove-tag", tag.value);
    }
    event.stopPropagation();
    focus();
  };
  const deleteSelected = (event) => {
    event.stopPropagation();
    const value = props.multiple ? [] : void 0;
    if (props.multiple) {
      for (const item of states.selected) {
        if (item.isDisabled)
          value.push(item.value);
      }
    }
    emit(UPDATE_MODEL_EVENT, value);
    emitChange(value);
    states.hoveringIndex = -1;
    expanded.value = false;
    emit("clear");
    focus();
  };
  const handleOptionSelect = (option) => {
    if (props.multiple) {
      const value = (props.modelValue || []).slice();
      const optionIndex = getValueIndex(value, option.value);
      if (optionIndex > -1) {
        value.splice(optionIndex, 1);
      } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {
        value.push(option.value);
      }
      emit(UPDATE_MODEL_EVENT, value);
      emitChange(value);
      if (option.created) {
        handleQueryChange("");
      }
      if (props.filterable && !props.reserveKeyword) {
        states.inputValue = "";
      }
    } else {
      emit(UPDATE_MODEL_EVENT, option.value);
      emitChange(option.value);
      expanded.value = false;
    }
    focus();
    if (expanded.value)
      return;
    nextTick(() => {
      scrollToOption(option);
    });
  };
  const getValueIndex = (arr = [], value) => {
    if (!isObject$1(value))
      return arr.indexOf(value);
    const valueKey = props.valueKey;
    let index = -1;
    arr.some((item, i) => {
      if (toRaw(get(item, valueKey)) === get(value, valueKey)) {
        index = i;
        return true;
      }
      return false;
    });
    return index;
  };
  const scrollToOption = (option) => {
    var _a2, _b, _c, _d, _e;
    const targetOption = isArray$1(option) ? option[0] : option;
    let target = null;
    if (targetOption == null ? void 0 : targetOption.value) {
      const options = optionsArray.value.filter((item) => item.value === targetOption.value);
      if (options.length > 0) {
        target = options[0].$el;
      }
    }
    if (tooltipRef.value && target) {
      const menu = (_d = (_c = (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, `.${nsSelect.be("dropdown", "wrap")}`);
      if (menu) {
        scrollIntoView(menu, target);
      }
    }
    (_e = scrollbarRef.value) == null ? void 0 : _e.handleScroll();
  };
  const onOptionCreate = (vm) => {
    states.options.set(vm.value, vm);
    states.cachedOptions.set(vm.value, vm);
    vm.disabled && states.disabledOptions.set(vm.value, vm);
  };
  const onOptionDestroy = (key, vm) => {
    if (states.options.get(key) === vm) {
      states.options.delete(key);
    }
  };
  const {
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  } = useInput((e) => onInput(e));
  const popperRef = computed(() => {
    var _a2, _b;
    return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
  });
  const handleMenuEnter = () => {
    nextTick(() => scrollToOption(states.selected));
  };
  const focus = () => {
    var _a2;
    (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
  };
  const blur = () => {
    handleClickOutside();
  };
  const handleClearClick = (event) => {
    deleteSelected(event);
  };
  const handleClickOutside = (event) => {
    expanded.value = false;
    if (isFocused.value) {
      const _event2 = new FocusEvent("focus", event);
      nextTick(() => handleBlur(_event2));
    }
  };
  const handleEsc = () => {
    if (states.inputValue.length > 0) {
      states.inputValue = "";
    } else {
      expanded.value = false;
    }
  };
  const toggleMenu = () => {
    if (selectDisabled.value)
      return;
    if (states.menuVisibleOnFocus) {
      states.menuVisibleOnFocus = false;
    } else {
      expanded.value = !expanded.value;
    }
  };
  const selectOption = () => {
    if (!expanded.value) {
      toggleMenu();
    } else {
      if (optionsArray.value[states.hoveringIndex]) {
        handleOptionSelect(optionsArray.value[states.hoveringIndex]);
      }
    }
  };
  const getValueKey = (item) => {
    return isObject$1(item.value) ? get(item.value, props.valueKey) : item.value;
  };
  const optionsAllDisabled = computed(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));
  const showTagList = computed(() => {
    if (!props.multiple) {
      return [];
    }
    return props.collapseTags ? states.selected.slice(0, props.maxCollapseTags) : states.selected;
  });
  const collapseTagList = computed(() => {
    if (!props.multiple) {
      return [];
    }
    return props.collapseTags ? states.selected.slice(props.maxCollapseTags) : [];
  });
  const navigateOptions = (direction) => {
    if (!expanded.value) {
      expanded.value = true;
      return;
    }
    if (states.options.size === 0 || filteredOptionsCount.value === 0)
      return;
    if (!optionsAllDisabled.value) {
      if (direction === "next") {
        states.hoveringIndex++;
        if (states.hoveringIndex === states.options.size) {
          states.hoveringIndex = 0;
        }
      } else if (direction === "prev") {
        states.hoveringIndex--;
        if (states.hoveringIndex < 0) {
          states.hoveringIndex = states.options.size - 1;
        }
      }
      const option = optionsArray.value[states.hoveringIndex];
      if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {
        navigateOptions(direction);
      }
      nextTick(() => scrollToOption(hoverOption.value));
    }
  };
  const getGapWidth = () => {
    if (!selectionRef.value)
      return 0;
    const style = window.getComputedStyle(selectionRef.value);
    return Number.parseFloat(style.gap || "6px");
  };
  const tagStyle = computed(() => {
    const gapWidth = getGapWidth();
    const maxWidth = collapseItemRef.value && props.maxCollapseTags === 1 ? states.selectionWidth - states.collapseItemWidth - gapWidth : states.selectionWidth;
    return { maxWidth: `${maxWidth}px` };
  });
  const collapseTagStyle = computed(() => {
    return { maxWidth: `${states.selectionWidth}px` };
  });
  const inputStyle = computed(() => ({
    width: `${Math.max(states.calculatorWidth, MINIMUM_INPUT_WIDTH)}px`
  }));
  if (props.multiple && !isArray$1(props.modelValue)) {
    emit(UPDATE_MODEL_EVENT, []);
  }
  if (!props.multiple && isArray$1(props.modelValue)) {
    emit(UPDATE_MODEL_EVENT, "");
  }
  useResizeObserver(selectionRef, resetSelectionWidth);
  useResizeObserver(calculatorRef, resetCalculatorWidth);
  useResizeObserver(menuRef, updateTooltip);
  useResizeObserver(wrapperRef, updateTooltip);
  useResizeObserver(tagMenuRef, updateTagTooltip);
  useResizeObserver(collapseItemRef, resetCollapseItemWidth);
  onMounted(() => {
    setSelected();
  });
  return {
    inputId,
    contentId,
    nsSelect,
    nsInput,
    states,
    isFocused,
    expanded,
    optionsArray,
    hoverOption,
    selectSize,
    filteredOptionsCount,
    resetCalculatorWidth,
    updateTooltip,
    updateTagTooltip,
    debouncedOnInputChange,
    onInput,
    deletePrevTag,
    deleteTag,
    deleteSelected,
    handleOptionSelect,
    scrollToOption,
    hasModelValue,
    shouldShowPlaceholder,
    currentPlaceholder,
    showClose,
    iconComponent,
    iconReverse,
    validateState,
    validateIcon,
    showNewOption,
    updateOptions,
    collapseTagSize,
    setSelected,
    selectDisabled,
    emptyText,
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd,
    onOptionCreate,
    onOptionDestroy,
    handleMenuEnter,
    handleFocus,
    focus,
    blur,
    handleBlur,
    handleClearClick,
    handleClickOutside,
    handleEsc,
    toggleMenu,
    selectOption,
    getValueKey,
    navigateOptions,
    dropdownMenuVisible,
    showTagList,
    collapseTagList,
    tagStyle,
    collapseTagStyle,
    inputStyle,
    popperRef,
    inputRef,
    tooltipRef,
    tagTooltipRef,
    calculatorRef,
    prefixRef,
    suffixRef,
    selectRef,
    wrapperRef,
    selectionRef,
    scrollbarRef,
    menuRef,
    tagMenuRef,
    collapseItemRef
  };
};
var ElOptions = defineComponent({
  name: "ElOptions",
  setup(_2, { slots }) {
    const select = inject(selectKey);
    let cachedValueList = [];
    return () => {
      var _a2, _b;
      const children = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
      const valueList = [];
      function filterOptions(children2) {
        if (!isArray$1(children2))
          return;
        children2.forEach((item) => {
          var _a22, _b2, _c, _d;
          const name = (_a22 = (item == null ? void 0 : item.type) || {}) == null ? void 0 : _a22.name;
          if (name === "ElOptionGroup") {
            filterOptions(!isString$1(item.children) && !isArray$1(item.children) && isFunction$1((_b2 = item.children) == null ? void 0 : _b2.default) ? (_c = item.children) == null ? void 0 : _c.default() : item.children);
          } else if (name === "ElOption") {
            valueList.push((_d = item.props) == null ? void 0 : _d.value);
          } else if (isArray$1(item.children)) {
            filterOptions(item.children);
          }
        });
      }
      if (children.length) {
        filterOptions((_b = children[0]) == null ? void 0 : _b.children);
      }
      if (!isEqual(valueList, cachedValueList)) {
        cachedValueList = valueList;
        if (select) {
          select.states.optionValues = valueList;
        }
      }
      return children;
    };
  }
});
const SelectProps = buildProps({
  name: String,
  id: String,
  modelValue: {
    type: [Array, String, Number, Boolean, Object],
    default: void 0
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  automaticDropdown: Boolean,
  size: useSizeProp,
  effect: {
    type: definePropType(String),
    default: "light"
  },
  disabled: Boolean,
  clearable: Boolean,
  filterable: Boolean,
  allowCreate: Boolean,
  loading: Boolean,
  popperClass: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  remote: Boolean,
  loadingText: String,
  noMatchText: String,
  noDataText: String,
  remoteMethod: Function,
  filterMethod: Function,
  multiple: Boolean,
  multipleLimit: {
    type: Number,
    default: 0
  },
  placeholder: {
    type: String
  },
  defaultFirstOption: Boolean,
  reserveKeyword: {
    type: Boolean,
    default: true
  },
  valueKey: {
    type: String,
    default: "value"
  },
  collapseTags: Boolean,
  collapseTagsTooltip: Boolean,
  maxCollapseTags: {
    type: Number,
    default: 1
  },
  teleported: useTooltipContentProps.teleported,
  persistent: {
    type: Boolean,
    default: true
  },
  clearIcon: {
    type: iconPropType,
    default: circle_close_default
  },
  fitInputWidth: Boolean,
  suffixIcon: {
    type: iconPropType,
    default: arrow_down_default
  },
  tagType: { ...tagProps.type, default: "info" },
  validateEvent: {
    type: Boolean,
    default: true
  },
  remoteShowSuffix: Boolean,
  placement: {
    type: definePropType(String),
    values: Ee,
    default: "bottom-start"
  },
  fallbackPlacements: {
    type: definePropType(Array),
    default: ["bottom-start", "top-start", "right", "left"]
  },
  ariaLabel: {
    type: String,
    default: void 0
  }
});
const COMPONENT_NAME = "ElSelect";
const _sfc_main$5 = defineComponent({
  name: COMPONENT_NAME,
  componentName: COMPONENT_NAME,
  components: {
    ElInput,
    ElSelectMenu,
    ElOption: Option,
    ElOptions,
    ElTag,
    ElScrollbar,
    ElTooltip,
    ElIcon
  },
  directives: { ClickOutside },
  props: SelectProps,
  emits: [
    UPDATE_MODEL_EVENT,
    CHANGE_EVENT,
    "remove-tag",
    "clear",
    "visible-change",
    "focus",
    "blur"
  ],
  setup(props, { emit }) {
    const API = useSelect(props, emit);
    provide(selectKey, reactive({
      props,
      states: API.states,
      optionsArray: API.optionsArray,
      handleOptionSelect: API.handleOptionSelect,
      onOptionCreate: API.onOptionCreate,
      onOptionDestroy: API.onOptionDestroy,
      selectRef: API.selectRef,
      setSelected: API.setSelected
    }));
    return {
      ...API
    };
  }
});
const _hoisted_1$2 = ["id", "disabled", "autocomplete", "readonly", "aria-activedescendant", "aria-controls", "aria-expanded", "aria-label"];
const _hoisted_2$1 = ["textContent"];
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tag = resolveComponent("el-tag");
  const _component_el_tooltip = resolveComponent("el-tooltip");
  const _component_el_icon = resolveComponent("el-icon");
  const _component_el_option = resolveComponent("el-option");
  const _component_el_options = resolveComponent("el-options");
  const _component_el_scrollbar = resolveComponent("el-scrollbar");
  const _component_el_select_menu = resolveComponent("el-select-menu");
  const _directive_click_outside = resolveDirective("click-outside");
  return withDirectives((openBlock(), createElementBlock("div", {
    ref: "selectRef",
    class: normalizeClass([_ctx.nsSelect.b(), _ctx.nsSelect.m(_ctx.selectSize)]),
    onMouseenter: _cache[14] || (_cache[14] = ($event) => _ctx.states.inputHovering = true),
    onMouseleave: _cache[15] || (_cache[15] = ($event) => _ctx.states.inputHovering = false),
    onClick: _cache[16] || (_cache[16] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"]))
  }, [
    createVNode(_component_el_tooltip, {
      ref: "tooltipRef",
      visible: _ctx.dropdownMenuVisible,
      placement: _ctx.placement,
      teleported: _ctx.teleported,
      "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
      "popper-options": _ctx.popperOptions,
      "fallback-placements": _ctx.fallbackPlacements,
      effect: _ctx.effect,
      pure: "",
      trigger: "click",
      transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,
      "stop-popper-mouse-event": false,
      "gpu-acceleration": false,
      persistent: _ctx.persistent,
      onBeforeShow: _ctx.handleMenuEnter,
      onHide: _cache[13] || (_cache[13] = ($event) => _ctx.states.isBeforeHide = false)
    }, {
      default: withCtx(() => {
        var _a2;
        return [
          createBaseVNode("div", {
            ref: "wrapperRef",
            class: normalizeClass([
              _ctx.nsSelect.e("wrapper"),
              _ctx.nsSelect.is("focused", _ctx.isFocused),
              _ctx.nsSelect.is("hovering", _ctx.states.inputHovering),
              _ctx.nsSelect.is("filterable", _ctx.filterable),
              _ctx.nsSelect.is("disabled", _ctx.selectDisabled)
            ])
          }, [
            _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref: "prefixRef",
              class: normalizeClass(_ctx.nsSelect.e("prefix"))
            }, [
              renderSlot(_ctx.$slots, "prefix")
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              ref: "selectionRef",
              class: normalizeClass([
                _ctx.nsSelect.e("selection"),
                _ctx.nsSelect.is("near", _ctx.multiple && !_ctx.$slots.prefix && !!_ctx.states.selected.length)
              ])
            }, [
              _ctx.multiple ? renderSlot(_ctx.$slots, "tag", { key: 0 }, () => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.showTagList, (item) => {
                  return openBlock(), createElementBlock("div", {
                    key: _ctx.getValueKey(item),
                    class: normalizeClass(_ctx.nsSelect.e("selected-item"))
                  }, [
                    createVNode(_component_el_tag, {
                      closable: !_ctx.selectDisabled && !item.isDisabled,
                      size: _ctx.collapseTagSize,
                      type: _ctx.tagType,
                      "disable-transitions": "",
                      style: normalizeStyle(_ctx.tagStyle),
                      onClose: ($event) => _ctx.deleteTag($event, item)
                    }, {
                      default: withCtx(() => [
                        createBaseVNode("span", {
                          class: normalizeClass(_ctx.nsSelect.e("tags-text"))
                        }, toDisplayString(item.currentLabel), 3)
                      ]),
                      _: 2
                    }, 1032, ["closable", "size", "type", "style", "onClose"])
                  ], 2);
                }), 128)),
                _ctx.collapseTags && _ctx.states.selected.length > _ctx.maxCollapseTags ? (openBlock(), createBlock(_component_el_tooltip, {
                  key: 0,
                  ref: "tagTooltipRef",
                  disabled: _ctx.dropdownMenuVisible || !_ctx.collapseTagsTooltip,
                  "fallback-placements": ["bottom", "top", "right", "left"],
                  effect: _ctx.effect,
                  placement: "bottom",
                  teleported: _ctx.teleported
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      ref: "collapseItemRef",
                      class: normalizeClass(_ctx.nsSelect.e("selected-item"))
                    }, [
                      createVNode(_component_el_tag, {
                        closable: false,
                        size: _ctx.collapseTagSize,
                        type: _ctx.tagType,
                        "disable-transitions": "",
                        style: normalizeStyle(_ctx.collapseTagStyle)
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("span", {
                            class: normalizeClass(_ctx.nsSelect.e("tags-text"))
                          }, " + " + toDisplayString(_ctx.states.selected.length - _ctx.maxCollapseTags), 3)
                        ]),
                        _: 1
                      }, 8, ["size", "type", "style"])
                    ], 2)
                  ]),
                  content: withCtx(() => [
                    createBaseVNode("div", {
                      ref: "tagMenuRef",
                      class: normalizeClass(_ctx.nsSelect.e("selection"))
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.collapseTagList, (item) => {
                        return openBlock(), createElementBlock("div", {
                          key: _ctx.getValueKey(item),
                          class: normalizeClass(_ctx.nsSelect.e("selected-item"))
                        }, [
                          createVNode(_component_el_tag, {
                            class: "in-tooltip",
                            closable: !_ctx.selectDisabled && !item.isDisabled,
                            size: _ctx.collapseTagSize,
                            type: _ctx.tagType,
                            "disable-transitions": "",
                            onClose: ($event) => _ctx.deleteTag($event, item)
                          }, {
                            default: withCtx(() => [
                              createBaseVNode("span", {
                                class: normalizeClass(_ctx.nsSelect.e("tags-text"))
                              }, toDisplayString(item.currentLabel), 3)
                            ]),
                            _: 2
                          }, 1032, ["closable", "size", "type", "onClose"])
                        ], 2);
                      }), 128))
                    ], 2)
                  ]),
                  _: 1
                }, 8, ["disabled", "effect", "teleported"])) : createCommentVNode("v-if", true)
              ]) : createCommentVNode("v-if", true),
              !_ctx.selectDisabled ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass([
                  _ctx.nsSelect.e("selected-item"),
                  _ctx.nsSelect.e("input-wrapper"),
                  _ctx.nsSelect.is("hidden", !_ctx.filterable)
                ])
              }, [
                withDirectives(createBaseVNode("input", {
                  id: _ctx.inputId,
                  ref: "inputRef",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.states.inputValue = $event),
                  type: "text",
                  class: normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
                  disabled: _ctx.selectDisabled,
                  autocomplete: _ctx.autocomplete,
                  style: normalizeStyle(_ctx.inputStyle),
                  role: "combobox",
                  readonly: !_ctx.filterable,
                  spellcheck: "false",
                  "aria-activedescendant": ((_a2 = _ctx.hoverOption) == null ? void 0 : _a2.id) || "",
                  "aria-controls": _ctx.contentId,
                  "aria-expanded": _ctx.dropdownMenuVisible,
                  "aria-label": _ctx.ariaLabel,
                  "aria-autocomplete": "none",
                  "aria-haspopup": "listbox",
                  onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                  onBlur: _cache[2] || (_cache[2] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),
                  onKeydown: [
                    _cache[3] || (_cache[3] = withKeys(withModifiers(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"])),
                    _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),
                    _cache[5] || (_cache[5] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"])),
                    _cache[6] || (_cache[6] = withKeys(withModifiers((...args) => _ctx.selectOption && _ctx.selectOption(...args), ["stop", "prevent"]), ["enter"])),
                    _cache[7] || (_cache[7] = withKeys(withModifiers((...args) => _ctx.deletePrevTag && _ctx.deletePrevTag(...args), ["stop"]), ["delete"]))
                  ],
                  onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),
                  onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),
                  onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),
                  onInput: _cache[11] || (_cache[11] = (...args) => _ctx.onInput && _ctx.onInput(...args)),
                  onClick: _cache[12] || (_cache[12] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"]))
                }, null, 46, _hoisted_1$2), [
                  [vModelText, _ctx.states.inputValue]
                ]),
                _ctx.filterable ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  ref: "calculatorRef",
                  "aria-hidden": "true",
                  class: normalizeClass(_ctx.nsSelect.e("input-calculator")),
                  textContent: toDisplayString(_ctx.states.inputValue)
                }, null, 10, _hoisted_2$1)) : createCommentVNode("v-if", true)
              ], 2)) : createCommentVNode("v-if", true),
              _ctx.shouldShowPlaceholder ? (openBlock(), createElementBlock("div", {
                key: 2,
                class: normalizeClass([
                  _ctx.nsSelect.e("selected-item"),
                  _ctx.nsSelect.e("placeholder"),
                  _ctx.nsSelect.is("transparent", !_ctx.hasModelValue || _ctx.expanded && !_ctx.states.inputValue)
                ])
              }, [
                createBaseVNode("span", null, toDisplayString(_ctx.currentPlaceholder), 1)
              ], 2)) : createCommentVNode("v-if", true)
            ], 2),
            createBaseVNode("div", {
              ref: "suffixRef",
              class: normalizeClass(_ctx.nsSelect.e("suffix"))
            }, [
              _ctx.iconComponent && !_ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {
                key: 0,
                class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
                ]),
                _: 1
              }, 8, ["class"])) : createCommentVNode("v-if", true),
              _ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {
                key: 1,
                class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon")]),
                onClick: _ctx.handleClearClick
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true),
              _ctx.validateState && _ctx.validateIcon ? (openBlock(), createBlock(_component_el_icon, {
                key: 2,
                class: normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : createCommentVNode("v-if", true)
            ], 2)
          ], 2)
        ];
      }),
      content: withCtx(() => [
        createVNode(_component_el_select_menu, { ref: "menuRef" }, {
          default: withCtx(() => [
            _ctx.$slots.header ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.nsSelect.be("dropdown", "header"))
            }, [
              renderSlot(_ctx.$slots, "header")
            ], 2)) : createCommentVNode("v-if", true),
            withDirectives(createVNode(_component_el_scrollbar, {
              id: _ctx.contentId,
              ref: "scrollbarRef",
              tag: "ul",
              "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),
              "view-class": _ctx.nsSelect.be("dropdown", "list"),
              class: normalizeClass([_ctx.nsSelect.is("empty", _ctx.filteredOptionsCount === 0)]),
              role: "listbox",
              "aria-label": _ctx.ariaLabel,
              "aria-orientation": "vertical"
            }, {
              default: withCtx(() => [
                _ctx.showNewOption ? (openBlock(), createBlock(_component_el_option, {
                  key: 0,
                  value: _ctx.states.inputValue,
                  created: true
                }, null, 8, ["value"])) : createCommentVNode("v-if", true),
                createVNode(_component_el_options, null, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["id", "wrap-class", "view-class", "class", "aria-label"]), [
              [vShow, _ctx.states.options.size > 0 && !_ctx.loading]
            ]),
            _ctx.$slots.loading && _ctx.loading ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(_ctx.nsSelect.be("dropdown", "loading"))
            }, [
              renderSlot(_ctx.$slots, "loading")
            ], 2)) : _ctx.loading || _ctx.filteredOptionsCount === 0 ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))
            }, [
              renderSlot(_ctx.$slots, "empty", {}, () => [
                createBaseVNode("span", null, toDisplayString(_ctx.emptyText), 1)
              ])
            ], 2)) : createCommentVNode("v-if", true),
            _ctx.$slots.footer ? (openBlock(), createElementBlock("div", {
              key: 3,
              class: normalizeClass(_ctx.nsSelect.be("dropdown", "footer"))
            }, [
              renderSlot(_ctx.$slots, "footer")
            ], 2)) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 512)
      ]),
      _: 3
    }, 8, ["visible", "placement", "teleported", "popper-class", "popper-options", "fallback-placements", "effect", "transition", "persistent", "onBeforeShow"])
  ], 34)), [
    [_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]
  ]);
}
var Select = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$3], ["__file", "select.vue"]]);
const _sfc_main$4 = defineComponent({
  name: "ElOptionGroup",
  componentName: "ElOptionGroup",
  props: {
    label: String,
    disabled: Boolean
  },
  setup(props) {
    const ns = useNamespace("select");
    const groupRef = ref(null);
    const instance = getCurrentInstance();
    const children = ref([]);
    provide(selectGroupKey, reactive({
      ...toRefs(props)
    }));
    const visible = computed(() => children.value.some((option) => option.visible === true));
    const flattedChildren = (node) => {
      const children2 = [];
      if (isArray$1(node.children)) {
        node.children.forEach((child) => {
          var _a2, _b;
          if (child.type && child.type.name === "ElOption" && child.component && child.component.proxy) {
            children2.push(child.component.proxy);
          } else if ((_a2 = child.children) == null ? void 0 : _a2.length) {
            children2.push(...flattedChildren(child));
          } else if ((_b = child.component) == null ? void 0 : _b.subTree) {
            children2.push(...flattedChildren(child.component.subTree));
          }
        });
      }
      return children2;
    };
    const updateChildren = () => {
      children.value = flattedChildren(instance.subTree);
    };
    onMounted(() => {
      updateChildren();
    });
    useMutationObserver(groupRef, updateChildren, {
      attributes: true,
      subtree: true,
      childList: true
    });
    return {
      groupRef,
      visible,
      ns
    };
  }
});
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return withDirectives((openBlock(), createElementBlock("ul", {
    ref: "groupRef",
    class: normalizeClass(_ctx.ns.be("group", "wrap"))
  }, [
    createBaseVNode("li", {
      class: normalizeClass(_ctx.ns.be("group", "title"))
    }, toDisplayString(_ctx.label), 3),
    createBaseVNode("li", null, [
      createBaseVNode("ul", {
        class: normalizeClass(_ctx.ns.b("group"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2)
    ])
  ], 2)), [
    [vShow, _ctx.visible]
  ]);
}
var OptionGroup = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$2], ["__file", "option-group.vue"]]);
const ElSelect = withInstall(Select, {
  Option,
  OptionGroup
});
const ElOption = withNoopInstall(Option);
withNoopInstall(OptionGroup);
const O$1 = "星期", S$2 = [
  "日",
  "一",
  "二",
  "三",
  "四",
  "五",
  "六"
], _ = [
  "正",
  "二",
  "三",
  "四",
  "五",
  "六",
  "七",
  "八",
  "九",
  "十",
  "冬",
  "腊"
], P$1 = "月", q$1 = ["初", "十", "廿", "卅"], B$1 = [
  "一",
  "二",
  "三",
  "四",
  "五",
  "六",
  "七",
  "八",
  "九",
  "十"
], E = [
  "鼠",
  "牛",
  "虎",
  "兔",
  "龙",
  "蛇",
  "马",
  "羊",
  "猴",
  "鸡",
  "狗",
  "猪"
], H$1 = {
  "1-1": "元旦节",
  "2-14": "情人节",
  "5-1": "劳动节",
  "5-4": "青年节",
  "6-1": "儿童节",
  "9-10": "教师节",
  "10-1": "国庆节",
  "12-25": "圣诞节",
  "3-8": "妇女节",
  "3-12": "植树节",
  "4-1": "愚人节",
  "5-12": "护士节",
  "7-1": "建党节",
  "8-1": "建军节",
  "12-24": "平安夜"
}, J = {
  "12-30": "除夕",
  "1-1": "春节",
  "1-15": "元宵节",
  "2-2": "龙抬头",
  "5-5": "端午节",
  "7-7": "七夕节",
  "7-15": "中元节",
  "8-15": "中秋节",
  "9-9": "重阳节",
  "10-1": "寒衣节",
  "10-15": "下元节",
  "12-8": "腊八节",
  "12-23": "北方小年",
  "12-24": "南方小年"
}, N$1 = [
  "甲",
  "乙",
  "丙",
  "丁",
  "戊",
  "己",
  "庚",
  "辛",
  "壬",
  "癸"
], Q$1 = [
  "子",
  "丑",
  "寅",
  "卯",
  "辰",
  "巳",
  "午",
  "未",
  "申",
  "酉",
  "戌",
  "亥"
], R$1 = [
  "摩羯座",
  "水瓶座",
  "双鱼座",
  "白羊座",
  "金牛座",
  "双子座",
  "巨蟹座",
  "狮子座",
  "处女座",
  "天秤座",
  "天蝎座",
  "射手座",
  "摩羯座"
], V$1 = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22], r = 1900, k$1 = 1, U = 31, v = 2100, T$1 = [
  19416,
  19168,
  42352,
  21717,
  53856,
  55632,
  91476,
  22176,
  39632,
  21970,
  19168,
  42422,
  42192,
  53840,
  119381,
  46400,
  54944,
  44450,
  38320,
  84343,
  18800,
  42160,
  46261,
  27216,
  27968,
  109396,
  11104,
  38256,
  21234,
  18800,
  25958,
  54432,
  59984,
  92821,
  23248,
  11104,
  100067,
  37600,
  84183,
  51536,
  54432,
  120998,
  46416,
  22176,
  107956,
  9680,
  37584,
  53938,
  43344,
  46423,
  27808,
  46416,
  86869,
  19872,
  42416,
  83315,
  21168,
  43432,
  59696,
  27296,
  44710,
  43856,
  19296,
  43748,
  42352,
  21088,
  62051,
  55632,
  23383,
  22176,
  38608,
  19925,
  19152,
  42192,
  54484,
  53840,
  54616,
  46400,
  46752,
  103846,
  38320,
  18864,
  43380,
  42160,
  45690,
  27216,
  27968,
  44870,
  43872,
  38256,
  19189,
  18800,
  25776,
  29859,
  59984,
  27480,
  23232,
  43872,
  38613,
  37600,
  51552,
  55636,
  54432,
  55888,
  30034,
  22176,
  43959,
  9680,
  37584,
  51893,
  43344,
  46240,
  47780,
  44368,
  21977,
  19360,
  42416,
  86390,
  21168,
  43312,
  31060,
  27296,
  44368,
  23378,
  19296,
  42726,
  42208,
  53856,
  60005,
  54576,
  23200,
  30371,
  38608,
  19195,
  19152,
  42192,
  118966,
  53840,
  54560,
  56645,
  46496,
  22224,
  21938,
  18864,
  42359,
  42160,
  43600,
  111189,
  27936,
  44448,
  84835,
  37744,
  18936,
  18800,
  25776,
  92326,
  59984,
  27296,
  108228,
  43744,
  37600,
  53987,
  51552,
  54615,
  54432,
  55888,
  23893,
  22176,
  42704,
  21972,
  21200,
  43448,
  43344,
  46240,
  46758,
  44368,
  21920,
  43940,
  42416,
  21168,
  45683,
  26928,
  29495,
  27296,
  44368,
  84821,
  19296,
  42352,
  21732,
  53600,
  59752,
  54560,
  55968,
  92838,
  22224,
  19168,
  43476,
  41680,
  53584,
  62034,
  54560
], m = (a) => {
  let x = 348;
  for (let s = 32768; s > 8; s >>= 1)
    x += T$1[a - r] & s ? 1 : 0;
  return x + C$1(a);
}, w$1 = (a, x) => T$1[a - r] & 65536 >> x ? 30 : 29, F = (a) => T$1[a - r] & 15, C$1 = (a) => F(a) ? T$1[a - r] & 65536 ? 30 : 29 : 0, X$1 = (a, x) => {
  const s = (a * 2 - (x < V$1[a - 1] ? 2 : 0)) / 2;
  return R$1[s];
}, $$1 = (a) => {
  const x = (a - 4) % 10, s = (a - 4) % 12;
  return N$1[x] + Q$1[s] + "年";
}, L$1 = (a) => {
  let x = _[a - 1];
  return x += P$1, x;
}, a0 = (a) => {
  let x;
  return a === 10 ? x = "初十" : a === 20 ? x = "二十" : a === 30 ? x = "三十" : (x = q$1[Math.floor(a / 10)], x += B$1[a % 10]), x;
}, x0 = (a) => {
  const x = (a - 4) % 12;
  return E[x];
}, W$1 = (a, x, s) => {
  let n = parseInt(a), e = parseInt(x), u2 = parseInt(s), c2;
  n ? c2 = new Date(n, e - 1, u2) : c2 = /* @__PURE__ */ new Date(), n = c2.getFullYear(), e = c2.getMonth() + 1, u2 = c2.getDate();
  let h2 = c2.getDay();
  const I2 = O$1 + S$2[h2];
  h2 == 0 && (h2 = 7);
  let y2 = false;
  const l2 = /* @__PURE__ */ new Date();
  l2.getFullYear() == n && l2.getMonth() + 1 == e && l2.getDate() == u2 && (y2 = true);
  const o = n + "-" + e + "-" + u2, M = e + "-" + u2, g2 = X$1(e, u2);
  let d2 = (Date.UTC(n, e - 1, u2) - Date.UTC(r, k$1 - 1, U)) / 864e5, b = 0, t2;
  for (t2 = r; t2 <= v && d2 > 0; t2++)
    b = m(t2), d2 -= b;
  d2 < 0 && (d2 += b, t2--);
  const f2 = t2;
  let D = F(f2), i = false;
  for (t2 = 1; t2 <= 12 && d2 > 0; t2++)
    D > 0 && t2 == D + 1 && !i ? (--t2, i = true, b = C$1(f2)) : b = w$1(f2, t2), i && t2 === D + 1 && (i = false), d2 -= b;
  d2 === 0 && D > 0 && t2 === D + 1 && (i ? i = false : (i = true, --t2)), d2 < 0 && (d2 += b, --t2);
  let p2 = t2, Y2 = d2 + 1;
  const Z2 = f2 + "-" + p2 + "-" + Y2, j2 = p2 + "-" + Y2, z2 = $$1(f2), A2 = L$1(p2), G2 = a0(Y2), K2 = x0(f2);
  return {
    sDate: o,
    sYear: n,
    sMonth: e,
    sDay: u2,
    sFestival: H$1[M] || "",
    astro: g2,
    week: h2,
    lDate: Z2,
    lYear: f2,
    lMonth: p2,
    lDay: Y2,
    lFestival: J[j2] || "",
    cnYear: z2,
    // 闰
    cnMonth: (i ? "闰" : "") + A2,
    cnDay: G2,
    cnWeek: I2,
    zodiac: K2,
    isLeap: i,
    isToday: y2
  };
};
const z = "星期", W = [
  "日",
  "一",
  "二",
  "三",
  "四",
  "五",
  "六"
], j$1 = [
  "正",
  "二",
  "三",
  "四",
  "五",
  "六",
  "七",
  "八",
  "九",
  "十",
  "冬",
  "腊"
], q = "月", B = ["初", "十", "廿", "卅"], K = [
  "一",
  "二",
  "三",
  "四",
  "五",
  "六",
  "七",
  "八",
  "九",
  "十"
], O = [
  "鼠",
  "牛",
  "虎",
  "兔",
  "龙",
  "蛇",
  "马",
  "羊",
  "猴",
  "鸡",
  "狗",
  "猪"
], P = {
  "1-1": "元旦节",
  "2-14": "情人节",
  "5-1": "劳动节",
  "5-4": "青年节",
  "6-1": "儿童节",
  "9-10": "教师节",
  "10-1": "国庆节",
  "12-25": "圣诞节",
  "3-8": "妇女节",
  "3-12": "植树节",
  "4-1": "愚人节",
  "5-12": "护士节",
  "7-1": "建党节",
  "8-1": "建军节",
  "12-24": "平安夜"
}, Q = {
  "12-30": "除夕",
  "1-1": "春节",
  "1-15": "元宵节",
  "2-2": "龙抬头",
  "5-5": "端午节",
  "7-7": "七夕节",
  "7-15": "中元节",
  "8-15": "中秋节",
  "9-9": "重阳节",
  "10-1": "寒衣节",
  "10-15": "下元节",
  "12-8": "腊八节",
  "12-23": "北方小年",
  "12-24": "南方小年"
}, R = [
  "甲",
  "乙",
  "丙",
  "丁",
  "戊",
  "己",
  "庚",
  "辛",
  "壬",
  "癸"
], V = [
  "子",
  "丑",
  "寅",
  "卯",
  "辰",
  "巳",
  "午",
  "未",
  "申",
  "酉",
  "戌",
  "亥"
], X = [
  "摩羯座",
  "水瓶座",
  "双鱼座",
  "白羊座",
  "金牛座",
  "双子座",
  "巨蟹座",
  "狮子座",
  "处女座",
  "天秤座",
  "天蝎座",
  "射手座",
  "摩羯座"
], $ = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22], G$1 = 1900, C = 1, H = 31, A = 2100, p$1 = [
  19416,
  19168,
  42352,
  21717,
  53856,
  55632,
  91476,
  22176,
  39632,
  21970,
  19168,
  42422,
  42192,
  53840,
  119381,
  46400,
  54944,
  44450,
  38320,
  84343,
  18800,
  42160,
  46261,
  27216,
  27968,
  109396,
  11104,
  38256,
  21234,
  18800,
  25958,
  54432,
  59984,
  92821,
  23248,
  11104,
  100067,
  37600,
  84183,
  51536,
  54432,
  120998,
  46416,
  22176,
  107956,
  9680,
  37584,
  53938,
  43344,
  46423,
  27808,
  46416,
  86869,
  19872,
  42416,
  83315,
  21168,
  43432,
  59696,
  27296,
  44710,
  43856,
  19296,
  43748,
  42352,
  21088,
  62051,
  55632,
  23383,
  22176,
  38608,
  19925,
  19152,
  42192,
  54484,
  53840,
  54616,
  46400,
  46752,
  103846,
  38320,
  18864,
  43380,
  42160,
  45690,
  27216,
  27968,
  44870,
  43872,
  38256,
  19189,
  18800,
  25776,
  29859,
  59984,
  27480,
  23232,
  43872,
  38613,
  37600,
  51552,
  55636,
  54432,
  55888,
  30034,
  22176,
  43959,
  9680,
  37584,
  51893,
  43344,
  46240,
  47780,
  44368,
  21977,
  19360,
  42416,
  86390,
  21168,
  43312,
  31060,
  27296,
  44368,
  23378,
  19296,
  42726,
  42208,
  53856,
  60005,
  54576,
  23200,
  30371,
  38608,
  19195,
  19152,
  42192,
  118966,
  53840,
  54560,
  56645,
  46496,
  22224,
  21938,
  18864,
  42359,
  42160,
  43600,
  111189,
  27936,
  44448,
  84835,
  37744,
  18936,
  18800,
  25776,
  92326,
  59984,
  27296,
  108228,
  43744,
  37600,
  53987,
  51552,
  54615,
  54432,
  55888,
  23893,
  22176,
  42704,
  21972,
  21200,
  43448,
  43344,
  46240,
  46758,
  44368,
  21920,
  43940,
  42416,
  21168,
  45683,
  26928,
  29495,
  27296,
  44368,
  84821,
  19296,
  42352,
  21732,
  53600,
  59752,
  54560,
  55968,
  92838,
  22224,
  19168,
  43476,
  41680,
  53584,
  62034,
  54560
], N = (n) => {
  let t2 = 348;
  for (let e = 32768; e > 8; e >>= 1)
    t2 += p$1[n - G$1] & e ? 1 : 0;
  return t2 + T(n);
}, tt = (n, t2) => p$1[n - G$1] & 65536 >> t2 ? 30 : 29, w = (n) => p$1[n - G$1] & 15, T = (n) => w(n) ? p$1[n - G$1] & 65536 ? 30 : 29 : 0, et = (n, t2) => {
  const e = (n * 2 - (t2 < $[n - 1] ? 2 : 0)) / 2;
  return X[e];
}, nt = (n) => {
  const t2 = (n - 4) % 10, e = (n - 4) % 12;
  return R[t2] + V[e] + "年";
}, at = (n) => {
  let t2 = j$1[n - 1];
  return t2 += q, t2;
}, rt = (n) => {
  let t2;
  return n === 10 ? t2 = "初十" : n === 20 ? t2 = "二十" : n === 30 ? t2 = "三十" : (t2 = B[Math.floor(n / 10)], t2 += K[n % 10]), t2;
}, ht = (n) => {
  const t2 = (n - 4) % 12;
  return O[t2];
}, it = (n, t2, e) => {
  let h2 = parseInt(n), r2 = parseInt(t2), a = parseInt(e), i;
  h2 ? i = new Date(h2, r2 - 1, a) : i = /* @__PURE__ */ new Date(), h2 = i.getFullYear(), r2 = i.getMonth() + 1, a = i.getDate();
  let o = i.getDay();
  const g2 = z + W[o];
  o == 0 && (o = 7);
  let Z2 = false;
  const x = /* @__PURE__ */ new Date();
  x.getFullYear() == h2 && x.getMonth() + 1 == r2 && x.getDate() == a && (Z2 = true);
  const D = h2 + "-" + r2 + "-" + a, E2 = r2 + "-" + a, F2 = et(r2, a);
  let y2 = (Date.UTC(h2, r2 - 1, a) - Date.UTC(G$1, C - 1, H)) / 864e5, m2 = 0, s;
  for (s = G$1; s <= A && y2 > 0; s++)
    m2 = N(s), y2 -= m2;
  y2 < 0 && (y2 += m2, s--);
  const _2 = s;
  let M = w(_2), d2 = false;
  for (s = 1; s <= 12 && y2 > 0; s++)
    M > 0 && s == M + 1 && !d2 ? (--s, d2 = true, m2 = T(_2)) : m2 = tt(_2, s), d2 && s === M + 1 && (d2 = false), y2 -= m2;
  y2 === 0 && M > 0 && s === M + 1 && (d2 ? d2 = false : (d2 = true, --s)), y2 < 0 && (y2 += m2, --s);
  let f2 = s, I2 = y2 + 1;
  const L2 = _2 + "-" + f2 + "-" + I2, k2 = f2 + "-" + I2, v2 = nt(_2), J2 = at(f2), U2 = rt(I2), b = ht(_2);
  return {
    sDate: D,
    sYear: h2,
    sMonth: r2,
    sDay: a,
    sFestival: P[E2] || "",
    astro: F2,
    week: o,
    lDate: L2,
    lYear: _2,
    lMonth: f2,
    lDay: I2,
    lFestival: Q[k2] || "",
    cnYear: v2,
    // 闰
    cnMonth: (d2 ? "闰" : "") + J2,
    cnDay: U2,
    cnWeek: g2,
    zodiac: b,
    isLeap: d2,
    isToday: Z2
  };
}, c = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"], u$1 = [
  "子",
  "丑",
  "寅",
  "卯",
  "辰",
  "巳",
  "午",
  "未",
  "申",
  "酉",
  "戌",
  "亥"
], st = (n) => {
  if (!n)
    return 0;
  n.length > 5 && (n = n.substring(0, 5));
  let t2 = 1;
  for (let e = 1; e < 22; e += 2) {
    if (n >= (e < 10 ? "0" : "") + e + ":00" && n <= (e + 1 < 10 ? "0" : "") + (e + 1) + ":59")
      return t2;
    t2++;
  }
  return 0;
};
class l {
  constructor(t2) {
    const e = l._compute(t2);
    this.yearGan = e.yearGan, this.yearZhi = e.yearZhi, this.monthGan = e.monthGan, this.monthZhi = e.monthZhi, this.dayGan = e.dayGan, this.dayZhi = e.dayZhi, this.timeGan = e.timeGan, this.timeZhi = e.timeZhi;
  }
  static _compute(t2) {
    const e = {
      yearGan: "",
      yearZhi: "",
      monthGan: "",
      monthZhi: "",
      dayGan: "",
      dayZhi: "",
      timeGan: "",
      timeZhi: ""
    };
    return l._computeYear(e, t2), l._computeMonth(e, t2), l._computeDay(e, t2), l._computeTime(e, t2), e;
  }
  static _computeYear(t2, e) {
    const r2 = e.getYear() - 4;
    let a = r2 % 10, i = r2 % 12;
    a < 0 && (a += 10), i < 0 && (i += 12), t2.yearGan = c == null ? void 0 : c[a], t2.yearZhi = u$1 == null ? void 0 : u$1[i], t2.yearGanIndex = a, t2.yearZhiIndex = i;
  }
  static _computeMonth(t2, e) {
    const h2 = e.getMonth() - 1, a = ((t2.yearGanIndex + 1) * 2 + h2) % 10, i = (h2 + 2) % 12;
    t2.monthGan = c == null ? void 0 : c[a], t2.monthZhi = u$1 == null ? void 0 : u$1[i], t2.monthGanIndex = a, t2.monthZhiIndex = i;
  }
  static _computeDay(t2, e) {
    const h2 = e._solar, r2 = new S$1(
      h2.getYear(),
      h2.getMonth(),
      h2.getDay(),
      12,
      0,
      0
    ), a = Math.floor(r2.getJulianDay()) - 11, i = a % 10, o = a % 12;
    t2.dayGan = c == null ? void 0 : c[i], t2.dayZhi = u$1 == null ? void 0 : u$1[o], t2.dayGanIndex = i, t2.dayZhiIndex = o;
    let g2 = i;
    const Z2 = e._hour, x = e._minute, D = (Z2 < 10 ? "0" : "") + Z2 + ":" + (x < 10 ? "0" : "") + x;
    D >= "23:00" && D <= "23:59" && (g2++, g2 >= 10 && (g2 -= 10), dayZhiExact++, dayZhiExact >= 12 && (dayZhiExact -= 12)), t2.dayGanIndexExact = g2;
  }
  static _computeTime(t2, e) {
    const h2 = e._hour, r2 = e._minute, a = (h2 < 10 ? "0" : "") + h2 + ":" + (r2 < 10 ? "0" : "") + r2, i = st(a), o = (t2.dayGanIndexExact % 5 * 2 + i) % 10;
    t2.timeGan = c == null ? void 0 : c[o], t2.timeZhi = u$1 == null ? void 0 : u$1[i];
  }
}
class Y {
  constructor(t2, e, h2, r2 = 0, a = 0, i = 0, o) {
    this._year = t2, this._month = e, this._day = h2, this._hour = r2, this._minute = a, this._second = i, this._solar = o, this._char8 = new l(this);
  }
  getYear() {
    return this._year;
  }
  getMonth() {
    return this._month;
  }
  getDay() {
    return this._day;
  }
  getHour() {
    return this._hour;
  }
  getMinute() {
    return this._minute;
  }
  getSecond() {
    return this._second;
  }
  getYearGan() {
    return this._char8.yearGan;
  }
  getYearZhi() {
    return this._char8.yearZhi;
  }
  getMonthGan() {
    return this._char8.monthGan;
  }
  getMonthZhi() {
    return this._char8.monthZhi;
  }
  getDayGan() {
    return this._char8.dayGan;
  }
  getDayZhi() {
    return this._char8.dayZhi;
  }
  getTimeGan() {
    return this._char8.timeGan;
  }
  getTimeZhi() {
    return this._char8.timeZhi;
  }
  static fromSolar(t2) {
    const e = it(t2.getYear(), t2.getMonth(), t2.getDay());
    return new Y(e.lYear, e.lMonth, e.lDay, t2.getHour(), t2.getMinute(), t2.getSecond(), t2);
  }
}
let S$1 = class S {
  constructor(t2, e, h2, r2 = 0, a = 0, i = 0) {
    this._year = t2, this._month = e, this._day = h2, this._hour = r2, this._minute = a, this._second = i;
  }
  getYear() {
    return this._year;
  }
  getMonth() {
    return this._month;
  }
  getDay() {
    return this._day;
  }
  getHour() {
    return this._hour;
  }
  getMinute() {
    return this._minute;
  }
  getSecond() {
    return this._second;
  }
  getLunar() {
    return Y.fromSolar(this);
  }
  getJulianDay() {
    let t2 = this._year, e = this._month, h2 = this._day + ((this._second / 60 + this._minute) / 60 + this._hour) / 24, r2 = 0, a = false;
    return t2 * 372 + e * 31 + Math.floor(h2) >= 588829 && (a = true), e <= 2 && (e += 12, t2--), a && (r2 = Math.floor(t2 / 100), r2 = 2 - r2 + Math.floor(r2 / 4)), Math.floor(365.25 * (t2 + 4716)) + Math.floor(30.6001 * (e + 1)) + h2 + r2 - 1524.5;
  }
};
const ot = (n, t2, e, h2 = 0, r2 = 0, a = 0) => new S$1(n, t2, e, h2, r2, a).getLunar()._char8;
const S2 = {
  甲: "木",
  乙: "木",
  丙: "火",
  丁: "火",
  戊: "土",
  己: "土",
  庚: "金",
  辛: "金",
  壬: "水",
  癸: "水"
}, g = ["金", "木", "水", "火", "土"], u = {
  金: "jin",
  木: "mu",
  水: "shui",
  火: "huo",
  土: "tu"
}, L = {
  金: "土",
  木: "水",
  水: "金",
  火: "木",
  土: "火"
}, y = {
  甲: {
    子: 1.2,
    丑: 1.06,
    寅: 1.14,
    卯: 1.2,
    辰: 1.1,
    巳: 1,
    午: 1,
    未: 1.04,
    申: 1.06,
    酉: 1,
    戌: 1,
    亥: 1.2
  },
  乙: {
    子: 1.2,
    丑: 1.06,
    寅: 1.14,
    卯: 1.2,
    辰: 1.1,
    巳: 1,
    午: 1,
    未: 1.04,
    申: 1.06,
    酉: 1,
    戌: 1,
    亥: 1.2
  },
  丙: {
    子: 1,
    丑: 1,
    寅: 1.2,
    卯: 1.2,
    辰: 1.06,
    巳: 1.14,
    午: 1.2,
    未: 1.1,
    申: 1,
    酉: 1,
    戌: 1.04,
    亥: 1
  },
  丙: {
    子: 1,
    丑: 1,
    寅: 1.2,
    卯: 1.2,
    辰: 1.06,
    巳: 1.14,
    午: 1.2,
    未: 1.1,
    申: 1,
    酉: 1,
    戌: 1.04,
    亥: 1
  },
  戊: {
    子: 1,
    丑: 1.1,
    寅: 1.06,
    卯: 1,
    辰: 1.1,
    巳: 1.14,
    午: 1.2,
    未: 1.16,
    申: 1,
    酉: 1,
    戌: 1.14,
    亥: 1
  },
  己: {
    子: 1,
    丑: 1.1,
    寅: 1.06,
    卯: 1,
    辰: 1.1,
    巳: 1.14,
    午: 1.2,
    未: 1.16,
    申: 1,
    酉: 1,
    戌: 1.14,
    亥: 1
  },
  庚: {
    子: 1,
    丑: 1.14,
    寅: 1,
    卯: 1,
    辰: 1.1,
    巳: 1.06,
    午: 1,
    未: 1.1,
    申: 1.14,
    酉: 1.2,
    戌: 1.16,
    亥: 1
  },
  辛: {
    子: 1,
    丑: 1.14,
    寅: 1,
    卯: 1,
    辰: 1.1,
    巳: 1.06,
    午: 1,
    未: 1.1,
    申: 1.14,
    酉: 1.2,
    戌: 1.16,
    亥: 1
  },
  壬: {
    子: 1.2,
    丑: 1.1,
    寅: 1,
    卯: 1,
    辰: 1.04,
    巳: 1.06,
    午: 1,
    未: 1,
    申: 1.2,
    酉: 1.2,
    戌: 1.06,
    亥: 1.14
  },
  癸: {
    子: 1.2,
    丑: 1.1,
    寅: 1,
    卯: 1,
    辰: 1.04,
    巳: 1.06,
    午: 1,
    未: 1,
    申: 1.2,
    酉: 1.2,
    戌: 1.06,
    亥: 1.14
  }
}, f = {
  子: {
    癸: {
      子: 1.2,
      丑: 1.1,
      寅: 1,
      卯: 1,
      辰: 1.04,
      巳: 1.06,
      午: 1,
      未: 1,
      申: 1.2,
      酉: 1.2,
      戌: 1.06,
      亥: 1.14
    }
  },
  丑: {
    癸: {
      子: 0.36,
      丑: 0.33,
      寅: 0.3,
      卯: 0.3,
      辰: 0.312,
      巳: 0.318,
      午: 0.3,
      未: 0.3,
      申: 0.36,
      酉: 0.36,
      戌: 0.318,
      亥: 0.342
    },
    辛: {
      子: 0.2,
      丑: 0.228,
      寅: 0.2,
      卯: 0.2,
      辰: 0.23,
      巳: 0.212,
      午: 0.2,
      未: 0.22,
      申: 0.228,
      酉: 0.248,
      戌: 0.232,
      亥: 0.2
    },
    己: {
      子: 0.5,
      丑: 0.55,
      寅: 0.53,
      卯: 0.5,
      辰: 0.55,
      巳: 0.57,
      午: 0.6,
      未: 0.58,
      申: 0.5,
      酉: 0.5,
      戌: 0.57,
      亥: 0.5
    }
  },
  寅: {
    丙: {
      子: 0.3,
      丑: 0.3,
      寅: 0.36,
      卯: 0.36,
      辰: 0.318,
      巳: 0.342,
      午: 0.36,
      未: 0.33,
      申: 0.3,
      酉: 0.3,
      戌: 0.342,
      亥: 0.318
    },
    甲: {
      子: 0.84,
      丑: 0.742,
      寅: 0.798,
      卯: 0.84,
      辰: 0.77,
      巳: 0.7,
      午: 0.7,
      未: 0.728,
      申: 0.742,
      酉: 0.7,
      戌: 0.7,
      亥: 0.84
    }
  },
  卯: {
    乙: {
      子: 1.2,
      丑: 1.06,
      寅: 1.14,
      卯: 1.2,
      辰: 1.1,
      巳: 1,
      午: 1,
      未: 1.04,
      申: 1.06,
      酉: 1,
      戌: 1,
      亥: 1.2
    }
  },
  辰: {
    乙: {
      子: 0.36,
      丑: 0.318,
      寅: 0.342,
      卯: 0.36,
      辰: 0.33,
      巳: 0.3,
      午: 0.3,
      未: 0.312,
      申: 0.318,
      酉: 0.3,
      戌: 0.3,
      亥: 0.36
    },
    癸: {
      子: 0.24,
      丑: 0.22,
      寅: 0.2,
      卯: 0.2,
      辰: 0.208,
      巳: 0.2,
      午: 0.2,
      未: 0.2,
      申: 0.24,
      酉: 0.24,
      戌: 0.212,
      亥: 0.228
    },
    戊: {
      子: 0.5,
      丑: 0.55,
      寅: 0.53,
      卯: 0.5,
      辰: 0.55,
      巳: 0.6,
      午: 0.6,
      未: 0.58,
      申: 0.5,
      酉: 0.5,
      戌: 0.57,
      亥: 0.5
    }
  },
  巳: {
    庚: {
      子: 0.3,
      丑: 0.324,
      寅: 0.3,
      卯: 0.3,
      辰: 0.33,
      巳: 0.3,
      午: 0.3,
      未: 0.33,
      申: 0.342,
      酉: 0.36,
      戌: 0.348,
      亥: 0.3
    },
    丙: {
      子: 0.7,
      丑: 0.7,
      寅: 0.84,
      卯: 0.84,
      辰: 0.742,
      巳: 0.84,
      午: 0.84,
      未: 0.798,
      申: 0.7,
      酉: 0.7,
      戌: 0.728,
      亥: 0.742
    }
  },
  午: {
    丁: {
      子: 1,
      丑: 1,
      寅: 1.2,
      卯: 1.2,
      辰: 1.06,
      巳: 1.14,
      午: 1.2,
      未: 1.1,
      申: 1,
      酉: 1,
      戌: 1.04,
      亥: 1.06
    }
  },
  未: {
    丁: {
      子: 0.3,
      丑: 0.3,
      寅: 0.36,
      卯: 0.36,
      辰: 0.318,
      巳: 0.342,
      午: 0.36,
      未: 0.33,
      申: 0.3,
      酉: 0.3,
      戌: 0.312,
      亥: 0.318
    },
    乙: {
      子: 0.24,
      丑: 0.212,
      寅: 0.228,
      卯: 0.24,
      辰: 0.22,
      巳: 0.2,
      午: 0.2,
      未: 0.208,
      申: 0.212,
      酉: 0.2,
      戌: 0.2,
      亥: 0.24
    },
    己: {
      子: 0.5,
      丑: 0.55,
      寅: 0.53,
      卯: 0.5,
      辰: 0.55,
      巳: 0.57,
      午: 0.6,
      未: 0.58,
      申: 0.5,
      酉: 0.5,
      戌: 0.57,
      亥: 0.5
    }
  },
  申: {
    壬: {
      子: 0.36,
      丑: 0.33,
      寅: 0.3,
      卯: 0.3,
      辰: 0.312,
      巳: 0.318,
      午: 0.3,
      未: 0.3,
      申: 0.36,
      酉: 0.36,
      戌: 0.318,
      亥: 0.342
    },
    庚: {
      子: 0.7,
      丑: 0.798,
      寅: 0.7,
      卯: 0.7,
      辰: 0.77,
      巳: 0.742,
      午: 0.7,
      未: 0.77,
      申: 0.798,
      酉: 0.84,
      戌: 0.812,
      亥: 0.7
    }
  },
  酉: {
    辛: {
      子: 1,
      丑: 1.14,
      寅: 1,
      卯: 1,
      辰: 1.1,
      巳: 1.06,
      午: 1,
      未: 1.1,
      申: 1.14,
      酉: 1.2,
      戌: 1.16,
      亥: 1
    }
  },
  戌: {
    辛: {
      子: 0.3,
      丑: 0.342,
      寅: 0.3,
      卯: 0.3,
      辰: 0.33,
      巳: 0.318,
      午: 0.3,
      未: 0.33,
      申: 0.342,
      酉: 0.36,
      戌: 0.348,
      亥: 0.3
    },
    丁: {
      子: 0.2,
      丑: 0.2,
      寅: 0.24,
      卯: 0.24,
      辰: 0.212,
      巳: 0.228,
      午: 0.24,
      未: 0.22,
      申: 0.2,
      酉: 0.2,
      戌: 0.208,
      亥: 0.212
    },
    戊: {
      子: 0.5,
      丑: 0.55,
      寅: 0.53,
      卯: 0.5,
      辰: 0.55,
      巳: 0.57,
      午: 0.6,
      未: 0.58,
      申: 0.5,
      酉: 0.5,
      戌: 0.57,
      亥: 0.5
    }
  },
  亥: {
    甲: {
      子: 0.36,
      丑: 0.318,
      寅: 0.342,
      卯: 0.36,
      辰: 0.33,
      巳: 0.3,
      午: 0.3,
      未: 0.312,
      申: 0.318,
      酉: 0.3,
      戌: 0.3,
      亥: 0.36
    },
    壬: {
      子: 0.84,
      丑: 0.77,
      寅: 0.7,
      卯: 0.728,
      辰: 0.742,
      巳: 0.7,
      午: 0.7,
      未: 0.84,
      申: 0.84,
      酉: 0.84,
      戌: 0.724,
      亥: 0.798
    }
  }
}, d = (t2) => {
  const e = t2.char8[4];
  t2.mainElement = S2[e];
}, j = (t2) => {
  const o = t2.mainElement, e = L[o];
  t2.tongLeiElement = [o, e];
}, G = (t2) => {
  let o = t2.tongLeiElement, e = [];
  g.forEach((n) => {
    o.includes(n) || e.push(n);
  }), t2.yiLeiElement = e;
}, h = (t2, o, e) => {
  const n = S2[o], r2 = `${u[n]}Score`;
  t2[r2] = t2[r2] + e;
}, k = (t2) => {
  const o = t2.char8, e = o[3];
  o.forEach((s, a) => {
    if (a % 2 === 0) {
      const c2 = y[s][e];
      h(t2, s, c2);
    } else {
      const c2 = f[s];
      Object.keys(c2).forEach((i) => {
        const l2 = c2[i][e];
        h(t2, i, l2);
      });
    }
  });
  const n = (s, a) => {
    let c2 = 0;
    return a.forEach((i) => {
      const m2 = `${u[i]}Score`;
      c2 = c2 + s[m2];
    }), c2;
  }, { tongLeiElement: E2, yiLeiElement: r2 } = t2;
  t2.tongLeiScore = n(t2, E2), t2.yiLeiScore = n(t2, r2);
}, p = (t2) => {
  let o = {
    char8: t2,
    // 日主五行属性
    mainElement: "",
    // 同类
    tongLeiElement: [],
    // 异类
    yiLeiElement: [],
    // 金木水火土的分数
    jinScore: 0,
    muScore: 0,
    shuiScore: 0,
    huoScore: 0,
    tuScore: 0,
    tongLeiScore: 0,
    yiLeiScore: 0
  };
  return Array.isArray(t2) && t2.length === 8 && (d(o), j(o), G(o), k(o)), o;
};
const t = [
  {
    char: "一",
    spell: "yī",
    stroke: "1",
    radical: "一",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧ",
    tradition: "一",
    sex: "",
    tone: 1
  },
  {
    char: "丁",
    spell: "dīng",
    stroke: "2",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧㄥ",
    tradition: "丁",
    sex: "",
    tone: 1
  },
  {
    char: "七",
    spell: "qī",
    stroke: "2",
    radical: "一",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧ",
    tradition: "七",
    sex: "",
    tone: 1
  },
  {
    char: "万",
    spell: "wàn",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "萬",
    sex: "",
    tone: 4
  },
  {
    char: "丈",
    spell: "zhàng",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄤˋ",
    tradition: "丈",
    sex: "",
    tone: 4
  },
  {
    char: "三",
    spell: "sān",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄙㄢ",
    tradition: "三",
    sex: "",
    tone: 1
  },
  {
    char: "上",
    spell: "shàng",
    stroke: "3",
    radical: "⺊",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄤˋ",
    tradition: "上",
    sex: "",
    tone: 4
  },
  {
    char: "下",
    spell: "xià",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧㄚˋ",
    tradition: "下",
    sex: "",
    tone: 4
  },
  {
    char: "不",
    spell: "bù",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄨˋ",
    tradition: "不",
    sex: "",
    tone: 4
  },
  {
    char: "与",
    spell: "yǔ",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄩˊ",
    tradition: "與",
    sex: "",
    tone: 3
  },
  {
    char: "丐",
    spell: "gài",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄞˋ",
    tradition: "丐",
    sex: "",
    tone: 4
  },
  {
    char: "丑",
    spell: "chǒu",
    stroke: "4",
    radical: "乛",
    struct: "独体结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄡˇ",
    tradition: "醜",
    sex: "",
    tone: 3
  },
  {
    char: "专",
    spell: "zhuān",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄓㄨㄢ",
    tradition: "專",
    sex: "",
    tone: 1
  },
  {
    char: "且",
    spell: "qiě",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄐㄩ",
    tradition: "且",
    sex: "",
    tone: 3
  },
  {
    char: "世",
    spell: "shì",
    stroke: "5",
    radical: "一",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕˋ",
    tradition: "世",
    sex: "男",
    tone: 4
  },
  {
    char: "丘",
    spell: "qiū",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄡ",
    tradition: "丘",
    sex: "",
    tone: 1
  },
  {
    char: "丙",
    spell: "bǐng",
    stroke: "5",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄅㄧㄥˇ",
    tradition: "丙",
    sex: "",
    tone: 3
  },
  {
    char: "业",
    spell: "yè",
    stroke: "5",
    radical: "业",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄧㄝˋ",
    tradition: "業",
    sex: "",
    tone: 4
  },
  {
    char: "丛",
    spell: "cóng",
    stroke: "5",
    radical: "一",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄨㄥˊ",
    tradition: "叢",
    sex: "",
    tone: 2
  },
  {
    char: "东",
    spell: "dōng",
    stroke: "5",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄉㄨㄥ",
    tradition: "東",
    sex: "男",
    tone: 1
  },
  {
    char: "丝",
    spell: "sī",
    stroke: "5",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙ",
    tradition: "絲",
    sex: "",
    tone: 1
  },
  {
    char: "丢",
    spell: "diū",
    stroke: "6",
    radical: "厶",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄉㄧㄡ",
    tradition: "丢",
    sex: "",
    tone: 1
  },
  {
    char: "两",
    spell: "liǎng",
    stroke: "7",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄤˇ",
    tradition: "兩",
    sex: "",
    tone: 3
  },
  {
    char: "严",
    spell: "yán",
    stroke: "7",
    radical: "一",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "嚴",
    sex: "",
    tone: 2
  },
  {
    char: "丧",
    spell: "sàng",
    stroke: "8",
    radical: "十",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄤˋ",
    tradition: "喪",
    sex: "",
    tone: 4
  },
  {
    char: "个",
    spell: "gè",
    stroke: "3",
    radical: "人",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄍㄜˋ",
    tradition: "個",
    sex: "",
    tone: 4
  },
  {
    char: "中",
    spell: "zhōng",
    stroke: "4",
    radical: "丨",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄓㄨㄥˋ",
    tradition: "中",
    sex: "男",
    tone: 1
  },
  {
    char: "丰",
    spell: "fēng",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄈㄥ",
    tradition: "豐",
    sex: "",
    tone: 1
  },
  {
    char: "串",
    spell: "chuàn",
    stroke: "7",
    radical: "丨",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄨㄢˋ",
    tradition: "串",
    sex: "",
    tone: 4
  },
  {
    char: "临",
    spell: "lín",
    stroke: "9",
    radical: "丨",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄣˊ",
    tradition: "臨",
    sex: "",
    tone: 2
  },
  {
    char: "丸",
    spell: "wán",
    stroke: "3",
    radical: "丿",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄨㄢˊ",
    tradition: "丸",
    sex: "",
    tone: 2
  },
  {
    char: "丹",
    spell: "dān",
    stroke: "4",
    radical: "丿",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄢ",
    tradition: "丹",
    sex: "女",
    tone: 1
  },
  {
    char: "为",
    spell: "wéi",
    stroke: "4",
    radical: "丶",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˊ",
    tradition: "爲",
    sex: "",
    tone: 4
  },
  {
    char: "主",
    spell: "zhǔ",
    stroke: "5",
    radical: "亠",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄓㄨˋ",
    tradition: "主",
    sex: "",
    tone: 3
  },
  {
    char: "丽",
    spell: "lì",
    stroke: "7",
    radical: "一",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "麗",
    sex: "女",
    tone: 4
  },
  {
    char: "举",
    spell: "jǔ",
    stroke: "9",
    radical: "丶",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˇ",
    tradition: "舉",
    sex: "",
    tone: 3
  },
  {
    char: "乃",
    spell: "nǎi",
    stroke: "2",
    radical: "乛",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄋㄞˇ",
    tradition: "乃",
    sex: "",
    tone: 3
  },
  {
    char: "久",
    spell: "jiǔ",
    stroke: "3",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄡˇ",
    tradition: "久",
    sex: "",
    tone: 3
  },
  {
    char: "么",
    spell: "me",
    stroke: "3",
    radical: "丿",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "e",
    tradition: "麽",
    sex: "",
    tone: 0
  },
  {
    char: "义",
    spell: "yì",
    stroke: "3",
    radical: "丶",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄧˊ",
    tradition: "義",
    sex: "男",
    tone: 4
  },
  {
    char: "之",
    spell: "zhī",
    stroke: "3",
    radical: "丶",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄓ",
    tradition: "之",
    sex: "男",
    tone: 1
  },
  {
    char: "乌",
    spell: "wū",
    stroke: "4",
    radical: "丿",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄨˋ",
    tradition: "烏",
    sex: "",
    tone: 1
  },
  {
    char: "乍",
    spell: "zhà",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄚˋ",
    tradition: "乍",
    sex: "",
    tone: 4
  },
  {
    char: "乎",
    spell: "hū",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨ",
    tradition: "乎",
    sex: "",
    tone: 1
  },
  {
    char: "乏",
    spell: "fá",
    stroke: "4",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄈㄚˊ",
    tradition: "乏",
    sex: "",
    tone: 2
  },
  {
    char: "乐",
    spell: "lè",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄜˋ",
    tradition: "樂",
    sex: "男",
    tone: 4
  },
  {
    char: "乒",
    spell: "pīng",
    stroke: "6",
    radical: "丿",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄆㄧㄥ",
    tradition: "乒",
    sex: "",
    tone: 1
  },
  {
    char: "乓",
    spell: "pāng",
    stroke: "6",
    radical: "丿",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄆㄤ",
    tradition: "乓",
    sex: "",
    tone: 1
  },
  {
    char: "乔",
    spell: "qiáo",
    stroke: "6",
    radical: "丿",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "喬",
    sex: "",
    tone: 2
  },
  {
    char: "乖",
    spell: "guāi",
    stroke: "8",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄞ",
    tradition: "乖",
    sex: "",
    tone: 1
  },
  {
    char: "乘",
    spell: "chéng",
    stroke: "10",
    radical: "禾",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄥˊ",
    tradition: "乘",
    sex: "",
    tone: 2
  },
  {
    char: "乙",
    spell: "yǐ",
    stroke: "1",
    radical: "乛",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄧˇ",
    tradition: "乙",
    sex: "",
    tone: 3
  },
  {
    char: "九",
    spell: "jiǔ",
    stroke: "2",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄡˇ",
    tradition: "九",
    sex: "",
    tone: 3
  },
  {
    char: "乞",
    spell: "qǐ",
    stroke: "3",
    radical: "乛",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧˇ",
    tradition: "乞",
    sex: "",
    tone: 3
  },
  {
    char: "也",
    spell: "yě",
    stroke: "3",
    radical: "乛",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧㄝˇ",
    tradition: "也",
    sex: "",
    tone: 3
  },
  {
    char: "习",
    spell: "xí",
    stroke: "3",
    radical: "乛",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧˊ",
    tradition: "習",
    sex: "",
    tone: 2
  },
  {
    char: "乡",
    spell: "xiāng",
    stroke: "3",
    radical: "乛",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄤ",
    tradition: "鄉",
    sex: "",
    tone: 1
  },
  {
    char: "书",
    spell: "shū",
    stroke: "4",
    radical: "乛",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄨ",
    tradition: "書",
    sex: "",
    tone: 1
  },
  {
    char: "买",
    spell: "mǎi",
    stroke: "6",
    radical: "乛",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄞˇ",
    tradition: "買",
    sex: "",
    tone: 3
  },
  {
    char: "乱",
    spell: "luàn",
    stroke: "7",
    radical: "舌",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄢˋ",
    tradition: "亂",
    sex: "",
    tone: 4
  },
  {
    char: "乳",
    spell: "rǔ",
    stroke: "8",
    radical: "爫、乚",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄖㄨˇ",
    tradition: "乳",
    sex: "",
    tone: 3
  },
  {
    char: "乾",
    spell: "qián",
    stroke: "11",
    radical: "龺、乙",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢˊ",
    tradition: "",
    sex: "",
    tone: 2
  },
  {
    char: "了",
    spell: "le",
    stroke: "2",
    radical: "乛",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄠˇ",
    tradition: "瞭",
    sex: "",
    tone: 0
  },
  {
    char: "予",
    spell: "yǔ",
    stroke: "4",
    radical: "乛",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄩˊ",
    tradition: "予",
    sex: "",
    tone: 3
  },
  {
    char: "争",
    spell: "zhēng",
    stroke: "6",
    radical: "⺈",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄥˋ",
    tradition: "争",
    sex: "",
    tone: 1
  },
  {
    char: "事",
    spell: "shì",
    stroke: "8",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "事",
    sex: "",
    tone: 4
  },
  {
    char: "二",
    spell: "èr",
    stroke: "2",
    radical: "二",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄦˋ",
    tradition: "二",
    sex: "",
    tone: 4
  },
  {
    char: "于",
    spell: "yú",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄩˊ",
    tradition: "于",
    sex: "",
    tone: 2
  },
  {
    char: "亏",
    spell: "kuī",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄎㄨㄟ",
    tradition: "虧",
    sex: "",
    tone: 1
  },
  {
    char: "云",
    spell: "yún",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄩㄣˊ",
    tradition: "雲",
    sex: "女",
    tone: 2
  },
  {
    char: "互",
    spell: "hù",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨˋ",
    tradition: "互",
    sex: "",
    tone: 4
  },
  {
    char: "五",
    spell: "wǔ",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄨˇ",
    tradition: "五",
    sex: "",
    tone: 3
  },
  {
    char: "井",
    spell: "jǐng",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄐㄧㄥˇ",
    tradition: "井",
    sex: "",
    tone: 3
  },
  {
    char: "亚",
    spell: "yà",
    stroke: "6",
    radical: "一",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧㄚˋ",
    tradition: "亚",
    sex: "女",
    tone: 4
  },
  {
    char: "些",
    spell: "xiē",
    stroke: "8",
    radical: "止",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄝ",
    tradition: "些",
    sex: "",
    tone: 1
  },
  {
    char: "亡",
    spell: "wáng",
    stroke: "3",
    radical: "亠",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄨㄤˊ",
    tradition: "亡",
    sex: "",
    tone: 2
  },
  {
    char: "交",
    spell: "jiāo",
    stroke: "6",
    radical: "亠",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄠ",
    tradition: "交",
    sex: "",
    tone: 1
  },
  {
    char: "亥",
    spell: "hài",
    stroke: "6",
    radical: "亠",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄏㄞˋ",
    tradition: "亥",
    sex: "",
    tone: 4
  },
  {
    char: "亦",
    spell: "yì",
    stroke: "6",
    radical: "亠",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧˋ",
    tradition: "亦",
    sex: "男",
    tone: 4
  },
  {
    char: "产",
    spell: "chǎn",
    stroke: "6",
    radical: "立",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄢˇ",
    tradition: "產",
    sex: "",
    tone: 3
  },
  {
    char: "亩",
    spell: "mǔ",
    stroke: "7",
    radical: "亠",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄨˇ",
    tradition: "畝",
    sex: "",
    tone: 3
  },
  {
    char: "享",
    spell: "xiǎng",
    stroke: "8",
    radical: "亠",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄤˇ",
    tradition: "享",
    sex: "",
    tone: 3
  },
  {
    char: "京",
    spell: "jīng",
    stroke: "8",
    radical: "亠",
    struct: "上中下结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄥ",
    tradition: "京",
    sex: "",
    tone: 1
  },
  {
    char: "亭",
    spell: "tíng",
    stroke: "9",
    radical: "亠",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄧㄥˊ",
    tradition: "亭",
    sex: "",
    tone: 2
  },
  {
    char: "亮",
    spell: "liàng",
    stroke: "9",
    radical: "亠",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄤˋ",
    tradition: "亮",
    sex: "男",
    tone: 4
  },
  {
    char: "亲",
    spell: "qīn",
    stroke: "9",
    radical: "立",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄣ",
    tradition: "親",
    sex: "",
    tone: 1
  },
  {
    char: "人",
    spell: "rén",
    stroke: "2",
    radical: "人",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄖㄣˊ",
    tradition: "人",
    sex: "",
    tone: 2
  },
  {
    char: "亿",
    spell: "yì",
    stroke: "3",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "億",
    sex: "",
    tone: 4
  },
  {
    char: "什",
    spell: "shí",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄣˊ",
    tradition: "什",
    sex: "",
    tone: 2
  },
  {
    char: "仁",
    spell: "rén",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄖㄣˊ",
    tradition: "仁",
    sex: "男",
    tone: 2
  },
  {
    char: "仅",
    spell: "jǐn",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄣˋ",
    tradition: "僅",
    sex: "",
    tone: 3
  },
  {
    char: "仆",
    spell: "pú",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄨˊ",
    tradition: "僕",
    sex: "",
    tone: 2
  },
  {
    char: "仇",
    spell: "chóu",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "仇",
    sex: "",
    tone: 2
  },
  {
    char: "今",
    spell: "jīn",
    stroke: "4",
    radical: "人",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄣ",
    tradition: "今",
    sex: "",
    tone: 1
  },
  {
    char: "介",
    spell: "jiè",
    stroke: "4",
    radical: "人",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄝˋ",
    tradition: "介",
    sex: "",
    tone: 4
  },
  {
    char: "仍",
    spell: "réng",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄥˊ",
    tradition: "仍",
    sex: "",
    tone: 2
  },
  {
    char: "从",
    spell: "cóng",
    stroke: "4",
    radical: "人",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄘㄨㄥˊ",
    tradition: "從",
    sex: "",
    tone: 2
  },
  {
    char: "仑",
    spell: "lún",
    stroke: "4",
    radical: "人",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄩㄣˊ",
    tradition: "侖",
    sex: "",
    tone: 2
  },
  {
    char: "仓",
    spell: "cāng",
    stroke: "4",
    radical: "人",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄘㄤ",
    tradition: "倉",
    sex: "",
    tone: 1
  },
  {
    char: "仔",
    spell: "zǎi",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄗㄞˇ",
    tradition: "仔",
    sex: "",
    tone: 3
  },
  {
    char: "他",
    spell: "tā",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄚ",
    tradition: "他",
    sex: "",
    tone: 1
  },
  {
    char: "仗",
    spell: "zhàng",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "仗",
    sex: "",
    tone: 4
  },
  {
    char: "付",
    spell: "fù",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˋ",
    tradition: "付",
    sex: "",
    tone: 4
  },
  {
    char: "仙",
    spell: "xiān",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄢ",
    tradition: "仙",
    sex: "",
    tone: 1
  },
  {
    char: "代",
    spell: "dài",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄞˋ",
    tradition: "代",
    sex: "",
    tone: 4
  },
  {
    char: "令",
    spell: "lìng",
    stroke: "5",
    radical: "人",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄥˊ",
    tradition: "令",
    sex: "",
    tone: 4
  },
  {
    char: "以",
    spell: "yǐ",
    stroke: "4",
    radical: "人",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄧˇ",
    tradition: "以",
    sex: "男",
    tone: 3
  },
  {
    char: "仪",
    spell: "yí",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˊ",
    tradition: "儀",
    sex: "女",
    tone: 2
  },
  {
    char: "们",
    spell: "mén",
    stroke: "5",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "",
    tradition: "們",
    sex: "",
    tone: 2
  },
  {
    char: "仰",
    spell: "yǎng",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄤˊ",
    tradition: "仰",
    sex: "",
    tone: 3
  },
  {
    char: "仲",
    spell: "zhòng",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓㄨㄥˋ",
    tradition: "仲",
    sex: "",
    tone: 4
  },
  {
    char: "件",
    spell: "jiàn",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "件",
    sex: "",
    tone: 4
  },
  {
    char: "价",
    spell: "jià",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "價",
    sex: "",
    tone: 4
  },
  {
    char: "任",
    spell: "rèn",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄣˊ",
    tradition: "任",
    sex: "",
    tone: 4
  },
  {
    char: "份",
    spell: "fèn",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣˋ",
    tradition: "份",
    sex: "",
    tone: 4
  },
  {
    char: "仿",
    spell: "fǎng",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˇ",
    tradition: "仿",
    sex: "",
    tone: 3
  },
  {
    char: "企",
    spell: "qǐ",
    stroke: "6",
    radical: "人",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧˇ",
    tradition: "企",
    sex: "",
    tone: 3
  },
  {
    char: "伊",
    spell: "yī",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧ",
    tradition: "伊",
    sex: "女",
    tone: 1
  },
  {
    char: "伍",
    spell: "wǔ",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄨˇ",
    tradition: "伍",
    sex: "",
    tone: 3
  },
  {
    char: "伏",
    spell: "fú",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˊ",
    tradition: "伏",
    sex: "",
    tone: 2
  },
  {
    char: "伐",
    spell: "fá",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄚˊ",
    tradition: "伐",
    sex: "",
    tone: 2
  },
  {
    char: "休",
    spell: "xiū",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄡ",
    tradition: "休",
    sex: "",
    tone: 1
  },
  {
    char: "众",
    spell: "zhòng",
    stroke: "6",
    radical: "人",
    struct: "品字结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄨㄥˋ",
    tradition: "衆",
    sex: "",
    tone: 4
  },
  {
    char: "优",
    spell: "yōu",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡ",
    tradition: "優",
    sex: "",
    tone: 1
  },
  {
    char: "伙",
    spell: "huǒ",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄛˇ",
    tradition: "夥",
    sex: "",
    tone: 3
  },
  {
    char: "会",
    spell: "huì",
    stroke: "6",
    radical: "人",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄟˋ",
    tradition: "會",
    sex: "男",
    tone: 4
  },
  {
    char: "伞",
    spell: "sǎn",
    stroke: "6",
    radical: "人",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄙㄢˇ",
    tradition: "傘",
    sex: "",
    tone: 3
  },
  {
    char: "伟",
    spell: "wěi",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˇ",
    tradition: "偉",
    sex: "男",
    tone: 3
  },
  {
    char: "传",
    spell: "chuán",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄨㄢˊ",
    tradition: "傳",
    sex: "",
    tone: 2
  },
  {
    char: "伤",
    spell: "shāng",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄤ",
    tradition: "傷",
    sex: "",
    tone: 1
  },
  {
    char: "伦",
    spell: "lún",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩㄣˊ",
    tradition: "倫",
    sex: "男",
    tone: 2
  },
  {
    char: "伪",
    spell: "wěi",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˇ",
    tradition: "僞",
    sex: "",
    tone: 3
  },
  {
    char: "伯",
    spell: "bǎi",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "伯",
    sex: "男",
    tone: 3
  },
  {
    char: "估",
    spell: "gū",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˋ",
    tradition: "估",
    sex: "",
    tone: 1
  },
  {
    char: "伴",
    spell: "bàn",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "伴",
    sex: "",
    tone: 4
  },
  {
    char: "伶",
    spell: "líng",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "伶",
    sex: "",
    tone: 2
  },
  {
    char: "伸",
    spell: "shēn",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣ",
    tradition: "伸",
    sex: "",
    tone: 1
  },
  {
    char: "伺",
    spell: "sì",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˋ",
    tradition: "伺",
    sex: "",
    tone: 4
  },
  {
    char: "似",
    spell: "sì",
    stroke: "6",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄙˋ",
    tradition: "似",
    sex: "",
    tone: 4
  },
  {
    char: "佃",
    spell: "diàn",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "佃",
    sex: "",
    tone: 4
  },
  {
    char: "但",
    spell: "dàn",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄢˋ",
    tradition: "但",
    sex: "",
    tone: 4
  },
  {
    char: "位",
    spell: "wèi",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˋ",
    tradition: "位",
    sex: "",
    tone: 4
  },
  {
    char: "低",
    spell: "dī",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧ",
    tradition: "低",
    sex: "",
    tone: 1
  },
  {
    char: "住",
    spell: "zhù",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "住",
    sex: "",
    tone: 4
  },
  {
    char: "佑",
    spell: "yòu",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡˋ",
    tradition: "佑",
    sex: "",
    tone: 4
  },
  {
    char: "体",
    spell: "tǐ",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄧˇ",
    tradition: "體",
    sex: "",
    tone: 3
  },
  {
    char: "何",
    spell: "hé",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "何",
    sex: "",
    tone: 2
  },
  {
    char: "余",
    spell: "yú",
    stroke: "7",
    radical: "人",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "餘",
    sex: "",
    tone: 2
  },
  {
    char: "佛",
    spell: "fó",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄛˊ",
    tradition: "佛",
    sex: "",
    tone: 2
  },
  {
    char: "作",
    spell: "zuò",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨㄛˋ",
    tradition: "作",
    sex: "",
    tone: 4
  },
  {
    char: "你",
    spell: "nǐ",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˇ",
    tradition: "你",
    sex: "",
    tone: 3
  },
  {
    char: "佣",
    spell: "yōng",
    stroke: "7",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥˋ",
    tradition: "傭",
    sex: "",
    tone: 1
  },
  {
    char: "佩",
    spell: "pèi",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄟˋ",
    tradition: "佩",
    sex: "",
    tone: 4
  },
  {
    char: "佳",
    spell: "jiā",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄚ",
    tradition: "佳",
    sex: "女",
    tone: 1
  },
  {
    char: "使",
    spell: "shǐ",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˇ",
    tradition: "使",
    sex: "",
    tone: 3
  },
  {
    char: "侄",
    spell: "zhí",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˊ",
    tradition: "侄",
    sex: "",
    tone: 2
  },
  {
    char: "侈",
    spell: "chǐ",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔˇ",
    tradition: "侈",
    sex: "",
    tone: 3
  },
  {
    char: "例",
    spell: "lì",
    stroke: "8",
    radical: "亻",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "例",
    sex: "",
    tone: 4
  },
  {
    char: "侍",
    spell: "shì",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "侍",
    sex: "",
    tone: 4
  },
  {
    char: "供",
    spell: "gòng",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥˋ",
    tradition: "供",
    sex: "",
    tone: 4
  },
  {
    char: "依",
    spell: "yī",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˇ",
    tradition: "依",
    sex: "",
    tone: 1
  },
  {
    char: "侠",
    spell: "xiá",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "俠",
    sex: "",
    tone: 2
  },
  {
    char: "侣",
    spell: "lǚ",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "侣",
    sex: "",
    tone: 3
  },
  {
    char: "侥",
    spell: "yáo",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "僥",
    sex: "",
    tone: 3
  },
  {
    char: "侦",
    spell: "zhēn",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄣ",
    tradition: "偵",
    sex: "",
    tone: 1
  },
  {
    char: "侧",
    spell: "cè",
    stroke: "8",
    radical: "亻",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄜˋ",
    tradition: "側",
    sex: "",
    tone: 4
  },
  {
    char: "侨",
    spell: "qiáo",
    stroke: "8",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "僑",
    sex: "",
    tone: 2
  },
  {
    char: "侮",
    spell: "wǔ",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˇ",
    tradition: "侮",
    sex: "",
    tone: 3
  },
  {
    char: "侯",
    spell: "hòu",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄏㄡˊ",
    tradition: "侯",
    sex: "",
    tone: 2
  },
  {
    char: "侵",
    spell: "qīn",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧㄣ",
    tradition: "侵",
    sex: "",
    tone: 1
  },
  {
    char: "便",
    spell: "biàn",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄢˋ",
    tradition: "便",
    sex: "",
    tone: 4
  },
  {
    char: "促",
    spell: "cù",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨˋ",
    tradition: "促",
    sex: "",
    tone: 4
  },
  {
    char: "俄",
    spell: "é",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "俄",
    sex: "",
    tone: 2
  },
  {
    char: "俊",
    spell: "jùn",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄩㄣˋ",
    tradition: "俊",
    sex: "男",
    tone: 4
  },
  {
    char: "俏",
    spell: "qiào",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˋ",
    tradition: "俏",
    sex: "",
    tone: 4
  },
  {
    char: "俐",
    spell: "lì",
    stroke: "9",
    radical: "亻",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "俐",
    sex: "",
    tone: 4
  },
  {
    char: "俗",
    spell: "sú",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨˊ",
    tradition: "俗",
    sex: "",
    tone: 2
  },
  {
    char: "俘",
    spell: "fú",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "俘",
    sex: "",
    tone: 2
  },
  {
    char: "保",
    spell: "bǎo",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄠˇ",
    tradition: "保",
    sex: "男",
    tone: 3
  },
  {
    char: "信",
    spell: "xìn",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄣˋ",
    tradition: "信",
    sex: "男",
    tone: 4
  },
  {
    char: "俩",
    spell: "liǎ",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄚˇ",
    tradition: "倆",
    sex: "",
    tone: 3
  },
  {
    char: "俭",
    spell: "jiǎn",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "儉",
    sex: "",
    tone: 3
  },
  {
    char: "修",
    spell: "xiū",
    stroke: "9",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄡ",
    tradition: "修",
    sex: "",
    tone: 1
  },
  {
    char: "俯",
    spell: "fǔ",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "俯",
    sex: "",
    tone: 3
  },
  {
    char: "俱",
    spell: "jù",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "俱",
    sex: "",
    tone: 4
  },
  {
    char: "俺",
    spell: "ǎn",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄢˇ",
    tradition: "俺",
    sex: "",
    tone: 3
  },
  {
    char: "倍",
    spell: "bèi",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "倍",
    sex: "",
    tone: 4
  },
  {
    char: "倒",
    spell: "dǎo",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˋ",
    tradition: "倒",
    sex: "",
    tone: 3
  },
  {
    char: "倔",
    spell: "juè",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄩㄝˊ",
    tradition: "倔",
    sex: "",
    tone: 4
  },
  {
    char: "倘",
    spell: "tǎng",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄔㄤˊ",
    tradition: "倘",
    sex: "",
    tone: 3
  },
  {
    char: "候",
    spell: "hòu",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄡˋ",
    tradition: "候",
    sex: "",
    tone: 4
  },
  {
    char: "倚",
    spell: "yǐ",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˇ",
    tradition: "倚",
    sex: "",
    tone: 3
  },
  {
    char: "借",
    spell: "jiè",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄧㄝˋ",
    tradition: "藉",
    sex: "",
    tone: 4
  },
  {
    char: "倡",
    spell: "chàng",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˋ",
    tradition: "倡",
    sex: "",
    tone: 4
  },
  {
    char: "倦",
    spell: "juàn",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢˋ",
    tradition: "倦",
    sex: "",
    tone: 4
  },
  {
    char: "债",
    spell: "zhài",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄞˋ",
    tradition: "債",
    sex: "",
    tone: 4
  },
  {
    char: "值",
    spell: "zhí",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓˊ",
    tradition: "值",
    sex: "",
    tone: 2
  },
  {
    char: "倾",
    spell: "qīng",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄥ",
    tradition: "傾",
    sex: "",
    tone: 1
  },
  {
    char: "假",
    spell: "jiǎ",
    stroke: "11",
    radical: "亻",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "假",
    sex: "",
    tone: 3
  },
  {
    char: "偎",
    spell: "wēi",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄟ",
    tradition: "偎",
    sex: "",
    tone: 1
  },
  {
    char: "偏",
    spell: "piān",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄢ",
    tradition: "偏",
    sex: "",
    tone: 1
  },
  {
    char: "做",
    spell: "zuò",
    stroke: "11",
    radical: "亻",
    struct: "左中右结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨㄛˋ",
    tradition: "做",
    sex: "",
    tone: 4
  },
  {
    char: "停",
    spell: "tíng",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˊ",
    tradition: "停",
    sex: "",
    tone: 2
  },
  {
    char: "健",
    spell: "jiàn",
    stroke: "10",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "健",
    sex: "男",
    tone: 4
  },
  {
    char: "偶",
    spell: "ǒu",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄡˇ",
    tradition: "偶",
    sex: "",
    tone: 3
  },
  {
    char: "偷",
    spell: "tōu",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄡ",
    tradition: "偷",
    sex: "",
    tone: 1
  },
  {
    char: "偿",
    spell: "cháng",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "償",
    sex: "",
    tone: 2
  },
  {
    char: "傀",
    spell: "guī",
    stroke: "11",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟˇ",
    tradition: "傀",
    sex: "",
    tone: 3
  },
  {
    char: "傅",
    spell: "fù",
    stroke: "12",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "傅",
    sex: "",
    tone: 4
  },
  {
    char: "傍",
    spell: "bàng",
    stroke: "12",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "傍",
    sex: "",
    tone: 4
  },
  {
    char: "储",
    spell: "chǔ",
    stroke: "12",
    radical: "亻",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˇ",
    tradition: "儲",
    sex: "",
    tone: 3
  },
  {
    char: "催",
    spell: "cuī",
    stroke: "13",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟ",
    tradition: "催",
    sex: "",
    tone: 1
  },
  {
    char: "傲",
    spell: "ào",
    stroke: "12",
    radical: "亻",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄠˋ",
    tradition: "傲",
    sex: "",
    tone: 4
  },
  {
    char: "傻",
    spell: "shǎ",
    stroke: "13",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄚˇ",
    tradition: "傻",
    sex: "",
    tone: 3
  },
  {
    char: "像",
    spell: "xiàng",
    stroke: "13",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄤˋ",
    tradition: "像",
    sex: "",
    tone: 4
  },
  {
    char: "僚",
    spell: "liáo",
    stroke: "14",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "僚",
    sex: "",
    tone: 2
  },
  {
    char: "僧",
    spell: "sēng",
    stroke: "14",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄥ",
    tradition: "僧",
    sex: "",
    tone: 1
  },
  {
    char: "僵",
    spell: "jiāng",
    stroke: "15",
    radical: "亻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "僵",
    sex: "",
    tone: 1
  },
  {
    char: "僻",
    spell: "pì",
    stroke: "15",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄆㄧˋ",
    tradition: "僻",
    sex: "",
    tone: 4
  },
  {
    char: "儒",
    spell: "rú",
    stroke: "16",
    radical: "亻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨˊ",
    tradition: "儒",
    sex: "",
    tone: 2
  },
  {
    char: "儡",
    spell: "lěi",
    stroke: "17",
    radical: "亻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄟˊ",
    tradition: "儡",
    sex: "",
    tone: 3
  },
  {
    char: "儿",
    spell: "ér",
    stroke: "2",
    radical: "儿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄦˊ",
    tradition: "兒",
    sex: "",
    tone: 2
  },
  {
    char: "允",
    spell: "yǔn",
    stroke: "4",
    radical: "儿",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄩㄣˇ",
    tradition: "允",
    sex: "",
    tone: 3
  },
  {
    char: "元",
    spell: "yuán",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄩㄢˊ",
    tradition: "元",
    sex: "男",
    tone: 2
  },
  {
    char: "兄",
    spell: "xiōng",
    stroke: "5",
    radical: "儿",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄩㄥ",
    tradition: "兄",
    sex: "",
    tone: 1
  },
  {
    char: "充",
    spell: "chōng",
    stroke: "6",
    radical: "亠",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄨㄥ",
    tradition: "充",
    sex: "",
    tone: 1
  },
  {
    char: "兆",
    spell: "zhào",
    stroke: "6",
    radical: "儿",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓㄠˋ",
    tradition: "兆",
    sex: "",
    tone: 4
  },
  {
    char: "先",
    spell: "xiān",
    stroke: "6",
    radical: "儿",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄢ",
    tradition: "先",
    sex: "男",
    tone: 1
  },
  {
    char: "光",
    spell: "guāng",
    stroke: "6",
    radical: "⺌",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄍㄨㄤ",
    tradition: "光",
    sex: "男",
    tone: 1
  },
  {
    char: "克",
    spell: "kè",
    stroke: "7",
    radical: "十",
    struct: "上中下结构",
    five: "木",
    method: "-",
    mark: "ㄎㄜˋ",
    tradition: "剋",
    sex: "男",
    tone: 4
  },
  {
    char: "免",
    spell: "miǎn",
    stroke: "7",
    radical: "⺈",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄇㄧㄢˇ",
    tradition: "免",
    sex: "",
    tone: 3
  },
  {
    char: "兑",
    spell: "duì",
    stroke: "7",
    radical: "丷",
    struct: "上中下结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨㄟˋ",
    tradition: "兑",
    sex: "",
    tone: 4
  },
  {
    char: "兔",
    spell: "tù",
    stroke: "8",
    radical: "⺈",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄊㄨˋ",
    tradition: "兔",
    sex: "",
    tone: 4
  },
  {
    char: "党",
    spell: "dǎng",
    stroke: "10",
    radical: "儿",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄤˇ",
    tradition: "黨",
    sex: "",
    tone: 3
  },
  {
    char: "兜",
    spell: "dōu",
    stroke: "11",
    radical: "儿",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄉㄡ",
    tradition: "兜",
    sex: "",
    tone: 1
  },
  {
    char: "兢",
    spell: "jīng",
    stroke: "14",
    radical: "十",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄥ",
    tradition: "兢",
    sex: "",
    tone: 1
  },
  {
    char: "入",
    spell: "rù",
    stroke: "2",
    radical: "入",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄖㄨˋ",
    tradition: "入",
    sex: "",
    tone: 4
  },
  {
    char: "全",
    spell: "quán",
    stroke: "6",
    radical: "人",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄑㄩㄢˊ",
    tradition: "全",
    sex: "男",
    tone: 2
  },
  {
    char: "八",
    spell: "bā",
    stroke: "2",
    radical: "八",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄚ",
    tradition: "八",
    sex: "",
    tone: 1
  },
  {
    char: "公",
    spell: "gōng",
    stroke: "4",
    radical: "八",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄥ",
    tradition: "公",
    sex: "",
    tone: 1
  },
  {
    char: "六",
    spell: "liù",
    stroke: "4",
    radical: "亠",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄡˋ",
    tradition: "六",
    sex: "",
    tone: 4
  },
  {
    char: "兰",
    spell: "lán",
    stroke: "5",
    radical: "丷",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄌㄢˊ",
    tradition: "蘭",
    sex: "女",
    tone: 2
  },
  {
    char: "共",
    spell: "gòng",
    stroke: "6",
    radical: "八",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄥˋ",
    tradition: "共",
    sex: "",
    tone: 4
  },
  {
    char: "关",
    spell: "guān",
    stroke: "6",
    radical: "丷",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄢ",
    tradition: "關",
    sex: "",
    tone: 1
  },
  {
    char: "兴",
    spell: "xīng",
    stroke: "6",
    radical: "八",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧㄥˋ",
    tradition: "興",
    sex: "男",
    tone: 1
  },
  {
    char: "兵",
    spell: "bīng",
    stroke: "7",
    radical: "八",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄥ",
    tradition: "兵",
    sex: "",
    tone: 1
  },
  {
    char: "其",
    spell: "qí",
    stroke: "8",
    radical: "八",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧ",
    tradition: "其",
    sex: "",
    tone: 2
  },
  {
    char: "具",
    spell: "jù",
    stroke: "8",
    radical: "八",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄩˋ",
    tradition: "具",
    sex: "",
    tone: 4
  },
  {
    char: "典",
    spell: "diǎn",
    stroke: "8",
    radical: "八",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄧㄢˇ",
    tradition: "典",
    sex: "",
    tone: 3
  },
  {
    char: "养",
    spell: "yǎng",
    stroke: "9",
    radical: "丷",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄤˇ",
    tradition: "養",
    sex: "",
    tone: 3
  },
  {
    char: "兼",
    spell: "jiān",
    stroke: "10",
    radical: "丷",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢ",
    tradition: "兼",
    sex: "",
    tone: 1
  },
  {
    char: "兽",
    spell: "shòu",
    stroke: "11",
    radical: "口",
    struct: "上中下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄡˋ",
    tradition: "獸",
    sex: "",
    tone: 4
  },
  {
    char: "冀",
    spell: "jì",
    stroke: "16",
    radical: "匕、八",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "冀",
    sex: "",
    tone: 4
  },
  {
    char: "内",
    spell: "nèi",
    stroke: "4",
    radical: "丨、冂",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄚˋ",
    tradition: "内",
    sex: "",
    tone: 4
  },
  {
    char: "冈",
    spell: "gāng",
    stroke: "4",
    radical: "冂",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄍㄤ",
    tradition: "岡",
    sex: "",
    tone: 1
  },
  {
    char: "册",
    spell: "cè",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄘㄜˋ",
    tradition: "册",
    sex: "",
    tone: 4
  },
  {
    char: "再",
    spell: "zài",
    stroke: "6",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄞˋ",
    tradition: "再",
    sex: "",
    tone: 4
  },
  {
    char: "冒",
    spell: "mào",
    stroke: "9",
    radical: "曰",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄠˋ",
    tradition: "冒",
    sex: "",
    tone: 4
  },
  {
    char: "冕",
    spell: "miǎn",
    stroke: "11",
    radical: "冃",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄢˇ",
    tradition: "冕",
    sex: "",
    tone: 3
  },
  {
    char: "冗",
    spell: "rǒng",
    stroke: "4",
    radical: "冖",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄖㄨㄥˇ",
    tradition: "冗",
    sex: "",
    tone: 3
  },
  {
    char: "写",
    spell: "xiě",
    stroke: "5",
    radical: "冖",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧㄝˋ",
    tradition: "寫",
    sex: "",
    tone: 3
  },
  {
    char: "军",
    spell: "jūn",
    stroke: "6",
    radical: "冖",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄩㄣ",
    tradition: "軍",
    sex: "男",
    tone: 1
  },
  {
    char: "农",
    spell: "nóng",
    stroke: "6",
    radical: "丶",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄋㄨㄥˊ",
    tradition: "農",
    sex: "",
    tone: 2
  },
  {
    char: "冠",
    spell: "guān",
    stroke: "9",
    radical: "冖",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄢˋ",
    tradition: "冠",
    sex: "男",
    tone: 1
  },
  {
    char: "冤",
    spell: "yuān",
    stroke: "10",
    radical: "冖",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄩㄢ",
    tradition: "冤",
    sex: "",
    tone: 1
  },
  {
    char: "冬",
    spell: "dōng",
    stroke: "5",
    radical: "夂",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄥ",
    tradition: "鼕",
    sex: "男",
    tone: 1
  },
  {
    char: "冯",
    spell: "féng",
    stroke: "5",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥˊ",
    tradition: "馮",
    sex: "",
    tone: 2
  },
  {
    char: "冰",
    spell: "bīng",
    stroke: "6",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄥ",
    tradition: "冰",
    sex: "女",
    tone: 1
  },
  {
    char: "冲",
    spell: "chōng",
    stroke: "6",
    radical: "冫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄥˋ",
    tradition: "衝",
    sex: "",
    tone: 1
  },
  {
    char: "决",
    spell: "jué",
    stroke: "6",
    radical: "冫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄩㄝˊ",
    tradition: "决",
    sex: "",
    tone: 2
  },
  {
    char: "况",
    spell: "kuàng",
    stroke: "7",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄎㄨㄤˋ",
    tradition: "况",
    sex: "",
    tone: 4
  },
  {
    char: "冶",
    spell: "yě",
    stroke: "7",
    radical: "冫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄝˇ",
    tradition: "冶",
    sex: "",
    tone: 3
  },
  {
    char: "冷",
    spell: "lěng",
    stroke: "7",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄥˇ",
    tradition: "冷",
    sex: "",
    tone: 3
  },
  {
    char: "冻",
    spell: "dòng",
    stroke: "7",
    radical: "冫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄥˋ",
    tradition: "凍",
    sex: "",
    tone: 4
  },
  {
    char: "净",
    spell: "jìng",
    stroke: "8",
    radical: "冫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "净",
    sex: "",
    tone: 4
  },
  {
    char: "凄",
    spell: "qī",
    stroke: "10",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "凄",
    sex: "",
    tone: 1
  },
  {
    char: "准",
    spell: "zhǔn",
    stroke: "10",
    radical: "冫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄓㄨㄣˇ",
    tradition: "準",
    sex: "",
    tone: 3
  },
  {
    char: "凉",
    spell: "liáng",
    stroke: "10",
    radical: "冫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˊ",
    tradition: "",
    sex: "",
    tone: 2
  },
  {
    char: "凌",
    spell: "líng",
    stroke: "10",
    radical: "冫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "凌",
    sex: "",
    tone: 2
  },
  {
    char: "减",
    spell: "jiǎn",
    stroke: "11",
    radical: "冫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "减",
    sex: "",
    tone: 3
  },
  {
    char: "凑",
    spell: "còu",
    stroke: "11",
    radical: "冫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄡˋ",
    tradition: "凑",
    sex: "",
    tone: 4
  },
  {
    char: "凛",
    spell: "lǐn",
    stroke: "15",
    radical: "冫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄣˇ",
    tradition: "凛",
    sex: "",
    tone: 3
  },
  {
    char: "凝",
    spell: "níng",
    stroke: "16",
    radical: "冫",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄧㄥˊ",
    tradition: "凝",
    sex: "女",
    tone: 2
  },
  {
    char: "几",
    spell: "jǐ",
    stroke: "2",
    radical: "几",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧˇ",
    tradition: "幾",
    sex: "",
    tone: 3
  },
  {
    char: "凡",
    spell: "fán",
    stroke: "3",
    radical: "几",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄢˊ",
    tradition: "凡",
    sex: "女",
    tone: 2
  },
  {
    char: "凤",
    spell: "fèng",
    stroke: "4",
    radical: "几",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄥˋ",
    tradition: "鳳",
    sex: "女",
    tone: 4
  },
  {
    char: "凫",
    spell: "fú",
    stroke: "6",
    radical: "几",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˊ",
    tradition: "鳧",
    sex: "",
    tone: 2
  },
  {
    char: "凭",
    spell: "píng",
    stroke: "8",
    radical: "几",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄆㄧㄥˊ",
    tradition: "憑",
    sex: "",
    tone: 2
  },
  {
    char: "凯",
    spell: "kǎi",
    stroke: "8",
    radical: "几",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄞˇ",
    tradition: "凱",
    sex: "",
    tone: 3
  },
  {
    char: "凰",
    spell: "huáng",
    stroke: "11",
    radical: "几",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄤˊ",
    tradition: "凰",
    sex: "",
    tone: 2
  },
  {
    char: "凳",
    spell: "dèng",
    stroke: "14",
    radical: "癶",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄥˋ",
    tradition: "凳",
    sex: "",
    tone: 4
  },
  {
    char: "凶",
    spell: "xiōng",
    stroke: "4",
    radical: "凵",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄒㄩㄥ",
    tradition: "凶",
    sex: "",
    tone: 1
  },
  {
    char: "凸",
    spell: "tū",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄊㄨ",
    tradition: "凸",
    sex: "",
    tone: 1
  },
  {
    char: "凹",
    spell: "āo",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄠ",
    tradition: "凹",
    sex: "",
    tone: 1
  },
  {
    char: "出",
    spell: "chū",
    stroke: "5",
    radical: "凵",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄨ",
    tradition: "齣",
    sex: "",
    tone: 1
  },
  {
    char: "击",
    spell: "jī",
    stroke: "5",
    radical: "凵",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧ",
    tradition: "撃",
    sex: "",
    tone: 1
  },
  {
    char: "函",
    spell: "hán",
    stroke: "8",
    radical: "凵",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄏㄢˊ",
    tradition: "函",
    sex: "",
    tone: 2
  },
  {
    char: "凿",
    spell: "záo",
    stroke: "12",
    radical: "业",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄗㄠˊ",
    tradition: "鑿",
    sex: "",
    tone: 2
  },
  {
    char: "刀",
    spell: "dāo",
    stroke: "2",
    radical: "刀",
    struct: "独体结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "刀",
    sex: "",
    tone: 1
  },
  {
    char: "刁",
    spell: "diāo",
    stroke: "2",
    radical: "乛",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧㄠ",
    tradition: "刁",
    sex: "",
    tone: 1
  },
  {
    char: "刃",
    spell: "rèn",
    stroke: "3",
    radical: "刀",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄖㄣˋ",
    tradition: "刃",
    sex: "",
    tone: 4
  },
  {
    char: "分",
    spell: "fēn",
    stroke: "4",
    radical: "八",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄣˋ",
    tradition: "分",
    sex: "",
    tone: 1
  },
  {
    char: "切",
    spell: "qiē",
    stroke: "4",
    radical: "刀",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧㄝˋ",
    tradition: "切",
    sex: "",
    tone: 4
  },
  {
    char: "刊",
    spell: "kān",
    stroke: "5",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄎㄢ",
    tradition: "刊",
    sex: "",
    tone: 1
  },
  {
    char: "刑",
    spell: "xíng",
    stroke: "6",
    radical: "刂",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄥˊ",
    tradition: "刑",
    sex: "",
    tone: 2
  },
  {
    char: "划",
    spell: "huá",
    stroke: "6",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄏㄨㄚˊ",
    tradition: "劃",
    sex: "",
    tone: 4
  },
  {
    char: "列",
    spell: "liè",
    stroke: "6",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄧㄝˋ",
    tradition: "列",
    sex: "",
    tone: 4
  },
  {
    char: "刘",
    spell: "liú",
    stroke: "6",
    radical: "文",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄡˊ",
    tradition: "劉",
    sex: "",
    tone: 2
  },
  {
    char: "则",
    spell: "zé",
    stroke: "6",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄜˊ",
    tradition: "則",
    sex: "",
    tone: 2
  },
  {
    char: "刚",
    spell: "gāng",
    stroke: "6",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄤ",
    tradition: "剛",
    sex: "男",
    tone: 1
  },
  {
    char: "创",
    spell: "chuàng",
    stroke: "6",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄤˋ",
    tradition: "創",
    sex: "",
    tone: 4
  },
  {
    char: "初",
    spell: "chū",
    stroke: "7",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄨ",
    tradition: "初",
    sex: "",
    tone: 1
  },
  {
    char: "删",
    spell: "shān",
    stroke: "7",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢ",
    tradition: "删",
    sex: "",
    tone: 1
  },
  {
    char: "判",
    spell: "pàn",
    stroke: "7",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄆㄢˋ",
    tradition: "判",
    sex: "",
    tone: 4
  },
  {
    char: "刨",
    spell: "páo",
    stroke: "7",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄅㄠˋ",
    tradition: "刨",
    sex: "",
    tone: 2
  },
  {
    char: "利",
    spell: "lì",
    stroke: "7",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧˋ",
    tradition: "利",
    sex: "男",
    tone: 4
  },
  {
    char: "别",
    spell: "bié",
    stroke: "7",
    radical: "刂",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄝˊ",
    tradition: "彆",
    sex: "",
    tone: 2
  },
  {
    char: "刮",
    spell: "guā",
    stroke: "8",
    radical: "舌",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄍㄨㄚ",
    tradition: "颳",
    sex: "",
    tone: 1
  },
  {
    char: "到",
    spell: "dào",
    stroke: "8",
    radical: "至",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˋ",
    tradition: "到",
    sex: "",
    tone: 4
  },
  {
    char: "制",
    spell: "zhì",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓˋ",
    tradition: "製",
    sex: "",
    tone: 4
  },
  {
    char: "刷",
    spell: "shuā",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄚˋ",
    tradition: "刷",
    sex: "",
    tone: 1
  },
  {
    char: "券",
    spell: "quàn",
    stroke: "8",
    radical: "刀",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄢˋ",
    tradition: "券",
    sex: "",
    tone: 4
  },
  {
    char: "刹",
    spell: "shā",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄚˋ",
    tradition: "刹",
    sex: "",
    tone: 4
  },
  {
    char: "刺",
    spell: "cì",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "刺",
    sex: "",
    tone: 4
  },
  {
    char: "刻",
    spell: "kè",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄎㄜˋ",
    tradition: "刻",
    sex: "",
    tone: 4
  },
  {
    char: "刽",
    spell: "guì",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄨㄟˋ",
    tradition: "劊",
    sex: "",
    tone: 4
  },
  {
    char: "剂",
    spell: "jì",
    stroke: "8",
    radical: "刂",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "劑",
    sex: "",
    tone: 4
  },
  {
    char: "剃",
    spell: "tì",
    stroke: "9",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄧˋ",
    tradition: "剃",
    sex: "",
    tone: 4
  },
  {
    char: "削",
    spell: "xuē",
    stroke: "9",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "削",
    sex: "",
    tone: 1
  },
  {
    char: "前",
    spell: "qián",
    stroke: "9",
    radical: "丷",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧㄢˊ",
    tradition: "前",
    sex: "",
    tone: 2
  },
  {
    char: "剑",
    spell: "jiàn",
    stroke: "9",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "劍",
    sex: "",
    tone: 4
  },
  {
    char: "剔",
    spell: "tī",
    stroke: "10",
    radical: "刂",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧ",
    tradition: "剔",
    sex: "",
    tone: 1
  },
  {
    char: "剖",
    spell: "pōu",
    stroke: "10",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄆㄡ",
    tradition: "剖",
    sex: "",
    tone: 1
  },
  {
    char: "剥",
    spell: "bāo",
    stroke: "10",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄅㄠ",
    tradition: "剥",
    sex: "",
    tone: 1
  },
  {
    char: "剧",
    spell: "jù",
    stroke: "10",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "劇",
    sex: "",
    tone: 4
  },
  {
    char: "剩",
    spell: "shèng",
    stroke: "12",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥˋ",
    tradition: "剩",
    sex: "",
    tone: 4
  },
  {
    char: "剪",
    spell: "jiǎn",
    stroke: "11",
    radical: "刀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "剪",
    sex: "",
    tone: 3
  },
  {
    char: "副",
    spell: "fù",
    stroke: "11",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "副",
    sex: "",
    tone: 4
  },
  {
    char: "割",
    spell: "gē",
    stroke: "12",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄜ",
    tradition: "割",
    sex: "",
    tone: 1
  },
  {
    char: "剿",
    spell: "jiǎo",
    stroke: "13",
    radical: "刂",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄠ",
    tradition: "剿",
    sex: "",
    tone: 3
  },
  {
    char: "劈",
    spell: "pī",
    stroke: "15",
    radical: "刀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄆㄧˇ",
    tradition: "劈",
    sex: "",
    tone: 1
  },
  {
    char: "力",
    spell: "lì",
    stroke: "2",
    radical: "力",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧˋ",
    tradition: "力",
    sex: "男",
    tone: 4
  },
  {
    char: "劝",
    spell: "quàn",
    stroke: "4",
    radical: "又",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩㄢˋ",
    tradition: "勸",
    sex: "",
    tone: 4
  },
  {
    char: "办",
    spell: "bàn",
    stroke: "4",
    radical: "力",
    struct: "独体结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "辦",
    sex: "",
    tone: 4
  },
  {
    char: "功",
    spell: "gōng",
    stroke: "5",
    radical: "工",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "功",
    sex: "男",
    tone: 1
  },
  {
    char: "加",
    spell: "jiā",
    stroke: "5",
    radical: "力",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄚ",
    tradition: "加",
    sex: "",
    tone: 1
  },
  {
    char: "务",
    spell: "wù",
    stroke: "5",
    radical: "夊",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "務",
    sex: "",
    tone: 4
  },
  {
    char: "劣",
    spell: "liè",
    stroke: "6",
    radical: "力",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄝˋ",
    tradition: "劣",
    sex: "",
    tone: 4
  },
  {
    char: "动",
    spell: "dòng",
    stroke: "6",
    radical: "力",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄥˋ",
    tradition: "動",
    sex: "",
    tone: 4
  },
  {
    char: "助",
    spell: "zhù",
    stroke: "7",
    radical: "力",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "助",
    sex: "",
    tone: 4
  },
  {
    char: "努",
    spell: "nǔ",
    stroke: "7",
    radical: "力",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄩˇ",
    tradition: "努",
    sex: "",
    tone: 3
  },
  {
    char: "劫",
    spell: "jié",
    stroke: "7",
    radical: "力",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄝˊ",
    tradition: "劫",
    sex: "",
    tone: 2
  },
  {
    char: "励",
    spell: "lì",
    stroke: "7",
    radical: "力",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "勵",
    sex: "",
    tone: 4
  },
  {
    char: "劲",
    spell: "jìn",
    stroke: "7",
    radical: "力",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄣˋ",
    tradition: "勁",
    sex: "男",
    tone: 4
  },
  {
    char: "劳",
    spell: "láo",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄠˊ",
    tradition: "勞",
    sex: "",
    tone: 2
  },
  {
    char: "势",
    spell: "shì",
    stroke: "8",
    radical: "力",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "勢",
    sex: "",
    tone: 4
  },
  {
    char: "勃",
    spell: "bó",
    stroke: "9",
    radical: "力",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "勃",
    sex: "",
    tone: 2
  },
  {
    char: "勇",
    spell: "yǒng",
    stroke: "9",
    radical: "力",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥˇ",
    tradition: "勇",
    sex: "男",
    tone: 3
  },
  {
    char: "勉",
    spell: "miǎn",
    stroke: "9",
    radical: "力",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄢˇ",
    tradition: "勉",
    sex: "",
    tone: 3
  },
  {
    char: "勋",
    spell: "xūn",
    stroke: "9",
    radical: "力",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄒㄩㄣ",
    tradition: "勛",
    sex: "",
    tone: 1
  },
  {
    char: "勒",
    spell: "lè",
    stroke: "11",
    radical: "革",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄜˋ",
    tradition: "勒",
    sex: "",
    tone: 4
  },
  {
    char: "勘",
    spell: "kān",
    stroke: "11",
    radical: "力",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄎㄢ",
    tradition: "勘",
    sex: "",
    tone: 1
  },
  {
    char: "募",
    spell: "mù",
    stroke: "12",
    radical: "力",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "募",
    sex: "",
    tone: 4
  },
  {
    char: "勤",
    spell: "qín",
    stroke: "13",
    radical: "力",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄣˊ",
    tradition: "勤",
    sex: "女",
    tone: 2
  },
  {
    char: "勺",
    spell: "sháo",
    stroke: "3",
    radical: "勹",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄕㄠˊ",
    tradition: "勺",
    sex: "",
    tone: 2
  },
  {
    char: "勾",
    spell: "gōu",
    stroke: "4",
    radical: "勹",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄡˋ",
    tradition: "勾",
    sex: "",
    tone: 1
  },
  {
    char: "勿",
    spell: "wù",
    stroke: "4",
    radical: "勹",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄨˋ",
    tradition: "勿",
    sex: "",
    tone: 4
  },
  {
    char: "匀",
    spell: "yún",
    stroke: "4",
    radical: "勹",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄩㄣˊ",
    tradition: "匀",
    sex: "",
    tone: 2
  },
  {
    char: "包",
    spell: "bāo",
    stroke: "5",
    radical: "勹",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠ",
    tradition: "包",
    sex: "",
    tone: 1
  },
  {
    char: "匆",
    spell: "cōng",
    stroke: "5",
    radical: "勹",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄘㄨㄥ",
    tradition: "匆",
    sex: "",
    tone: 1
  },
  {
    char: "匈",
    spell: "xiōng",
    stroke: "6",
    radical: "勹",
    struct: "半包围结构",
    five: "金",
    method: "-",
    mark: "ㄒㄩㄥ",
    tradition: "匈",
    sex: "",
    tone: 1
  },
  {
    char: "匕",
    spell: "bǐ",
    stroke: "2",
    radical: "匕",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄅㄧˇ",
    tradition: "匕",
    sex: "",
    tone: 3
  },
  {
    char: "化",
    spell: "huà",
    stroke: "4",
    radical: "亻",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄚˋ",
    tradition: "化",
    sex: "",
    tone: 4
  },
  {
    char: "北",
    spell: "běi",
    stroke: "5",
    radical: "匕",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄟˇ",
    tradition: "北",
    sex: "",
    tone: 3
  },
  {
    char: "匙",
    spell: "chí",
    stroke: "11",
    radical: "匕",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "匙",
    sex: "",
    tone: 2
  },
  {
    char: "匠",
    spell: "jiàng",
    stroke: "6",
    radical: "匚",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄐㄧㄤˋ",
    tradition: "匠",
    sex: "",
    tone: 4
  },
  {
    char: "匣",
    spell: "xiá",
    stroke: "7",
    radical: "匚",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "匣",
    sex: "",
    tone: 2
  },
  {
    char: "匪",
    spell: "fěi",
    stroke: "10",
    radical: "匚",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄟˇ",
    tradition: "匪",
    sex: "",
    tone: 3
  },
  {
    char: "匹",
    spell: "pǐ",
    stroke: "4",
    radical: "匚",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧˇ",
    tradition: "匹",
    sex: "",
    tone: 3
  },
  {
    char: "区",
    spell: "qū",
    stroke: "4",
    radical: "匚",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄡ",
    tradition: "區",
    sex: "",
    tone: 1
  },
  {
    char: "医",
    spell: "yī",
    stroke: "7",
    radical: "匚",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄧ",
    tradition: "醫",
    sex: "",
    tone: 1
  },
  {
    char: "匾",
    spell: "biǎn",
    stroke: "11",
    radical: "匚",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˇ",
    tradition: "匾",
    sex: "",
    tone: 3
  },
  {
    char: "匿",
    spell: "nì",
    stroke: "10",
    radical: "匚",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˋ",
    tradition: "匿",
    sex: "",
    tone: 4
  },
  {
    char: "十",
    spell: "shí",
    stroke: "2",
    radical: "十",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕˊ",
    tradition: "十",
    sex: "",
    tone: 2
  },
  {
    char: "千",
    spell: "qiān",
    stroke: "3",
    radical: "丿",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "韆",
    sex: "",
    tone: 1
  },
  {
    char: "升",
    spell: "shēng",
    stroke: "4",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄥ",
    tradition: "升",
    sex: "",
    tone: 1
  },
  {
    char: "午",
    spell: "wǔ",
    stroke: "4",
    radical: "丿、十",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄨˇ",
    tradition: "午",
    sex: "",
    tone: 3
  },
  {
    char: "半",
    spell: "bàn",
    stroke: "5",
    radical: "丶",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄢˋ",
    tradition: "半",
    sex: "",
    tone: 4
  },
  {
    char: "华",
    spell: "huá",
    stroke: "6",
    radical: "十",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄚˊ",
    tradition: "華",
    sex: "女",
    tone: 2
  },
  {
    char: "协",
    spell: "xié",
    stroke: "6",
    radical: "十",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄝˊ",
    tradition: "協",
    sex: "",
    tone: 2
  },
  {
    char: "卑",
    spell: "bēi",
    stroke: "8",
    radical: "十",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄟ",
    tradition: "卑",
    sex: "",
    tone: 1
  },
  {
    char: "卒",
    spell: "zú",
    stroke: "8",
    radical: "亠",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄘㄨˋ",
    tradition: "卒",
    sex: "",
    tone: 2
  },
  {
    char: "卓",
    spell: "zhuó",
    stroke: "8",
    radical: "十",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄨㄛˊ",
    tradition: "卓",
    sex: "",
    tone: 2
  },
  {
    char: "单",
    spell: "dān",
    stroke: "8",
    radical: "丷",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄔㄢˊ",
    tradition: "單",
    sex: "",
    tone: 1
  },
  {
    char: "卖",
    spell: "mài",
    stroke: "8",
    radical: "十",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄞˋ",
    tradition: "賣",
    sex: "",
    tone: 4
  },
  {
    char: "南",
    spell: "nán",
    stroke: "9",
    radical: "十",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄋㄚ",
    tradition: "南",
    sex: "",
    tone: 2
  },
  {
    char: "博",
    spell: "bó",
    stroke: "12",
    radical: "十",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "博",
    sex: "男",
    tone: 2
  },
  {
    char: "卜",
    spell: "bǔ",
    stroke: "2",
    radical: "卜",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄨˇ",
    tradition: "蔔",
    sex: "",
    tone: 3
  },
  {
    char: "占",
    spell: "zhàn",
    stroke: "5",
    radical: "卜",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄢˋ",
    tradition: "占",
    sex: "",
    tone: 4
  },
  {
    char: "卡",
    spell: "kǎ",
    stroke: "5",
    radical: "⺊",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄚˇ",
    tradition: "卡",
    sex: "",
    tone: 3
  },
  {
    char: "卢",
    spell: "lú",
    stroke: "5",
    radical: "⺊",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˊ",
    tradition: "盧",
    sex: "",
    tone: 2
  },
  {
    char: "卤",
    spell: "lǔ",
    stroke: "7",
    radical: "卤",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "鹵、滷",
    sex: "",
    tone: 3
  },
  {
    char: "卦",
    spell: "guà",
    stroke: "8",
    radical: "卜",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄚˋ",
    tradition: "卦",
    sex: "",
    tone: 4
  },
  {
    char: "卧",
    spell: "wò",
    stroke: "8",
    radical: "臣",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄨㄛˋ",
    tradition: "卧",
    sex: "",
    tone: 4
  },
  {
    char: "卫",
    spell: "wèi",
    stroke: "3",
    radical: "卩、乛",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˋ",
    tradition: "衛",
    sex: "",
    tone: 4
  },
  {
    char: "印",
    spell: "yìn",
    stroke: "5",
    radical: "卩",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄧㄣˋ",
    tradition: "印",
    sex: "",
    tone: 4
  },
  {
    char: "危",
    spell: "wēi",
    stroke: "6",
    radical: "㔾",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄨㄟ",
    tradition: "危",
    sex: "",
    tone: 1
  },
  {
    char: "即",
    spell: "jí",
    stroke: "7",
    radical: "卩",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "即",
    sex: "",
    tone: 2
  },
  {
    char: "却",
    spell: "què",
    stroke: "7",
    radical: "卩",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄝˋ",
    tradition: "却",
    sex: "",
    tone: 4
  },
  {
    char: "卵",
    spell: "luǎn",
    stroke: "7",
    radical: "丿",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄢˇ",
    tradition: "卵",
    sex: "",
    tone: 3
  },
  {
    char: "卷",
    spell: "juàn",
    stroke: "8",
    radical: "㔾",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢˋ",
    tradition: "捲",
    sex: "",
    tone: 4
  },
  {
    char: "卸",
    spell: "xiè",
    stroke: "9",
    radical: "卩",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄝˋ",
    tradition: "卸",
    sex: "",
    tone: 4
  },
  {
    char: "卿",
    spell: "qīng",
    stroke: "10",
    radical: "卩",
    struct: "左中右结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧㄥ",
    tradition: "卿",
    sex: "女",
    tone: 1
  },
  {
    char: "厂",
    spell: "chǎng",
    stroke: "2",
    radical: "厂",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄢ",
    tradition: "廠",
    sex: "",
    tone: 3
  },
  {
    char: "厅",
    spell: "tīng",
    stroke: "4",
    radical: "厂",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥ",
    tradition: "廳",
    sex: "",
    tone: 1
  },
  {
    char: "历",
    spell: "lì",
    stroke: "4",
    radical: "厂",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "歷、曆",
    sex: "",
    tone: 4
  },
  {
    char: "厉",
    spell: "lì",
    stroke: "5",
    radical: "厂",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧˋ",
    tradition: "厲",
    sex: "",
    tone: 4
  },
  {
    char: "压",
    spell: "yā",
    stroke: "6",
    radical: "厂",
    struct: "半包围结构",
    five: "土",
    method: "-",
    mark: "ㄧㄚˋ",
    tradition: "壓",
    sex: "",
    tone: 1
  },
  {
    char: "厌",
    spell: "yàn",
    stroke: "6",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄚ",
    tradition: "厭",
    sex: "",
    tone: 4
  },
  {
    char: "厕",
    spell: "cè",
    stroke: "8",
    radical: "厂",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄜˋ",
    tradition: "厠",
    sex: "",
    tone: 4
  },
  {
    char: "厘",
    spell: "lí",
    stroke: "9",
    radical: "厂",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "厘",
    sex: "",
    tone: 2
  },
  {
    char: "厚",
    spell: "hòu",
    stroke: "9",
    radical: "厂",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄡˋ",
    tradition: "厚",
    sex: "男",
    tone: 4
  },
  {
    char: "原",
    spell: "yuán",
    stroke: "10",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄩㄢˊ",
    tradition: "原",
    sex: "",
    tone: 2
  },
  {
    char: "厢",
    spell: "xiāng",
    stroke: "11",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄤ",
    tradition: "厢",
    sex: "",
    tone: 1
  },
  {
    char: "厦",
    spell: "shà",
    stroke: "12",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄚˋ",
    tradition: "廈",
    sex: "",
    tone: 4
  },
  {
    char: "厨",
    spell: "chú",
    stroke: "12",
    radical: "厂",
    struct: "半包围结构",
    five: "金",
    method: "-",
    mark: "ㄔㄨˊ",
    tradition: "厨",
    sex: "",
    tone: 2
  },
  {
    char: "去",
    spell: "qù",
    stroke: "5",
    radical: "土",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩˋ",
    tradition: "去",
    sex: "",
    tone: 4
  },
  {
    char: "县",
    spell: "xiàn",
    stroke: "7",
    radical: "厶",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄒㄧㄢˋ",
    tradition: "縣",
    sex: "",
    tone: 4
  },
  {
    char: "叁",
    spell: "sān",
    stroke: "8",
    radical: "厶",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄢ",
    tradition: "叁",
    sex: "",
    tone: 1
  },
  {
    char: "参",
    spell: "cān",
    stroke: "8",
    radical: "厶",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄘㄢ",
    tradition: "參",
    sex: "",
    tone: 1
  },
  {
    char: "又",
    spell: "yòu",
    stroke: "2",
    radical: "又",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧㄡˋ",
    tradition: "又",
    sex: "",
    tone: 4
  },
  {
    char: "叉",
    spell: "chā",
    stroke: "3",
    radical: "又",
    struct: "独体结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "叉",
    sex: "",
    tone: 1
  },
  {
    char: "及",
    spell: "jí",
    stroke: "3",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "及",
    sex: "",
    tone: 2
  },
  {
    char: "友",
    spell: "yǒu",
    stroke: "4",
    radical: "又",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄡˇ",
    tradition: "友",
    sex: "男",
    tone: 3
  },
  {
    char: "双",
    spell: "shuāng",
    stroke: "4",
    radical: "又",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄕㄨㄤ",
    tradition: "雙",
    sex: "",
    tone: 1
  },
  {
    char: "反",
    spell: "fǎn",
    stroke: "4",
    radical: "⺁",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄢˇ",
    tradition: "反",
    sex: "",
    tone: 3
  },
  {
    char: "发",
    spell: "fā",
    stroke: "5",
    radical: "又",
    struct: "独体结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄚˋ",
    tradition: "發、髪",
    sex: "男",
    tone: 1
  },
  {
    char: "叔",
    spell: "shū",
    stroke: "8",
    radical: "又",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄕㄨ",
    tradition: "叔",
    sex: "",
    tone: 1
  },
  {
    char: "取",
    spell: "qǔ",
    stroke: "8",
    radical: "耳",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄩˇ",
    tradition: "取",
    sex: "",
    tone: 3
  },
  {
    char: "受",
    spell: "shòu",
    stroke: "8",
    radical: "又",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄡˋ",
    tradition: "受",
    sex: "",
    tone: 4
  },
  {
    char: "变",
    spell: "biàn",
    stroke: "8",
    radical: "又",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄅㄧㄢˋ",
    tradition: "變",
    sex: "",
    tone: 4
  },
  {
    char: "叙",
    spell: "xù",
    stroke: "9",
    radical: "又",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "叙",
    sex: "",
    tone: 4
  },
  {
    char: "叛",
    spell: "pàn",
    stroke: "9",
    radical: "又",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄢˋ",
    tradition: "叛",
    sex: "",
    tone: 4
  },
  {
    char: "叠",
    spell: "dié",
    stroke: "13",
    radical: "又",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄧㄝˊ",
    tradition: "叠",
    sex: "",
    tone: 2
  },
  {
    char: "口",
    spell: "kǒu",
    stroke: "3",
    radical: "口",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄎㄡˇ",
    tradition: "口",
    sex: "",
    tone: 3
  },
  {
    char: "古",
    spell: "gǔ",
    stroke: "5",
    radical: "十",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨˇ",
    tradition: "古",
    sex: "",
    tone: 3
  },
  {
    char: "句",
    spell: "jù",
    stroke: "5",
    radical: "勹",
    struct: "半包围结构",
    five: "木",
    method: "-",
    mark: "ㄍㄡ",
    tradition: "句",
    sex: "",
    tone: 4
  },
  {
    char: "另",
    spell: "lìng",
    stroke: "5",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄥˋ",
    tradition: "另",
    sex: "",
    tone: 4
  },
  {
    char: "叨",
    spell: "dāo",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠ",
    tradition: "叨",
    sex: "",
    tone: 1
  },
  {
    char: "只",
    spell: "zhī",
    stroke: "5",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄓˇ",
    tradition: "衹、隻",
    sex: "",
    tone: 1
  },
  {
    char: "叫",
    spell: "jiào",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "叫",
    sex: "",
    tone: 4
  },
  {
    char: "召",
    spell: "zhào",
    stroke: "5",
    radical: "刀",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠˋ",
    tradition: "召",
    sex: "",
    tone: 4
  },
  {
    char: "叭",
    spell: "bā",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "叭",
    sex: "",
    tone: 1
  },
  {
    char: "叮",
    spell: "dīng",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄥ",
    tradition: "叮",
    sex: "",
    tone: 1
  },
  {
    char: "可",
    spell: "kě",
    stroke: "5",
    radical: "口",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄜˋ",
    tradition: "可",
    sex: "女",
    tone: 3
  },
  {
    char: "台",
    spell: "tái",
    stroke: "5",
    radical: "厶",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄞˊ",
    tradition: "臺、颱、檯",
    sex: "",
    tone: 2
  },
  {
    char: "史",
    spell: "shǐ",
    stroke: "5",
    radical: "丨、口",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕˇ",
    tradition: "史",
    sex: "",
    tone: 3
  },
  {
    char: "右",
    spell: "yòu",
    stroke: "5",
    radical: "口",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄡˋ",
    tradition: "右",
    sex: "",
    tone: 4
  },
  {
    char: "叶",
    spell: "yè",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄕㄜˋ",
    tradition: "葉",
    sex: "女",
    tone: 4
  },
  {
    char: "号",
    spell: "hào",
    stroke: "5",
    radical: "口",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄠˋ",
    tradition: "號",
    sex: "",
    tone: 4
  },
  {
    char: "司",
    spell: "sī",
    stroke: "5",
    radical: "乛",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄙ",
    tradition: "司",
    sex: "",
    tone: 1
  },
  {
    char: "叹",
    spell: "tàn",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄊㄢˋ",
    tradition: "嘆",
    sex: "",
    tone: 4
  },
  {
    char: "叼",
    spell: "diāo",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄠ",
    tradition: "叼",
    sex: "",
    tone: 1
  },
  {
    char: "叽",
    spell: "jī",
    stroke: "5",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "嘰",
    sex: "",
    tone: 1
  },
  {
    char: "吁",
    spell: "xū",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩ",
    tradition: "籲",
    sex: "",
    tone: 1
  },
  {
    char: "吃",
    spell: "chī",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔ",
    tradition: "吃",
    sex: "",
    tone: 1
  },
  {
    char: "各",
    spell: "gè",
    stroke: "6",
    radical: "夂",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄜˋ",
    tradition: "各",
    sex: "",
    tone: 4
  },
  {
    char: "吆",
    spell: "yāo",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠ",
    tradition: "吆",
    sex: "",
    tone: 1
  },
  {
    char: "合",
    spell: "hé",
    stroke: "6",
    radical: "人",
    struct: "上中下结构",
    five: "水",
    method: "会意",
    mark: "ㄍㄜˇ",
    tradition: "閤",
    sex: "",
    tone: 2
  },
  {
    char: "吉",
    spell: "jí",
    stroke: "6",
    radical: "口",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "吉",
    sex: "",
    tone: 2
  },
  {
    char: "吊",
    spell: "diào",
    stroke: "6",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧㄠˋ",
    tradition: "吊",
    sex: "",
    tone: 4
  },
  {
    char: "同",
    spell: "tóng",
    stroke: "6",
    radical: "冂",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨㄥˊ",
    tradition: "同",
    sex: "",
    tone: 2
  },
  {
    char: "名",
    spell: "míng",
    stroke: "6",
    radical: "夕",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧㄥˊ",
    tradition: "名",
    sex: "",
    tone: 2
  },
  {
    char: "后",
    spell: "hòu",
    stroke: "6",
    radical: "口",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄡˋ",
    tradition: "後",
    sex: "",
    tone: 4
  },
  {
    char: "吏",
    spell: "lì",
    stroke: "6",
    radical: "口",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄌㄧˋ",
    tradition: "吏",
    sex: "",
    tone: 4
  },
  {
    char: "吐",
    spell: "tǔ",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄨˋ",
    tradition: "吐",
    sex: "",
    tone: 3
  },
  {
    char: "向",
    spell: "xiàng",
    stroke: "6",
    radical: "口",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄤˋ",
    tradition: "嚮",
    sex: "",
    tone: 4
  },
  {
    char: "吓",
    spell: "xià",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄜˋ",
    tradition: "嚇",
    sex: "",
    tone: 4
  },
  {
    char: "吕",
    spell: "lǚ",
    stroke: "6",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "吕",
    sex: "",
    tone: 3
  },
  {
    char: "吗",
    spell: "ma",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚˊ",
    tradition: "嗎",
    sex: "",
    tone: 0
  },
  {
    char: "君",
    spell: "jūn",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄩㄣ",
    tradition: "君",
    sex: "女",
    tone: 1
  },
  {
    char: "吝",
    spell: "lìn",
    stroke: "7",
    radical: "文",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˋ",
    tradition: "吝",
    sex: "",
    tone: 4
  },
  {
    char: "吞",
    spell: "tūn",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄣ",
    tradition: "吞",
    sex: "",
    tone: 1
  },
  {
    char: "吟",
    spell: "yín",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄣˊ",
    tradition: "吟",
    sex: "",
    tone: 2
  },
  {
    char: "吠",
    spell: "fèi",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄟˋ",
    tradition: "吠",
    sex: "",
    tone: 4
  },
  {
    char: "否",
    spell: "fǒu",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄡˇ",
    tradition: "否",
    sex: "",
    tone: 3
  },
  {
    char: "吧",
    spell: "bā",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚ",
    tradition: "吧",
    sex: "",
    tone: 1
  },
  {
    char: "吨",
    spell: "dūn",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄣ",
    tradition: "噸",
    sex: "",
    tone: 1
  },
  {
    char: "吩",
    spell: "fēn",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣ",
    tradition: "吩",
    sex: "",
    tone: 1
  },
  {
    char: "含",
    spell: "hán",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˊ",
    tradition: "含",
    sex: "",
    tone: 2
  },
  {
    char: "听",
    spell: "tīng",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥ",
    tradition: "聽",
    sex: "",
    tone: 1
  },
  {
    char: "吭",
    spell: "kēng",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄤˊ",
    tradition: "吭",
    sex: "",
    tone: 1
  },
  {
    char: "吮",
    spell: "shǔn",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄣˇ",
    tradition: "吮",
    sex: "",
    tone: 3
  },
  {
    char: "启",
    spell: "qǐ",
    stroke: "7",
    radical: "户",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧˇ",
    tradition: "啓",
    sex: "男",
    tone: 3
  },
  {
    char: "吱",
    spell: "zī",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗ",
    tradition: "吱",
    sex: "",
    tone: 1
  },
  {
    char: "吴",
    spell: "wú",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄨˊ",
    tradition: "吴",
    sex: "",
    tone: 2
  },
  {
    char: "吵",
    spell: "chǎo",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄠˇ",
    tradition: "吵",
    sex: "",
    tone: 3
  },
  {
    char: "吸",
    spell: "xī",
    stroke: "6",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "吸",
    sex: "",
    tone: 1
  },
  {
    char: "吹",
    spell: "chuī",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄟ",
    tradition: "吹",
    sex: "",
    tone: 1
  },
  {
    char: "吻",
    spell: "wěn",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄨㄣˇ",
    tradition: "吻",
    sex: "",
    tone: 3
  },
  {
    char: "吼",
    spell: "hǒu",
    stroke: "7",
    radical: "口",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄡˇ",
    tradition: "吼",
    sex: "",
    tone: 3
  },
  {
    char: "呀",
    spell: "yā",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚ",
    tradition: "呀",
    sex: "",
    tone: 1
  },
  {
    char: "呆",
    spell: "dāi",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄉㄞ",
    tradition: "呆",
    sex: "",
    tone: 1
  },
  {
    char: "呈",
    spell: "chéng",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "呈",
    sex: "",
    tone: 2
  },
  {
    char: "告",
    spell: "gào",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄠˋ",
    tradition: "告",
    sex: "",
    tone: 4
  },
  {
    char: "呐",
    spell: "nà",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "呐",
    sex: "",
    tone: 4
  },
  {
    char: "呕",
    spell: "ǒu",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄡˇ",
    tradition: "嘔",
    sex: "",
    tone: 3
  },
  {
    char: "员",
    spell: "yuán",
    stroke: "7",
    radical: "口",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄩㄢˊ",
    tradition: "員",
    sex: "",
    tone: 2
  },
  {
    char: "呛",
    spell: "qiāng",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄤˋ",
    tradition: "嗆",
    sex: "",
    tone: 4
  },
  {
    char: "呜",
    spell: "wū",
    stroke: "7",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨ",
    tradition: "嗚",
    sex: "",
    tone: 1
  },
  {
    char: "呢",
    spell: "ne",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˊ",
    tradition: "呢",
    sex: "",
    tone: 0
  },
  {
    char: "周",
    spell: "zhōu",
    stroke: "8",
    radical: "冂",
    struct: "半包围结构",
    five: "金",
    method: "-",
    mark: "ㄓㄡ",
    tradition: "周",
    sex: "",
    tone: 1
  },
  {
    char: "味",
    spell: "wèi",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "味",
    sex: "",
    tone: 4
  },
  {
    char: "呵",
    spell: "hē",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄚ",
    tradition: "呵",
    sex: "",
    tone: 1
  },
  {
    char: "呻",
    spell: "shēn",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣ",
    tradition: "呻",
    sex: "",
    tone: 1
  },
  {
    char: "呼",
    spell: "hū",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨ",
    tradition: "呼",
    sex: "",
    tone: 1
  },
  {
    char: "命",
    spell: "mìng",
    stroke: "8",
    radical: "人",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧㄥˋ",
    tradition: "命",
    sex: "",
    tone: 4
  },
  {
    char: "咆",
    spell: "páo",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄠˊ",
    tradition: "咆",
    sex: "",
    tone: 2
  },
  {
    char: "和",
    spell: "hé",
    stroke: "8",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "和",
    sex: "男",
    tone: 2
  },
  {
    char: "咏",
    spell: "yǒng",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥˇ",
    tradition: "咏",
    sex: "女",
    tone: 3
  },
  {
    char: "咐",
    spell: "fù",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄈㄨˋ",
    tradition: "咐",
    sex: "",
    tone: 4
  },
  {
    char: "咒",
    spell: "zhòu",
    stroke: "8",
    radical: "几",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄡˋ",
    tradition: "咒",
    sex: "",
    tone: 4
  },
  {
    char: "咕",
    spell: "gū",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "咕",
    sex: "",
    tone: 1
  },
  {
    char: "咖",
    spell: "kā",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄚ",
    tradition: "咖",
    sex: "",
    tone: 1
  },
  {
    char: "咙",
    spell: "lóng",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄥˊ",
    tradition: "嚨",
    sex: "",
    tone: 2
  },
  {
    char: "咧",
    spell: "liē",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧe",
    tradition: "咧",
    sex: "",
    tone: 1
  },
  {
    char: "咨",
    spell: "zī",
    stroke: "9",
    radical: "口",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗ",
    tradition: "咨",
    sex: "",
    tone: 1
  },
  {
    char: "咪",
    spell: "mī",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˇ",
    tradition: "咪",
    sex: "",
    tone: 1
  },
  {
    char: "咬",
    spell: "yǎo",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠˇ",
    tradition: "咬",
    sex: "",
    tone: 3
  },
  {
    char: "咱",
    spell: "zán",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄢˊ",
    tradition: "咱",
    sex: "",
    tone: 2
  },
  {
    char: "咳",
    spell: "hāi",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄞˊ",
    tradition: "咳",
    sex: "",
    tone: 1
  },
  {
    char: "咸",
    spell: "xián",
    stroke: "9",
    radical: "戈",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄢˊ",
    tradition: "鹹",
    sex: "",
    tone: 2
  },
  {
    char: "咽",
    spell: "yān",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "咽",
    sex: "",
    tone: 4
  },
  {
    char: "哀",
    spell: "āi",
    stroke: "9",
    radical: "亠",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄞ",
    tradition: "哀",
    sex: "",
    tone: 1
  },
  {
    char: "品",
    spell: "pǐn",
    stroke: "9",
    radical: "口",
    struct: "品字结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧㄣˇ",
    tradition: "品",
    sex: "",
    tone: 3
  },
  {
    char: "哄",
    spell: "hǒng",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄥˋ",
    tradition: "哄",
    sex: "",
    tone: 3
  },
  {
    char: "哆",
    spell: "duō",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄛ",
    tradition: "哆",
    sex: "",
    tone: 1
  },
  {
    char: "哈",
    spell: "hā",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄚˋ",
    tradition: "哈",
    sex: "",
    tone: 1
  },
  {
    char: "响",
    spell: "xiǎng",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄤˇ",
    tradition: "響",
    sex: "",
    tone: 3
  },
  {
    char: "哎",
    spell: "āi",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄞ",
    tradition: "哎",
    sex: "",
    tone: 1
  },
  {
    char: "哑",
    spell: "yǎ",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚˇ",
    tradition: "啞",
    sex: "",
    tone: 3
  },
  {
    char: "哗",
    spell: "huá",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄚˊ",
    tradition: "嘩",
    sex: "",
    tone: 2
  },
  {
    char: "哟",
    spell: "yō",
    stroke: "9",
    radical: "口",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "o",
    tradition: "喲",
    sex: "",
    tone: 1
  },
  {
    char: "哥",
    spell: "gē",
    stroke: "10",
    radical: "一",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄜ",
    tradition: "哥",
    sex: "",
    tone: 1
  },
  {
    char: "哨",
    spell: "shào",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄠˋ",
    tradition: "哨",
    sex: "",
    tone: 4
  },
  {
    char: "哩",
    spell: "lī",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧ",
    tradition: "哩",
    sex: "",
    tone: 1
  },
  {
    char: "哪",
    spell: "nǎ",
    stroke: "9",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "哪",
    sex: "",
    tone: 3
  },
  {
    char: "哭",
    spell: "kū",
    stroke: "10",
    radical: "犬",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨ",
    tradition: "哭",
    sex: "",
    tone: 1
  },
  {
    char: "哮",
    spell: "xiào",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄠˋ",
    tradition: "哮",
    sex: "",
    tone: 4
  },
  {
    char: "哲",
    spell: "zhé",
    stroke: "10",
    radical: "口",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄜˊ",
    tradition: "哲",
    sex: "男",
    tone: 2
  },
  {
    char: "哺",
    spell: "bǔ",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˇ",
    tradition: "哺",
    sex: "",
    tone: 3
  },
  {
    char: "哼",
    spell: "hēng",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄥ",
    tradition: "哼",
    sex: "",
    tone: 1
  },
  {
    char: "唁",
    spell: "yàn",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "唁",
    sex: "",
    tone: 4
  },
  {
    char: "唆",
    spell: "suō",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄛ",
    tradition: "唆",
    sex: "",
    tone: 1
  },
  {
    char: "唇",
    spell: "chún",
    stroke: "10",
    radical: "辰",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄨㄣˊ",
    tradition: "唇",
    sex: "",
    tone: 2
  },
  {
    char: "唉",
    spell: "āi",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞˋ",
    tradition: "唉",
    sex: "",
    tone: 4
  },
  {
    char: "唐",
    spell: "táng",
    stroke: "10",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "唐",
    sex: "",
    tone: 2
  },
  {
    char: "唠",
    spell: "lào",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄠˊ",
    tradition: "嘮",
    sex: "",
    tone: 4
  },
  {
    char: "唤",
    spell: "huàn",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "唤",
    sex: "",
    tone: 4
  },
  {
    char: "唧",
    spell: "jī",
    stroke: "10",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "唧",
    sex: "",
    tone: 1
  },
  {
    char: "唬",
    spell: "hǔ",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˇ",
    tradition: "唬",
    sex: "",
    tone: 3
  },
  {
    char: "售",
    spell: "shòu",
    stroke: "11",
    radical: "隹",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄡˋ",
    tradition: "售",
    sex: "",
    tone: 4
  },
  {
    char: "唯",
    spell: "wéi",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˊ",
    tradition: "唯",
    sex: "",
    tone: 2
  },
  {
    char: "唱",
    spell: "chàng",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˋ",
    tradition: "唱",
    sex: "",
    tone: 4
  },
  {
    char: "唾",
    spell: "tuò",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛˋ",
    tradition: "唾",
    sex: "",
    tone: 4
  },
  {
    char: "啃",
    spell: "kěn",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄣˇ",
    tradition: "啃",
    sex: "",
    tone: 3
  },
  {
    char: "啄",
    spell: "zhuó",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄛˊ",
    tradition: "啄",
    sex: "",
    tone: 2
  },
  {
    char: "商",
    spell: "shāng",
    stroke: "11",
    radical: "亠",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄤ",
    tradition: "商",
    sex: "",
    tone: 1
  },
  {
    char: "啊",
    spell: "ā",
    stroke: "10",
    radical: "口",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄚˊ",
    tradition: "啊",
    sex: "",
    tone: 1
  },
  {
    char: "啡",
    spell: "fēi",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄟ",
    tradition: "啡",
    sex: "",
    tone: 1
  },
  {
    char: "啤",
    spell: "pí",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧˊ",
    tradition: "啤",
    sex: "",
    tone: 2
  },
  {
    char: "啥",
    spell: "shá",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄚˊ",
    tradition: "啥",
    sex: "",
    tone: 2
  },
  {
    char: "啦",
    spell: "lā",
    stroke: "11",
    radical: "口",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚ",
    tradition: "啦",
    sex: "",
    tone: 1
  },
  {
    char: "啰",
    spell: "luō",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "",
    method: "形声",
    mark: "ㄌㄩo",
    tradition: "囉",
    sex: "",
    tone: 1
  },
  {
    char: "啸",
    spell: "xiào",
    stroke: "11",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄠˋ",
    tradition: "嘯",
    sex: "",
    tone: 4
  },
  {
    char: "啼",
    spell: "tí",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧˊ",
    tradition: "啼",
    sex: "",
    tone: 2
  },
  {
    char: "喂",
    spell: "wèi",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "喂",
    sex: "",
    tone: 4
  },
  {
    char: "善",
    spell: "shàn",
    stroke: "12",
    radical: "口",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄢˋ",
    tradition: "善",
    sex: "男",
    tone: 4
  },
  {
    char: "喇",
    spell: "lā",
    stroke: "12",
    radical: "口",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˊ",
    tradition: "喇",
    sex: "",
    tone: 1
  },
  {
    char: "喉",
    spell: "hóu",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄡˊ",
    tradition: "喉",
    sex: "",
    tone: 2
  },
  {
    char: "喊",
    spell: "hǎn",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˇ",
    tradition: "喊",
    sex: "",
    tone: 3
  },
  {
    char: "喘",
    spell: "chuǎn",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄢˇ",
    tradition: "喘",
    sex: "",
    tone: 3
  },
  {
    char: "喜",
    spell: "xǐ",
    stroke: "12",
    radical: "士",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧˇ",
    tradition: "喜",
    sex: "",
    tone: 3
  },
  {
    char: "喝",
    spell: "hē",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˋ",
    tradition: "喝",
    sex: "",
    tone: 1
  },
  {
    char: "喧",
    spell: "xuān",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄢ",
    tradition: "喧",
    sex: "",
    tone: 1
  },
  {
    char: "喳",
    spell: "zhā",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄚ",
    tradition: "喳",
    sex: "",
    tone: 1
  },
  {
    char: "喷",
    spell: "pēn",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄣˋ",
    tradition: "噴",
    sex: "",
    tone: 1
  },
  {
    char: "喻",
    spell: "yù",
    stroke: "12",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "喻",
    sex: "",
    tone: 4
  },
  {
    char: "嗅",
    spell: "xiù",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄡˋ",
    tradition: "嗅",
    sex: "",
    tone: 4
  },
  {
    char: "嗓",
    spell: "sǎng",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄤˇ",
    tradition: "嗓",
    sex: "",
    tone: 3
  },
  {
    char: "嗜",
    spell: "shì",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "嗜",
    sex: "",
    tone: 4
  },
  {
    char: "嗡",
    spell: "wēng",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄥ",
    tradition: "嗡",
    sex: "",
    tone: 1
  },
  {
    char: "嗤",
    spell: "chī",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔ",
    tradition: "嗤",
    sex: "",
    tone: 1
  },
  {
    char: "嗦",
    spell: "suō",
    stroke: "13",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "",
    tradition: "嗦",
    sex: "",
    tone: 1
  },
  {
    char: "嗽",
    spell: "sòu",
    stroke: "14",
    radical: "口",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄡˋ",
    tradition: "嗽",
    sex: "",
    tone: 4
  },
  {
    char: "嘀",
    spell: "dí",
    stroke: "14",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "嘀",
    sex: "",
    tone: 2
  },
  {
    char: "嘁",
    spell: "qī",
    stroke: "14",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "嘁",
    sex: "",
    tone: 1
  },
  {
    char: "嘉",
    spell: "jiā",
    stroke: "14",
    radical: "士",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚ",
    tradition: "嘉",
    sex: "男",
    tone: 1
  },
  {
    char: "嘱",
    spell: "zhǔ",
    stroke: "15",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨˇ",
    tradition: "囑",
    sex: "",
    tone: 3
  },
  {
    char: "嘲",
    spell: "cháo",
    stroke: "15",
    radical: "口",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄠˊ",
    tradition: "嘲",
    sex: "",
    tone: 2
  },
  {
    char: "嘴",
    spell: "zuǐ",
    stroke: "16",
    radical: "口",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄗㄨㄟˇ",
    tradition: "嘴",
    sex: "",
    tone: 3
  },
  {
    char: "嘶",
    spell: "sī",
    stroke: "15",
    radical: "口",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄙ",
    tradition: "嘶",
    sex: "",
    tone: 1
  },
  {
    char: "嘹",
    spell: "liáo",
    stroke: "15",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "嘹",
    sex: "",
    tone: 2
  },
  {
    char: "嘿",
    spell: "hēi",
    stroke: "15",
    radical: "口",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄏㄟ",
    tradition: "嘿",
    sex: "",
    tone: 1
  },
  {
    char: "器",
    spell: "qì",
    stroke: "16",
    radical: "口",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧˋ",
    tradition: "器",
    sex: "",
    tone: 4
  },
  {
    char: "噩",
    spell: "è",
    stroke: "16",
    radical: "王",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄜˋ",
    tradition: "噩",
    sex: "",
    tone: 4
  },
  {
    char: "噪",
    spell: "zào",
    stroke: "16",
    radical: "口",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠˋ",
    tradition: "噪",
    sex: "",
    tone: 4
  },
  {
    char: "嚎",
    spell: "háo",
    stroke: "17",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄠˊ",
    tradition: "嚎",
    sex: "",
    tone: 2
  },
  {
    char: "嚣",
    spell: "áo",
    stroke: "18",
    radical: "口",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄠˊ",
    tradition: "囂",
    sex: "",
    tone: 2
  },
  {
    char: "嚷",
    spell: "rǎng",
    stroke: "20",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄤˇ",
    tradition: "嚷",
    sex: "",
    tone: 3
  },
  {
    char: "嚼",
    spell: "jiáo",
    stroke: "20",
    radical: "口",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄠˊ",
    tradition: "嚼",
    sex: "",
    tone: 2
  },
  {
    char: "囊",
    spell: "náng",
    stroke: "22",
    radical: "一",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄤˊ",
    tradition: "囊",
    sex: "",
    tone: 2
  },
  {
    char: "囚",
    spell: "qiú",
    stroke: "5",
    radical: "囗",
    struct: "全包围结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧㄡˊ",
    tradition: "囚",
    sex: "",
    tone: 2
  },
  {
    char: "四",
    spell: "sì",
    stroke: "5",
    radical: "囗",
    struct: "全包围结构",
    five: "金",
    method: "会意",
    mark: "ㄙˋ",
    tradition: "四",
    sex: "",
    tone: 4
  },
  {
    char: "回",
    spell: "huí",
    stroke: "6",
    radical: "囗",
    struct: "全包围结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨㄟˊ",
    tradition: "迴",
    sex: "",
    tone: 2
  },
  {
    char: "因",
    spell: "yīn",
    stroke: "6",
    radical: "囗",
    struct: "全包围结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄣ",
    tradition: "因",
    sex: "",
    tone: 1
  },
  {
    char: "团",
    spell: "tuán",
    stroke: "6",
    radical: "囗",
    struct: "全包围结构",
    five: "火",
    method: "-",
    mark: "ㄊㄨㄢˊ",
    tradition: "團、糰",
    sex: "",
    tone: 2
  },
  {
    char: "囤",
    spell: "dùn",
    stroke: "7",
    radical: "囗",
    struct: "全包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄣˋ",
    tradition: "囤",
    sex: "",
    tone: 2
  },
  {
    char: "园",
    spell: "yuán",
    stroke: "7",
    radical: "囗",
    struct: "全包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "園",
    sex: "女",
    tone: 2
  },
  {
    char: "困",
    spell: "kùn",
    stroke: "7",
    radical: "囗",
    struct: "全包围结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨㄣˋ",
    tradition: "睏",
    sex: "",
    tone: 4
  },
  {
    char: "囱",
    spell: "cōng",
    stroke: "7",
    radical: "丿",
    struct: "独体结构",
    five: "",
    method: "会意",
    mark: "ㄘㄨㄥ",
    tradition: "囱",
    sex: "",
    tone: 1
  },
  {
    char: "围",
    spell: "wéi",
    stroke: "7",
    radical: "囗",
    struct: "全包围结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˊ",
    tradition: "圍",
    sex: "",
    tone: 2
  },
  {
    char: "固",
    spell: "gù",
    stroke: "8",
    radical: "囗",
    struct: "全包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˋ",
    tradition: "固",
    sex: "男",
    tone: 4
  },
  {
    char: "国",
    spell: "guó",
    stroke: "8",
    radical: "囗",
    struct: "全包围结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄛˊ",
    tradition: "國",
    sex: "男",
    tone: 2
  },
  {
    char: "图",
    spell: "tú",
    stroke: "8",
    radical: "囗",
    struct: "全包围结构",
    five: "火",
    method: "-",
    mark: "ㄊㄨˊ",
    tradition: "圖",
    sex: "",
    tone: 2
  },
  {
    char: "圃",
    spell: "pǔ",
    stroke: "10",
    radical: "囗",
    struct: "全包围结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄨˇ",
    tradition: "圃",
    sex: "",
    tone: 3
  },
  {
    char: "圆",
    spell: "yuán",
    stroke: "10",
    radical: "囗",
    struct: "全包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "圓",
    sex: "",
    tone: 2
  },
  {
    char: "圈",
    spell: "quān",
    stroke: "11",
    radical: "囗",
    struct: "全包围结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢˋ",
    tradition: "圈",
    sex: "",
    tone: 1
  },
  {
    char: "土",
    spell: "tǔ",
    stroke: "3",
    radical: "土",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄊㄨˇ",
    tradition: "土",
    sex: "",
    tone: 3
  },
  {
    char: "圣",
    spell: "shèng",
    stroke: "5",
    radical: "又",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄕㄥˋ",
    tradition: "聖",
    sex: "男",
    tone: 4
  },
  {
    char: "在",
    spell: "zài",
    stroke: "6",
    radical: "土",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄞˋ",
    tradition: "在",
    sex: "",
    tone: 4
  },
  {
    char: "地",
    spell: "dì",
    stroke: "6",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧˋ",
    tradition: "地",
    sex: "",
    tone: 4
  },
  {
    char: "场",
    spell: "chǎng",
    stroke: "6",
    radical: "土",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "場",
    sex: "",
    tone: 3
  },
  {
    char: "圾",
    spell: "jī",
    stroke: "6",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "圾",
    sex: "",
    tone: 1
  },
  {
    char: "址",
    spell: "zhǐ",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄓˇ",
    tradition: "址",
    sex: "",
    tone: 3
  },
  {
    char: "均",
    spell: "jūn",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄩㄣ",
    tradition: "均",
    sex: "",
    tone: 1
  },
  {
    char: "坊",
    spell: "fāng",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄤˊ",
    tradition: "坊",
    sex: "",
    tone: 1
  },
  {
    char: "坎",
    spell: "kǎn",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄎㄢˇ",
    tradition: "坎",
    sex: "",
    tone: 3
  },
  {
    char: "坏",
    spell: "huài",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨㄞˋ",
    tradition: "壞",
    sex: "",
    tone: 4
  },
  {
    char: "坐",
    spell: "zuò",
    stroke: "7",
    radical: "土",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨㄛˋ",
    tradition: "坐",
    sex: "",
    tone: 4
  },
  {
    char: "坑",
    spell: "kēng",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄥ",
    tradition: "坑",
    sex: "",
    tone: 1
  },
  {
    char: "块",
    spell: "kuài",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄨㄞˋ",
    tradition: "塊",
    sex: "",
    tone: 4
  },
  {
    char: "坚",
    spell: "jiān",
    stroke: "7",
    radical: "土",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢ",
    tradition: "堅",
    sex: "男",
    tone: 1
  },
  {
    char: "坛",
    spell: "tán",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "壇、罎",
    sex: "",
    tone: 2
  },
  {
    char: "坝",
    spell: "bà",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "垻、壩",
    sex: "",
    tone: 4
  },
  {
    char: "坞",
    spell: "wù",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "塢",
    sex: "",
    tone: 4
  },
  {
    char: "坟",
    spell: "fén",
    stroke: "7",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄣˊ",
    tradition: "坟",
    sex: "",
    tone: 2
  },
  {
    char: "坠",
    spell: "zhuì",
    stroke: "7",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄓㄨㄟˋ",
    tradition: "墜",
    sex: "",
    tone: 4
  },
  {
    char: "坡",
    spell: "pō",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄛ",
    tradition: "坡",
    sex: "",
    tone: 1
  },
  {
    char: "坤",
    spell: "kūn",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄨㄣ",
    tradition: "坤",
    sex: "",
    tone: 1
  },
  {
    char: "坦",
    spell: "tǎn",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄢˇ",
    tradition: "坦",
    sex: "",
    tone: 3
  },
  {
    char: "坪",
    spell: "píng",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄧㄥˊ",
    tradition: "坪",
    sex: "",
    tone: 2
  },
  {
    char: "坯",
    spell: "pī",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄧ",
    tradition: "坯",
    sex: "",
    tone: 1
  },
  {
    char: "坷",
    spell: "kē",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄜˇ",
    tradition: "坷",
    sex: "",
    tone: 1
  },
  {
    char: "垂",
    spell: "chuí",
    stroke: "8",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄟˊ",
    tradition: "垂",
    sex: "",
    tone: 2
  },
  {
    char: "垃",
    spell: "lā",
    stroke: "8",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄌㄚ",
    tradition: "垃",
    sex: "",
    tone: 1
  },
  {
    char: "垄",
    spell: "lǒng",
    stroke: "8",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄌㄨㄥˇ",
    tradition: "壟",
    sex: "",
    tone: 3
  },
  {
    char: "型",
    spell: "xíng",
    stroke: "9",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄒㄧㄥˊ",
    tradition: "型",
    sex: "",
    tone: 2
  },
  {
    char: "垒",
    spell: "lěi",
    stroke: "9",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄌㄟˇ",
    tradition: "壘",
    sex: "",
    tone: 3
  },
  {
    char: "垛",
    spell: "duǒ",
    stroke: "9",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄨㄛˇ",
    tradition: "垛",
    sex: "",
    tone: 4
  },
  {
    char: "垢",
    spell: "gòu",
    stroke: "9",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄡˋ",
    tradition: "垢",
    sex: "",
    tone: 4
  },
  {
    char: "垦",
    spell: "kěn",
    stroke: "9",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄣˇ",
    tradition: "墾",
    sex: "",
    tone: 3
  },
  {
    char: "垫",
    spell: "diàn",
    stroke: "9",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "墊",
    sex: "",
    tone: 4
  },
  {
    char: "垮",
    spell: "kuǎ",
    stroke: "9",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄨㄚˇ",
    tradition: "垮",
    sex: "",
    tone: 3
  },
  {
    char: "埂",
    spell: "gěng",
    stroke: "10",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄥˇ",
    tradition: "埂",
    sex: "",
    tone: 3
  },
  {
    char: "埃",
    spell: "āi",
    stroke: "10",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞ",
    tradition: "埃",
    sex: "",
    tone: 1
  },
  {
    char: "埋",
    spell: "mái",
    stroke: "10",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄇㄞˊ",
    tradition: "埋",
    sex: "",
    tone: 2
  },
  {
    char: "城",
    spell: "chéng",
    stroke: "9",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "城",
    sex: "",
    tone: 2
  },
  {
    char: "域",
    spell: "yù",
    stroke: "11",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "域",
    sex: "",
    tone: 4
  },
  {
    char: "埠",
    spell: "bù",
    stroke: "11",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄨˋ",
    tradition: "埠",
    sex: "",
    tone: 4
  },
  {
    char: "培",
    spell: "péi",
    stroke: "11",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄟˊ",
    tradition: "培",
    sex: "",
    tone: 2
  },
  {
    char: "基",
    spell: "jī",
    stroke: "11",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "基",
    sex: "",
    tone: 1
  },
  {
    char: "堂",
    spell: "táng",
    stroke: "11",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "堂",
    sex: "",
    tone: 2
  },
  {
    char: "堆",
    spell: "duī",
    stroke: "11",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄨㄟ",
    tradition: "堆",
    sex: "",
    tone: 1
  },
  {
    char: "堕",
    spell: "duò",
    stroke: "11",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄨㄛˇ",
    tradition: "墮",
    sex: "",
    tone: 4
  },
  {
    char: "堡",
    spell: "pù",
    stroke: "12",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄠˇ",
    tradition: "堡",
    sex: "",
    tone: 3
  },
  {
    char: "堤",
    spell: "dī",
    stroke: "12",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧ",
    tradition: "堤",
    sex: "",
    tone: 1
  },
  {
    char: "堪",
    spell: "kān",
    stroke: "12",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄢ",
    tradition: "堪",
    sex: "",
    tone: 1
  },
  {
    char: "堰",
    spell: "yàn",
    stroke: "12",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "堰",
    sex: "",
    tone: 4
  },
  {
    char: "堵",
    spell: "dǔ",
    stroke: "11",
    radical: "土",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˇ",
    tradition: "堵",
    sex: "",
    tone: 3
  },
  {
    char: "塌",
    spell: "tā",
    stroke: "13",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄚ",
    tradition: "塌",
    sex: "",
    tone: 1
  },
  {
    char: "塑",
    spell: "sù",
    stroke: "13",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "塑",
    sex: "",
    tone: 4
  },
  {
    char: "塔",
    spell: "tǎ",
    stroke: "12",
    radical: "土",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄚˇ",
    tradition: "塔",
    sex: "",
    tone: 3
  },
  {
    char: "塘",
    spell: "táng",
    stroke: "13",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "塘",
    sex: "",
    tone: 2
  },
  {
    char: "塞",
    spell: "sāi",
    stroke: "13",
    radical: "宀",
    struct: "上中下结构",
    five: "金",
    method: "-",
    mark: "ㄙㄞˋ",
    tradition: "塞",
    sex: "",
    tone: 1
  },
  {
    char: "填",
    spell: "tián",
    stroke: "13",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄧㄢˊ",
    tradition: "填",
    sex: "",
    tone: 2
  },
  {
    char: "境",
    spell: "jìng",
    stroke: "14",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "境",
    sex: "",
    tone: 4
  },
  {
    char: "墅",
    spell: "shù",
    stroke: "14",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄕㄨˋ",
    tradition: "墅",
    sex: "",
    tone: 4
  },
  {
    char: "墓",
    spell: "mù",
    stroke: "13",
    radical: "土",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "墓",
    sex: "",
    tone: 4
  },
  {
    char: "墙",
    spell: "qiáng",
    stroke: "14",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧㄤˊ",
    tradition: "墻",
    sex: "",
    tone: 2
  },
  {
    char: "增",
    spell: "zēng",
    stroke: "15",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄗㄥ",
    tradition: "增",
    sex: "",
    tone: 1
  },
  {
    char: "墨",
    spell: "mò",
    stroke: "15",
    radical: "土",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄛˋ",
    tradition: "墨",
    sex: "",
    tone: 4
  },
  {
    char: "墩",
    spell: "dūn",
    stroke: "15",
    radical: "土",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄨㄣ",
    tradition: "墩",
    sex: "",
    tone: 1
  },
  {
    char: "壁",
    spell: "bì",
    stroke: "16",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "壁",
    sex: "",
    tone: 4
  },
  {
    char: "壕",
    spell: "háo",
    stroke: "17",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄠˊ",
    tradition: "壕",
    sex: "",
    tone: 2
  },
  {
    char: "壤",
    spell: "rǎng",
    stroke: "20",
    radical: "土",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄖㄤˇ",
    tradition: "壤",
    sex: "",
    tone: 3
  },
  {
    char: "士",
    spell: "shì",
    stroke: "3",
    radical: "士",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕˋ",
    tradition: "士",
    sex: "男",
    tone: 4
  },
  {
    char: "壮",
    spell: "zhuàng",
    stroke: "6",
    radical: "丬",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄤˋ",
    tradition: "壯",
    sex: "男",
    tone: 4
  },
  {
    char: "声",
    spell: "shēng",
    stroke: "7",
    radical: "士",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥ",
    tradition: "聲",
    sex: "",
    tone: 1
  },
  {
    char: "壳",
    spell: "ké",
    stroke: "7",
    radical: "士",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄎㄜˊ",
    tradition: "殼",
    sex: "",
    tone: 2
  },
  {
    char: "壶",
    spell: "hú",
    stroke: "10",
    radical: "士",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄏㄨˊ",
    tradition: "壺",
    sex: "",
    tone: 2
  },
  {
    char: "壹",
    spell: "yī",
    stroke: "12",
    radical: "士",
    struct: "上中下结构",
    five: "土",
    method: "形声",
    mark: "ㄧ",
    tradition: "壹",
    sex: "",
    tone: 1
  },
  {
    char: "处",
    spell: "chǔ",
    stroke: "5",
    radical: "夂",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "處",
    sex: "",
    tone: 4
  },
  {
    char: "备",
    spell: "bèi",
    stroke: "8",
    radical: "夂",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄟˋ",
    tradition: "備",
    sex: "",
    tone: 4
  },
  {
    char: "复",
    spell: "fù",
    stroke: "9",
    radical: "夂",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "復、複",
    sex: "",
    tone: 4
  },
  {
    char: "夏",
    spell: "xià",
    stroke: "10",
    radical: "夂",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄒㄧㄚˋ",
    tradition: "夏",
    sex: "",
    tone: 4
  },
  {
    char: "夕",
    spell: "xī",
    stroke: "3",
    radical: "夕",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧ",
    tradition: "夕",
    sex: "",
    tone: 1
  },
  {
    char: "外",
    spell: "wài",
    stroke: "5",
    radical: "夕",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄨㄞˋ",
    tradition: "外",
    sex: "",
    tone: 4
  },
  {
    char: "多",
    spell: "duō",
    stroke: "6",
    radical: "夕",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄛ",
    tradition: "多",
    sex: "",
    tone: 1
  },
  {
    char: "夜",
    spell: "yè",
    stroke: "8",
    radical: "亠",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄝˋ",
    tradition: "夜",
    sex: "",
    tone: 4
  },
  {
    char: "够",
    spell: "gòu",
    stroke: "11",
    radical: "夕",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄡˋ",
    tradition: "够",
    sex: "",
    tone: 4
  },
  {
    char: "大",
    spell: "dà",
    stroke: "3",
    radical: "大",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄚ",
    tradition: "大",
    sex: "",
    tone: 4
  },
  {
    char: "天",
    spell: "tiān",
    stroke: "4",
    radical: "一",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄧㄢ",
    tradition: "天",
    sex: "男",
    tone: 1
  },
  {
    char: "太",
    spell: "tài",
    stroke: "4",
    radical: "大",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄊㄞˋ",
    tradition: "太",
    sex: "",
    tone: 4
  },
  {
    char: "夫",
    spell: "fū",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄨˊ",
    tradition: "夫",
    sex: "",
    tone: 1
  },
  {
    char: "夭",
    spell: "yāo",
    stroke: "4",
    radical: "丿",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄠˇ",
    tradition: "夭",
    sex: "",
    tone: 1
  },
  {
    char: "央",
    spell: "yāng",
    stroke: "5",
    radical: "大",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄤ",
    tradition: "央",
    sex: "",
    tone: 1
  },
  {
    char: "夯",
    spell: "hāng",
    stroke: "5",
    radical: "大",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄣˋ",
    tradition: "夯",
    sex: "",
    tone: 1
  },
  {
    char: "失",
    spell: "shī",
    stroke: "5",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕ",
    tradition: "失",
    sex: "",
    tone: 1
  },
  {
    char: "头",
    spell: "tóu",
    stroke: "5",
    radical: "大",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄊㄡˊ",
    tradition: "頭",
    sex: "",
    tone: 2
  },
  {
    char: "夷",
    spell: "yí",
    stroke: "6",
    radical: "一",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧˊ",
    tradition: "夷",
    sex: "",
    tone: 2
  },
  {
    char: "夸",
    spell: "kuā",
    stroke: "6",
    radical: "大",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄚ",
    tradition: "誇",
    sex: "",
    tone: 1
  },
  {
    char: "夹",
    spell: "jiā",
    stroke: "6",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄚ",
    tradition: "夾",
    sex: "",
    tone: 2
  },
  {
    char: "夺",
    spell: "duó",
    stroke: "6",
    radical: "大",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄛˊ",
    tradition: "奪",
    sex: "",
    tone: 2
  },
  {
    char: "奄",
    spell: "yǎn",
    stroke: "8",
    radical: "大",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄢˇ",
    tradition: "奄",
    sex: "",
    tone: 3
  },
  {
    char: "奇",
    spell: "qí",
    stroke: "8",
    radical: "大",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "奇",
    sex: "男",
    tone: 2
  },
  {
    char: "奈",
    spell: "nài",
    stroke: "8",
    radical: "大",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄞˋ",
    tradition: "奈",
    sex: "",
    tone: 4
  },
  {
    char: "奉",
    spell: "fèng",
    stroke: "8",
    radical: "一",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄥˋ",
    tradition: "奉",
    sex: "",
    tone: 4
  },
  {
    char: "奋",
    spell: "fèn",
    stroke: "8",
    radical: "大",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣˋ",
    tradition: "奮",
    sex: "",
    tone: 4
  },
  {
    char: "奏",
    spell: "zòu",
    stroke: "9",
    radical: "一、大",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄗㄡˋ",
    tradition: "奏",
    sex: "",
    tone: 4
  },
  {
    char: "契",
    spell: "qì",
    stroke: "9",
    radical: "大",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧˋ",
    tradition: "契",
    sex: "",
    tone: 4
  },
  {
    char: "奔",
    spell: "bēn",
    stroke: "8",
    radical: "大",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄣˋ",
    tradition: "奔",
    sex: "",
    tone: 1
  },
  {
    char: "奕",
    spell: "yì",
    stroke: "9",
    radical: "大",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "奕",
    sex: "",
    tone: 4
  },
  {
    char: "奖",
    spell: "jiǎng",
    stroke: "9",
    radical: "大",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄤˇ",
    tradition: "奬",
    sex: "",
    tone: 3
  },
  {
    char: "套",
    spell: "tào",
    stroke: "10",
    radical: "大",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄠˋ",
    tradition: "套",
    sex: "",
    tone: 4
  },
  {
    char: "奠",
    spell: "diàn",
    stroke: "12",
    radical: "大",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄉㄧㄢˋ",
    tradition: "奠",
    sex: "",
    tone: 4
  },
  {
    char: "奢",
    spell: "shē",
    stroke: "11",
    radical: "大",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄚˊ",
    tradition: "奢",
    sex: "",
    tone: 1
  },
  {
    char: "奥",
    spell: "ào",
    stroke: "12",
    radical: "大",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄠˋ",
    tradition: "奥",
    sex: "",
    tone: 4
  },
  {
    char: "女",
    spell: "nǚ",
    stroke: "3",
    radical: "女",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ˇ",
    tradition: "女",
    sex: "",
    tone: 3
  },
  {
    char: "奴",
    spell: "nú",
    stroke: "5",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄩˊ",
    tradition: "奴",
    sex: "",
    tone: 2
  },
  {
    char: "奶",
    spell: "nǎi",
    stroke: "5",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄞˇ",
    tradition: "奶",
    sex: "",
    tone: 3
  },
  {
    char: "奸",
    spell: "jiān",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄢ",
    tradition: "奸",
    sex: "",
    tone: 1
  },
  {
    char: "她",
    spell: "tā",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄚ",
    tradition: "她",
    sex: "",
    tone: 1
  },
  {
    char: "好",
    spell: "hǎo",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄠˋ",
    tradition: "好",
    sex: "",
    tone: 3
  },
  {
    char: "如",
    spell: "rú",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄖㄨˊ",
    tradition: "如",
    sex: "女",
    tone: 2
  },
  {
    char: "妄",
    spell: "wàng",
    stroke: "6",
    radical: "女",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄤˋ",
    tradition: "妄",
    sex: "",
    tone: 4
  },
  {
    char: "妆",
    spell: "zhuāng",
    stroke: "6",
    radical: "丬",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄤ",
    tradition: "妝",
    sex: "",
    tone: 1
  },
  {
    char: "妇",
    spell: "fù",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˋ",
    tradition: "婦",
    sex: "",
    tone: 4
  },
  {
    char: "妈",
    spell: "mā",
    stroke: "6",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚ",
    tradition: "媽",
    sex: "",
    tone: 1
  },
  {
    char: "妒",
    spell: "dù",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "妒",
    sex: "",
    tone: 4
  },
  {
    char: "妓",
    spell: "jì",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "妓",
    sex: "",
    tone: 4
  },
  {
    char: "妖",
    spell: "yāo",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠ",
    tradition: "妖",
    sex: "",
    tone: 1
  },
  {
    char: "妙",
    spell: "miào",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧㄠˋ",
    tradition: "妙",
    sex: "",
    tone: 4
  },
  {
    char: "妥",
    spell: "tuǒ",
    stroke: "7",
    radical: "爫",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨㄛˇ",
    tradition: "妥",
    sex: "",
    tone: 3
  },
  {
    char: "妨",
    spell: "fáng",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˊ",
    tradition: "妨",
    sex: "",
    tone: 2
  },
  {
    char: "妹",
    spell: "mèi",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄟˋ",
    tradition: "妹",
    sex: "女",
    tone: 4
  },
  {
    char: "妻",
    spell: "qī",
    stroke: "8",
    radical: "女",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧˋ",
    tradition: "妻",
    sex: "",
    tone: 1
  },
  {
    char: "姆",
    spell: "mǔ",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "",
    tradition: "姆",
    sex: "",
    tone: 3
  },
  {
    char: "姊",
    spell: "zǐ",
    stroke: "7",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗˇ",
    tradition: "姊",
    sex: "",
    tone: 3
  },
  {
    char: "始",
    spell: "shǐ",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˇ",
    tradition: "始",
    sex: "",
    tone: 3
  },
  {
    char: "姐",
    spell: "jiě",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄝˇ",
    tradition: "姐",
    sex: "",
    tone: 3
  },
  {
    char: "姑",
    spell: "gū",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "姑",
    sex: "",
    tone: 1
  },
  {
    char: "姓",
    spell: "xìng",
    stroke: "8",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄥˋ",
    tradition: "姓",
    sex: "",
    tone: 4
  },
  {
    char: "委",
    spell: "wěi",
    stroke: "8",
    radical: "禾",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˇ",
    tradition: "委",
    sex: "",
    tone: 3
  },
  {
    char: "姚",
    spell: "yáo",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄠˊ",
    tradition: "姚",
    sex: "",
    tone: 2
  },
  {
    char: "姜",
    spell: "jiāng",
    stroke: "9",
    radical: "女",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "薑",
    sex: "",
    tone: 1
  },
  {
    char: "姥",
    spell: "lǎo",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄠˇ",
    tradition: "姥",
    sex: "",
    tone: 3
  },
  {
    char: "姨",
    spell: "yí",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˊ",
    tradition: "姨",
    sex: "",
    tone: 2
  },
  {
    char: "姻",
    spell: "yīn",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄣ",
    tradition: "姻",
    sex: "",
    tone: 1
  },
  {
    char: "姿",
    spell: "zī",
    stroke: "9",
    radical: "女",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗ",
    tradition: "姿",
    sex: "",
    tone: 1
  },
  {
    char: "威",
    spell: "wēi",
    stroke: "9",
    radical: "戈",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟ",
    tradition: "威",
    sex: "",
    tone: 1
  },
  {
    char: "娃",
    spell: "wá",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄚˊ",
    tradition: "娃",
    sex: "",
    tone: 2
  },
  {
    char: "娄",
    spell: "lóu",
    stroke: "9",
    radical: "女",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄡˊ",
    tradition: "婁",
    sex: "",
    tone: 2
  },
  {
    char: "娇",
    spell: "jiāo",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "嬌",
    sex: "",
    tone: 1
  },
  {
    char: "娘",
    spell: "niáng",
    stroke: "10",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄧㄤˊ",
    tradition: "娘",
    sex: "",
    tone: 2
  },
  {
    char: "娜",
    spell: "nà",
    stroke: "9",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "娜",
    sex: "女",
    tone: 4
  },
  {
    char: "娩",
    spell: "miǎn",
    stroke: "10",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄧㄢˇ",
    tradition: "娩",
    sex: "",
    tone: 3
  },
  {
    char: "娱",
    spell: "yú",
    stroke: "10",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "娱",
    sex: "",
    tone: 2
  },
  {
    char: "娶",
    spell: "qǔ",
    stroke: "11",
    radical: "女",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩˇ",
    tradition: "娶",
    sex: "",
    tone: 3
  },
  {
    char: "婆",
    spell: "pó",
    stroke: "11",
    radical: "女",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄛˊ",
    tradition: "婆",
    sex: "",
    tone: 2
  },
  {
    char: "婉",
    spell: "wǎn",
    stroke: "11",
    radical: "女",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "婉",
    sex: "女",
    tone: 3
  },
  {
    char: "婚",
    spell: "hūn",
    stroke: "11",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄣ",
    tradition: "婚",
    sex: "",
    tone: 1
  },
  {
    char: "婴",
    spell: "yīng",
    stroke: "11",
    radical: "女",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "嬰",
    sex: "",
    tone: 1
  },
  {
    char: "婶",
    spell: "shěn",
    stroke: "11",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣˇ",
    tradition: "嬸",
    sex: "",
    tone: 3
  },
  {
    char: "婿",
    spell: "xù",
    stroke: "12",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "婿",
    sex: "",
    tone: 4
  },
  {
    char: "媒",
    spell: "méi",
    stroke: "12",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "媒",
    sex: "",
    tone: 2
  },
  {
    char: "媚",
    spell: "mèi",
    stroke: "12",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˋ",
    tradition: "媚",
    sex: "",
    tone: 4
  },
  {
    char: "媳",
    spell: "xí",
    stroke: "13",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧˊ",
    tradition: "媳",
    sex: "",
    tone: 2
  },
  {
    char: "嫁",
    spell: "jià",
    stroke: "13",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "嫁",
    sex: "",
    tone: 4
  },
  {
    char: "嫂",
    spell: "sǎo",
    stroke: "12",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄙㄠˇ",
    tradition: "嫂",
    sex: "",
    tone: 3
  },
  {
    char: "嫉",
    spell: "jí",
    stroke: "13",
    radical: "女",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧˊ",
    tradition: "嫉",
    sex: "",
    tone: 2
  },
  {
    char: "嫌",
    spell: "xián",
    stroke: "13",
    radical: "女",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˊ",
    tradition: "嫌",
    sex: "",
    tone: 2
  },
  {
    char: "嫡",
    spell: "dí",
    stroke: "14",
    radical: "女",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "嫡",
    sex: "",
    tone: 2
  },
  {
    char: "嫩",
    spell: "nèn",
    stroke: "14",
    radical: "女",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄣˋ",
    tradition: "嫩",
    sex: "",
    tone: 4
  },
  {
    char: "嬉",
    spell: "xī",
    stroke: "15",
    radical: "女",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "嬉",
    sex: "",
    tone: 1
  },
  {
    char: "子",
    spell: "zǐ",
    stroke: "3",
    radical: "子",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄗˋ",
    tradition: "子",
    sex: "男",
    tone: 3
  },
  {
    char: "孔",
    spell: "kǒng",
    stroke: "4",
    radical: "子",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨㄥˇ",
    tradition: "孔",
    sex: "",
    tone: 3
  },
  {
    char: "孕",
    spell: "yùn",
    stroke: "5",
    radical: "子",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄩㄣˋ",
    tradition: "孕",
    sex: "",
    tone: 4
  },
  {
    char: "字",
    spell: "zì",
    stroke: "6",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗˋ",
    tradition: "字",
    sex: "",
    tone: 4
  },
  {
    char: "存",
    spell: "cún",
    stroke: "6",
    radical: "子",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄣˊ",
    tradition: "存",
    sex: "",
    tone: 2
  },
  {
    char: "孙",
    spell: "sūn",
    stroke: "6",
    radical: "子",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄣ",
    tradition: "孫",
    sex: "",
    tone: 1
  },
  {
    char: "孝",
    spell: "xiào",
    stroke: "7",
    radical: "耂",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄠˋ",
    tradition: "孝",
    sex: "",
    tone: 4
  },
  {
    char: "孟",
    spell: "mèng",
    stroke: "8",
    radical: "子",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄥˋ",
    tradition: "孟",
    sex: "",
    tone: 4
  },
  {
    char: "季",
    spell: "jì",
    stroke: "8",
    radical: "禾",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "季",
    sex: "",
    tone: 4
  },
  {
    char: "孤",
    spell: "gū",
    stroke: "8",
    radical: "子",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "孤",
    sex: "",
    tone: 1
  },
  {
    char: "学",
    spell: "xué",
    stroke: "8",
    radical: "子",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄒㄩㄝˊ",
    tradition: "學",
    sex: "男",
    tone: 2
  },
  {
    char: "孩",
    spell: "hái",
    stroke: "9",
    radical: "子",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄞˊ",
    tradition: "孩",
    sex: "",
    tone: 2
  },
  {
    char: "孵",
    spell: "fū",
    stroke: "14",
    radical: "爫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨ",
    tradition: "孵",
    sex: "",
    tone: 1
  },
  {
    char: "孽",
    spell: "niè",
    stroke: "19",
    radical: "子",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧㄝˋ",
    tradition: "孽",
    sex: "",
    tone: 4
  },
  {
    char: "宁",
    spell: "níng",
    stroke: "5",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄋㄧㄥˊ",
    tradition: "寜",
    sex: "男",
    tone: 2
  },
  {
    char: "它",
    spell: "tā",
    stroke: "5",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄚ",
    tradition: "它",
    sex: "",
    tone: 1
  },
  {
    char: "宅",
    spell: "zhái",
    stroke: "6",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄞˊ",
    tradition: "宅",
    sex: "",
    tone: 2
  },
  {
    char: "宇",
    spell: "yǔ",
    stroke: "6",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩˇ",
    tradition: "宇",
    sex: "男",
    tone: 3
  },
  {
    char: "守",
    spell: "shǒu",
    stroke: "6",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄡˇ",
    tradition: "守",
    sex: "",
    tone: 3
  },
  {
    char: "安",
    spell: "ān",
    stroke: "6",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄢ",
    tradition: "安",
    sex: "男",
    tone: 1
  },
  {
    char: "宋",
    spell: "sòng",
    stroke: "7",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨㄥˋ",
    tradition: "宋",
    sex: "",
    tone: 4
  },
  {
    char: "完",
    spell: "wán",
    stroke: "7",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄢˊ",
    tradition: "完",
    sex: "",
    tone: 2
  },
  {
    char: "宏",
    spell: "hóng",
    stroke: "7",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄥˊ",
    tradition: "宏",
    sex: "男",
    tone: 2
  },
  {
    char: "宗",
    spell: "zōng",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨㄥ",
    tradition: "宗",
    sex: "",
    tone: 1
  },
  {
    char: "官",
    spell: "guān",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄢ",
    tradition: "官",
    sex: "",
    tone: 1
  },
  {
    char: "宙",
    spell: "zhòu",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄡˋ",
    tradition: "宙",
    sex: "",
    tone: 4
  },
  {
    char: "定",
    spell: "dìng",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄧㄥˋ",
    tradition: "定",
    sex: "",
    tone: 4
  },
  {
    char: "宛",
    spell: "wǎn",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "宛",
    sex: "女",
    tone: 3
  },
  {
    char: "宜",
    spell: "yí",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄧˊ",
    tradition: "宜",
    sex: "女",
    tone: 2
  },
  {
    char: "宝",
    spell: "bǎo",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄅㄠˇ",
    tradition: "寶",
    sex: "",
    tone: 3
  },
  {
    char: "实",
    spell: "shí",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕˊ",
    tradition: "實",
    sex: "",
    tone: 2
  },
  {
    char: "宠",
    spell: "chǒng",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄥˇ",
    tradition: "寵",
    sex: "",
    tone: 3
  },
  {
    char: "审",
    spell: "shěn",
    stroke: "8",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄣˇ",
    tradition: "審",
    sex: "",
    tone: 3
  },
  {
    char: "客",
    spell: "kè",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜˋ",
    tradition: "客",
    sex: "",
    tone: 4
  },
  {
    char: "宣",
    spell: "xuān",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄢ",
    tradition: "宣",
    sex: "",
    tone: 1
  },
  {
    char: "室",
    spell: "shì",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕˋ",
    tradition: "室",
    sex: "",
    tone: 4
  },
  {
    char: "宦",
    spell: "huàn",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄢˋ",
    tradition: "宦",
    sex: "",
    tone: 4
  },
  {
    char: "宪",
    spell: "xiàn",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧㄢˋ",
    tradition: "憲",
    sex: "",
    tone: 4
  },
  {
    char: "宫",
    spell: "gōng",
    stroke: "9",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄍㄨㄥ",
    tradition: "宫",
    sex: "",
    tone: 1
  },
  {
    char: "宰",
    spell: "zǎi",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄞˇ",
    tradition: "宰",
    sex: "",
    tone: 3
  },
  {
    char: "害",
    spell: "hài",
    stroke: "10",
    radical: "宀",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄞˋ",
    tradition: "害",
    sex: "",
    tone: 4
  },
  {
    char: "宴",
    spell: "yàn",
    stroke: "10",
    radical: "宀",
    struct: "上中下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "宴",
    sex: "",
    tone: 4
  },
  {
    char: "宵",
    spell: "xiāo",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "宵",
    sex: "",
    tone: 1
  },
  {
    char: "家",
    spell: "jiā",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨ",
    tradition: "傢",
    sex: "男",
    tone: 1
  },
  {
    char: "容",
    spell: "róng",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄖㄨㄥˊ",
    tradition: "容",
    sex: "",
    tone: 2
  },
  {
    char: "宽",
    spell: "kuān",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄢ",
    tradition: "寬",
    sex: "",
    tone: 1
  },
  {
    char: "宾",
    spell: "bīn",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄣ",
    tradition: "賓",
    sex: "",
    tone: 1
  },
  {
    char: "宿",
    spell: "sù",
    stroke: "11",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "宿",
    sex: "",
    tone: 4
  },
  {
    char: "寂",
    spell: "jì",
    stroke: "11",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "寂",
    sex: "",
    tone: 4
  },
  {
    char: "寄",
    spell: "jì",
    stroke: "11",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "寄",
    sex: "",
    tone: 4
  },
  {
    char: "密",
    spell: "mì",
    stroke: "11",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˋ",
    tradition: "密",
    sex: "",
    tone: 4
  },
  {
    char: "寇",
    spell: "kòu",
    stroke: "11",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄡˋ",
    tradition: "寇",
    sex: "",
    tone: 4
  },
  {
    char: "富",
    spell: "fù",
    stroke: "12",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "富",
    sex: "男",
    tone: 4
  },
  {
    char: "寒",
    spell: "hán",
    stroke: "12",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄢˊ",
    tradition: "寒",
    sex: "女",
    tone: 2
  },
  {
    char: "寓",
    spell: "yù",
    stroke: "12",
    radical: "宀",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "寓",
    sex: "",
    tone: 4
  },
  {
    char: "寝",
    spell: "qǐn",
    stroke: "13",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄣˇ",
    tradition: "寢",
    sex: "",
    tone: 3
  },
  {
    char: "寞",
    spell: "mò",
    stroke: "13",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "寞",
    sex: "",
    tone: 4
  },
  {
    char: "察",
    spell: "chá",
    stroke: "14",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄚˊ",
    tradition: "察",
    sex: "",
    tone: 2
  },
  {
    char: "寡",
    spell: "guǎ",
    stroke: "14",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄍㄨㄚˇ",
    tradition: "寡",
    sex: "",
    tone: 3
  },
  {
    char: "寥",
    spell: "liáo",
    stroke: "14",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "寥",
    sex: "",
    tone: 2
  },
  {
    char: "寨",
    spell: "zhài",
    stroke: "14",
    radical: "宀",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄞˋ",
    tradition: "寨",
    sex: "",
    tone: 4
  },
  {
    char: "寸",
    spell: "cùn",
    stroke: "3",
    radical: "寸",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄘㄨㄣˋ",
    tradition: "寸",
    sex: "",
    tone: 4
  },
  {
    char: "对",
    spell: "duì",
    stroke: "5",
    radical: "又",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄟˋ",
    tradition: "對",
    sex: "",
    tone: 4
  },
  {
    char: "寺",
    spell: "sì",
    stroke: "6",
    radical: "土",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄙˋ",
    tradition: "寺",
    sex: "",
    tone: 4
  },
  {
    char: "寻",
    spell: "xún",
    stroke: "6",
    radical: "彐",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄒㄩㄣˊ",
    tradition: "尋",
    sex: "",
    tone: 2
  },
  {
    char: "导",
    spell: "dǎo",
    stroke: "6",
    radical: "巳",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˇ",
    tradition: "導",
    sex: "",
    tone: 3
  },
  {
    char: "寿",
    spell: "shòu",
    stroke: "7",
    radical: "寸",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄡˋ",
    tradition: "壽",
    sex: "",
    tone: 4
  },
  {
    char: "封",
    spell: "fēng",
    stroke: "9",
    radical: "寸",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄥ",
    tradition: "封",
    sex: "",
    tone: 1
  },
  {
    char: "射",
    spell: "shè",
    stroke: "10",
    radical: "身",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄜˋ",
    tradition: "射",
    sex: "",
    tone: 4
  },
  {
    char: "将",
    spell: "jiāng",
    stroke: "9",
    radical: "丬",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄤˋ",
    tradition: "將",
    sex: "",
    tone: 1
  },
  {
    char: "尉",
    spell: "wèi",
    stroke: "11",
    radical: "寸",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˋ",
    tradition: "尉",
    sex: "",
    tone: 4
  },
  {
    char: "尊",
    spell: "zūn",
    stroke: "12",
    radical: "寸",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨㄣ",
    tradition: "尊",
    sex: "",
    tone: 1
  },
  {
    char: "小",
    spell: "xiǎo",
    stroke: "3",
    radical: "小",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄠˇ",
    tradition: "小",
    sex: "",
    tone: 3
  },
  {
    char: "少",
    spell: "shǎo",
    stroke: "4",
    radical: "小",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄠˇ",
    tradition: "少",
    sex: "",
    tone: 3
  },
  {
    char: "尔",
    spell: "ěr",
    stroke: "5",
    radical: "小",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄦˇ",
    tradition: "爾",
    sex: "",
    tone: 3
  },
  {
    char: "尖",
    spell: "jiān",
    stroke: "6",
    radical: "小",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄢ",
    tradition: "尖",
    sex: "",
    tone: 1
  },
  {
    char: "尘",
    spell: "chén",
    stroke: "6",
    radical: "小",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄔㄣˊ",
    tradition: "塵",
    sex: "",
    tone: 2
  },
  {
    char: "尚",
    spell: "shàng",
    stroke: "8",
    radical: "⺌",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄤˋ",
    tradition: "尚",
    sex: "",
    tone: 4
  },
  {
    char: "尝",
    spell: "cháng",
    stroke: "9",
    radical: "⺌",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "嘗",
    sex: "",
    tone: 2
  },
  {
    char: "尤",
    spell: "yóu",
    stroke: "4",
    radical: "尢",
    struct: "独体结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡˊ",
    tradition: "尤",
    sex: "",
    tone: 2
  },
  {
    char: "就",
    spell: "jiù",
    stroke: "12",
    radical: "亠",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄡˋ",
    tradition: "就",
    sex: "",
    tone: 4
  },
  {
    char: "尸",
    spell: "shī",
    stroke: "3",
    radical: "尸",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕ",
    tradition: "尸",
    sex: "",
    tone: 1
  },
  {
    char: "尺",
    spell: "chǐ",
    stroke: "4",
    radical: "尸",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄔㄜˇ",
    tradition: "尺",
    sex: "",
    tone: 3
  },
  {
    char: "尼",
    spell: "ní",
    stroke: "5",
    radical: "尸",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄧˊ",
    tradition: "尼",
    sex: "",
    tone: 2
  },
  {
    char: "尽",
    spell: "jìn",
    stroke: "6",
    radical: "尸",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄐㄧㄣˋ",
    tradition: "盡、儘",
    sex: "",
    tone: 4
  },
  {
    char: "尾",
    spell: "wěi",
    stroke: "7",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄨㄟˇ",
    tradition: "尾",
    sex: "",
    tone: 3
  },
  {
    char: "尿",
    spell: "niào",
    stroke: "7",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄋㄧㄠˋ",
    tradition: "尿",
    sex: "",
    tone: 4
  },
  {
    char: "局",
    spell: "jú",
    stroke: "7",
    radical: "尸",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄩˊ",
    tradition: "局",
    sex: "",
    tone: 2
  },
  {
    char: "屁",
    spell: "pì",
    stroke: "7",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧˋ",
    tradition: "屁",
    sex: "",
    tone: 4
  },
  {
    char: "层",
    spell: "céng",
    stroke: "7",
    radical: "尸",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄥˊ",
    tradition: "層",
    sex: "",
    tone: 2
  },
  {
    char: "居",
    spell: "jū",
    stroke: "8",
    radical: "尸",
    struct: "半包围结构",
    five: "木",
    method: "-",
    mark: "ㄐㄩ",
    tradition: "居",
    sex: "",
    tone: 1
  },
  {
    char: "屈",
    spell: "qū",
    stroke: "8",
    radical: "尸",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩ",
    tradition: "屈",
    sex: "",
    tone: 1
  },
  {
    char: "屉",
    spell: "tì",
    stroke: "8",
    radical: "尸",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄧˋ",
    tradition: "屉",
    sex: "",
    tone: 4
  },
  {
    char: "届",
    spell: "jiè",
    stroke: "8",
    radical: "尸",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄝˋ",
    tradition: "届",
    sex: "",
    tone: 4
  },
  {
    char: "屋",
    spell: "wū",
    stroke: "9",
    radical: "尸",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄨ",
    tradition: "屋",
    sex: "",
    tone: 1
  },
  {
    char: "屎",
    spell: "shǐ",
    stroke: "9",
    radical: "尸",
    struct: "半包围结构",
    five: "",
    method: "形声",
    mark: "ㄕˇ",
    tradition: "屎",
    sex: "",
    tone: 3
  },
  {
    char: "屏",
    spell: "bīng",
    stroke: "9",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄥˇ",
    tradition: "屏",
    sex: "",
    tone: 2
  },
  {
    char: "屑",
    spell: "xiè",
    stroke: "10",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "屑",
    sex: "",
    tone: 4
  },
  {
    char: "展",
    spell: "zhǎn",
    stroke: "10",
    radical: "尸",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄢˇ",
    tradition: "展",
    sex: "",
    tone: 3
  },
  {
    char: "属",
    spell: "shǔ",
    stroke: "12",
    radical: "尸",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "屬",
    sex: "",
    tone: 3
  },
  {
    char: "屠",
    spell: "tú",
    stroke: "11",
    radical: "尸",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨˊ",
    tradition: "屠",
    sex: "",
    tone: 2
  },
  {
    char: "屡",
    spell: "lǚ",
    stroke: "12",
    radical: "尸",
    struct: "半包围结构",
    five: "",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "屢",
    sex: "",
    tone: 3
  },
  {
    char: "履",
    spell: "lǚ",
    stroke: "15",
    radical: "尸",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "履",
    sex: "",
    tone: 3
  },
  {
    char: "屯",
    spell: "tún",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨㄣˊ",
    tradition: "屯",
    sex: "",
    tone: 2
  },
  {
    char: "山",
    spell: "shān",
    stroke: "3",
    radical: "山",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄕㄢ",
    tradition: "山",
    sex: "男",
    tone: 1
  },
  {
    char: "屹",
    spell: "yì",
    stroke: "6",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "屹",
    sex: "",
    tone: 4
  },
  {
    char: "屿",
    spell: "yǔ",
    stroke: "6",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩˇ",
    tradition: "嶼",
    sex: "",
    tone: 3
  },
  {
    char: "岁",
    spell: "suì",
    stroke: "6",
    radical: "山",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄙㄨㄟˋ",
    tradition: "歲",
    sex: "",
    tone: 4
  },
  {
    char: "岂",
    spell: "qǐ",
    stroke: "6",
    radical: "山",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧˇ",
    tradition: "豈",
    sex: "",
    tone: 3
  },
  {
    char: "岔",
    spell: "chà",
    stroke: "7",
    radical: "八",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄚˋ",
    tradition: "岔",
    sex: "",
    tone: 4
  },
  {
    char: "岖",
    spell: "qū",
    stroke: "7",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄑㄩ",
    tradition: "嶇",
    sex: "",
    tone: 1
  },
  {
    char: "岗",
    spell: "gǎng",
    stroke: "7",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄤˋ",
    tradition: "崗",
    sex: "",
    tone: 3
  },
  {
    char: "岛",
    spell: "dǎo",
    stroke: "7",
    radical: "山",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˇ",
    tradition: "島",
    sex: "",
    tone: 3
  },
  {
    char: "岩",
    spell: "yán",
    stroke: "8",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄢˊ",
    tradition: "岩",
    sex: "男",
    tone: 2
  },
  {
    char: "岭",
    spell: "lǐng",
    stroke: "8",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄌㄧㄥˇ",
    tradition: "嶺",
    sex: "",
    tone: 3
  },
  {
    char: "岳",
    spell: "yuè",
    stroke: "8",
    radical: "山",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄩㄝˋ",
    tradition: "岳",
    sex: "",
    tone: 4
  },
  {
    char: "岸",
    spell: "àn",
    stroke: "8",
    radical: "山",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄢˋ",
    tradition: "岸",
    sex: "",
    tone: 4
  },
  {
    char: "峡",
    spell: "xiá",
    stroke: "9",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "峽",
    sex: "",
    tone: 2
  },
  {
    char: "峦",
    spell: "luán",
    stroke: "9",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄌㄨㄢˊ",
    tradition: "巒",
    sex: "",
    tone: 2
  },
  {
    char: "峭",
    spell: "qiào",
    stroke: "10",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧㄠˋ",
    tradition: "峭",
    sex: "",
    tone: 4
  },
  {
    char: "峰",
    spell: "fēng",
    stroke: "10",
    radical: "山",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥ",
    tradition: "峰",
    sex: "男",
    tone: 1
  },
  {
    char: "峻",
    spell: "jùn",
    stroke: "10",
    radical: "山",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩㄣˋ",
    tradition: "峻",
    sex: "",
    tone: 4
  },
  {
    char: "崇",
    spell: "chóng",
    stroke: "11",
    radical: "山",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄥˊ",
    tradition: "崇",
    sex: "",
    tone: 2
  },
  {
    char: "崎",
    spell: "qí",
    stroke: "11",
    radical: "山",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "崎",
    sex: "",
    tone: 2
  },
  {
    char: "崔",
    spell: "cuī",
    stroke: "11",
    radical: "山",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄨㄟ",
    tradition: "崔",
    sex: "",
    tone: 1
  },
  {
    char: "崖",
    spell: "yá",
    stroke: "11",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚˊ",
    tradition: "崖",
    sex: "",
    tone: 2
  },
  {
    char: "崩",
    spell: "bēng",
    stroke: "11",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄥ",
    tradition: "崩",
    sex: "",
    tone: 1
  },
  {
    char: "崭",
    spell: "zhǎn",
    stroke: "11",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄓㄢˇ",
    tradition: "嶄",
    sex: "",
    tone: 3
  },
  {
    char: "嵌",
    spell: "qiàn",
    stroke: "12",
    radical: "山",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢˋ",
    tradition: "嵌",
    sex: "",
    tone: 4
  },
  {
    char: "巍",
    spell: "wēi",
    stroke: "20",
    radical: "山",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟ",
    tradition: "巍",
    sex: "",
    tone: 1
  },
  {
    char: "川",
    spell: "chuān",
    stroke: "3",
    radical: "丿",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄨㄢ",
    tradition: "川",
    sex: "",
    tone: 1
  },
  {
    char: "州",
    spell: "zhōu",
    stroke: "6",
    radical: "丶",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄡ",
    tradition: "州",
    sex: "",
    tone: 1
  },
  {
    char: "巡",
    spell: "xún",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄣˊ",
    tradition: "巡",
    sex: "",
    tone: 2
  },
  {
    char: "巢",
    spell: "cháo",
    stroke: "11",
    radical: "巛",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄔㄠˊ",
    tradition: "巢",
    sex: "",
    tone: 2
  },
  {
    char: "工",
    spell: "gōng",
    stroke: "3",
    radical: "工",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄥ",
    tradition: "工",
    sex: "",
    tone: 1
  },
  {
    char: "左",
    spell: "zuǒ",
    stroke: "5",
    radical: "工",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄗㄨㄛˇ",
    tradition: "左",
    sex: "",
    tone: 3
  },
  {
    char: "巧",
    spell: "qiǎo",
    stroke: "5",
    radical: "工",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˇ",
    tradition: "巧",
    sex: "女",
    tone: 3
  },
  {
    char: "巨",
    spell: "jù",
    stroke: "4",
    radical: "匚",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄩˋ",
    tradition: "巨",
    sex: "",
    tone: 4
  },
  {
    char: "巩",
    spell: "gǒng",
    stroke: "6",
    radical: "工",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥˇ",
    tradition: "鞏",
    sex: "",
    tone: 3
  },
  {
    char: "巫",
    spell: "wū",
    stroke: "7",
    radical: "工",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄨ",
    tradition: "巫",
    sex: "",
    tone: 1
  },
  {
    char: "差",
    spell: "chā",
    stroke: "9",
    radical: "⺶",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄘ",
    tradition: "差",
    sex: "",
    tone: 4
  },
  {
    char: "己",
    spell: "jǐ",
    stroke: "3",
    radical: "己",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄐㄧˇ",
    tradition: "己",
    sex: "",
    tone: 3
  },
  {
    char: "已",
    spell: "yǐ",
    stroke: "3",
    radical: "已",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄧˇ",
    tradition: "已",
    sex: "",
    tone: 3
  },
  {
    char: "巴",
    spell: "bā",
    stroke: "4",
    radical: "巳",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄚ",
    tradition: "巴",
    sex: "",
    tone: 1
  },
  {
    char: "巷",
    spell: "xiàng",
    stroke: "9",
    radical: "巳",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄤˋ",
    tradition: "巷",
    sex: "",
    tone: 4
  },
  {
    char: "巾",
    spell: "jīn",
    stroke: "3",
    radical: "巾",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄣ",
    tradition: "巾",
    sex: "",
    tone: 1
  },
  {
    char: "币",
    spell: "bì",
    stroke: "4",
    radical: `丿
`,
    struct: "上下结构",
    five: "水",
    method: "",
    mark: "",
    tradition: "幣",
    sex: "",
    tone: 4
  },
  {
    char: "市",
    spell: "shì",
    stroke: "5",
    radical: "亠",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕˋ",
    tradition: "市",
    sex: "",
    tone: 4
  },
  {
    char: "布",
    spell: "bù",
    stroke: "5",
    radical: "巾",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˋ",
    tradition: "布",
    sex: "",
    tone: 4
  },
  {
    char: "帅",
    spell: "shuài",
    stroke: "5",
    radical: "巾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄞˋ",
    tradition: "帥",
    sex: "",
    tone: 4
  },
  {
    char: "帆",
    spell: "fān",
    stroke: "6",
    radical: "巾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢ",
    tradition: "帆",
    sex: "",
    tone: 1
  },
  {
    char: "师",
    spell: "shī",
    stroke: "6",
    radical: "丨",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕ",
    tradition: "師",
    sex: "",
    tone: 1
  },
  {
    char: "希",
    spell: "xī",
    stroke: "7",
    radical: "巾",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧ",
    tradition: "希",
    sex: "女",
    tone: 1
  },
  {
    char: "帐",
    spell: "zhàng",
    stroke: "7",
    radical: "巾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "帳",
    sex: "",
    tone: 4
  },
  {
    char: "帕",
    spell: "pà",
    stroke: "8",
    radical: "巾",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄚˋ",
    tradition: "帕",
    sex: "",
    tone: 4
  },
  {
    char: "帖",
    spell: "tiē",
    stroke: "8",
    radical: "巾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄝˋ",
    tradition: "帖",
    sex: "",
    tone: 1
  },
  {
    char: "帘",
    spell: "lián",
    stroke: "8",
    radical: "穴",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄢˊ",
    tradition: "簾",
    sex: "",
    tone: 2
  },
  {
    char: "帚",
    spell: "zhǒu",
    stroke: "8",
    radical: "彐",
    struct: "上中下结构",
    five: "金",
    method: "-",
    mark: "ㄓㄡˇ",
    tradition: "帚",
    sex: "",
    tone: 3
  },
  {
    char: "帜",
    spell: "zhì",
    stroke: "8",
    radical: "巾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "幟",
    sex: "",
    tone: 4
  },
  {
    char: "帝",
    spell: "dì",
    stroke: "9",
    radical: "巾",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧˋ",
    tradition: "帝",
    sex: "",
    tone: 4
  },
  {
    char: "带",
    spell: "dài",
    stroke: "9",
    radical: "巾",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄉㄞˋ",
    tradition: "帶",
    sex: "",
    tone: 4
  },
  {
    char: "席",
    spell: "xí",
    stroke: "10",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧˊ",
    tradition: "席",
    sex: "",
    tone: 2
  },
  {
    char: "帮",
    spell: "bāng",
    stroke: "9",
    radical: "巾",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤ",
    tradition: "幫",
    sex: "",
    tone: 1
  },
  {
    char: "常",
    spell: "cháng",
    stroke: "11",
    radical: "巾",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "常",
    sex: "",
    tone: 2
  },
  {
    char: "帽",
    spell: "mào",
    stroke: "12",
    radical: "巾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄠˋ",
    tradition: "帽",
    sex: "",
    tone: 4
  },
  {
    char: "幅",
    spell: "fú",
    stroke: "12",
    radical: "巾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "幅",
    sex: "",
    tone: 2
  },
  {
    char: "幌",
    spell: "huǎng",
    stroke: "13",
    radical: "巾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄤˇ",
    tradition: "幌",
    sex: "",
    tone: 3
  },
  {
    char: "幔",
    spell: "màn",
    stroke: "14",
    radical: "巾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˋ",
    tradition: "幔",
    sex: "",
    tone: 4
  },
  {
    char: "幕",
    spell: "mù",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "幕",
    sex: "",
    tone: 4
  },
  {
    char: "幢",
    spell: "zhuàng",
    stroke: "15",
    radical: "巾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄤˊ",
    tradition: "幢",
    sex: "",
    tone: 4
  },
  {
    char: "干",
    spell: "gàn",
    stroke: "3",
    radical: "干",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄢˋ",
    tradition: "乾、幹",
    sex: "",
    tone: 1
  },
  {
    char: "平",
    spell: "píng",
    stroke: "5",
    radical: "干",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧㄥˊ",
    tradition: "平",
    sex: "男",
    tone: 2
  },
  {
    char: "年",
    spell: "nián",
    stroke: "6",
    radical: "丿",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄧㄢˊ",
    tradition: "年",
    sex: "",
    tone: 2
  },
  {
    char: "并",
    spell: "bìng",
    stroke: "6",
    radical: "丷",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄅㄧㄥˋ",
    tradition: "并",
    sex: "",
    tone: 4
  },
  {
    char: "幸",
    spell: "xìng",
    stroke: "8",
    radical: "土",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄥˋ",
    tradition: "幸",
    sex: "",
    tone: 4
  },
  {
    char: "幻",
    spell: "huàn",
    stroke: "4",
    radical: "幺",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄢˋ",
    tradition: "幻",
    sex: "女",
    tone: 4
  },
  {
    char: "幼",
    spell: "yòu",
    stroke: "5",
    radical: "幺",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄡˋ",
    tradition: "幼",
    sex: "",
    tone: 4
  },
  {
    char: "幽",
    spell: "yōu",
    stroke: "9",
    radical: "山",
    struct: "半包围结构",
    five: "土",
    method: "-",
    mark: "ㄧㄡ",
    tradition: "幽",
    sex: "",
    tone: 1
  },
  {
    char: "广",
    spell: "guǎng",
    stroke: "3",
    radical: "广",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄢ",
    tradition: "廣",
    sex: "男",
    tone: 3
  },
  {
    char: "庄",
    spell: "zhuāng",
    stroke: "6",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "-",
    mark: "ㄓㄨㄤ",
    tradition: "莊",
    sex: "",
    tone: 1
  },
  {
    char: "庆",
    spell: "qìng",
    stroke: "6",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄥˋ",
    tradition: "慶",
    sex: "男",
    tone: 4
  },
  {
    char: "庇",
    spell: "bì",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "庇",
    sex: "",
    tone: 4
  },
  {
    char: "床",
    spell: "chuáng",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄔㄨㄤˊ",
    tradition: "床",
    sex: "",
    tone: 2
  },
  {
    char: "序",
    spell: "xù",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "序",
    sex: "",
    tone: 4
  },
  {
    char: "庐",
    spell: "lú",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˊ",
    tradition: "廬",
    sex: "",
    tone: 2
  },
  {
    char: "库",
    spell: "kù",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨˋ",
    tradition: "庫",
    sex: "",
    tone: 4
  },
  {
    char: "应",
    spell: "yìng",
    stroke: "7",
    radical: "广",
    struct: "半包围结构",
    five: "土",
    method: "-",
    mark: "ㄧㄥˋ",
    tradition: "應",
    sex: "",
    tone: 4
  },
  {
    char: "底",
    spell: "dǐ",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧˇ",
    tradition: "底",
    sex: "",
    tone: 3
  },
  {
    char: "店",
    spell: "diàn",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "店",
    sex: "",
    tone: 4
  },
  {
    char: "庙",
    spell: "miào",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄠˋ",
    tradition: "廟",
    sex: "",
    tone: 4
  },
  {
    char: "府",
    spell: "fǔ",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "府",
    sex: "",
    tone: 3
  },
  {
    char: "庞",
    spell: "páng",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄆㄤˊ",
    tradition: "龐",
    sex: "",
    tone: 2
  },
  {
    char: "废",
    spell: "fèi",
    stroke: "8",
    radical: "广",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄟˋ",
    tradition: "廢",
    sex: "",
    tone: 4
  },
  {
    char: "度",
    spell: "dù",
    stroke: "9",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "度",
    sex: "",
    tone: 4
  },
  {
    char: "座",
    spell: "zuò",
    stroke: "10",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨㄛˋ",
    tradition: "座",
    sex: "",
    tone: 4
  },
  {
    char: "庭",
    spell: "tíng",
    stroke: "9",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˊ",
    tradition: "庭",
    sex: "",
    tone: 2
  },
  {
    char: "庵",
    spell: "ān",
    stroke: "11",
    radical: "广",
    struct: "半包围结构",
    five: "土",
    method: "-",
    mark: "ㄢ",
    tradition: "庵",
    sex: "",
    tone: 1
  },
  {
    char: "庶",
    spell: "shù",
    stroke: "11",
    radical: "广",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨˋ",
    tradition: "庶",
    sex: "",
    tone: 4
  },
  {
    char: "康",
    spell: "kāng",
    stroke: "11",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "-",
    mark: "ㄎㄤ",
    tradition: "康",
    sex: "男",
    tone: 1
  },
  {
    char: "庸",
    spell: "yōng",
    stroke: "11",
    radical: "广",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄩㄥ",
    tradition: "庸",
    sex: "",
    tone: 1
  },
  {
    char: "廉",
    spell: "lián",
    stroke: "13",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄢˊ",
    tradition: "廉",
    sex: "",
    tone: 2
  },
  {
    char: "廊",
    spell: "láng",
    stroke: "11",
    radical: "广",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄤˊ",
    tradition: "廊",
    sex: "",
    tone: 2
  },
  {
    char: "廓",
    spell: "kuò",
    stroke: "13",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄛˋ",
    tradition: "廓",
    sex: "",
    tone: 4
  },
  {
    char: "延",
    spell: "yán",
    stroke: "6",
    radical: "廴",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "延",
    sex: "",
    tone: 2
  },
  {
    char: "廷",
    spell: "tíng",
    stroke: "6",
    radical: "廴",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˊ",
    tradition: "廷",
    sex: "",
    tone: 2
  },
  {
    char: "建",
    spell: "jiàn",
    stroke: "8",
    radical: "廴",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "建",
    sex: "男",
    tone: 4
  },
  {
    char: "开",
    spell: "kāi",
    stroke: "4",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄞ",
    tradition: "開",
    sex: "",
    tone: 1
  },
  {
    char: "异",
    spell: "yì",
    stroke: "6",
    radical: "巳",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "异",
    sex: "",
    tone: 4
  },
  {
    char: "弃",
    spell: "qì",
    stroke: "7",
    radical: "廾",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧˋ",
    tradition: "弃",
    sex: "",
    tone: 4
  },
  {
    char: "弄",
    spell: "nòng",
    stroke: "7",
    radical: "王",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄨㄥˋ",
    tradition: "弄",
    sex: "",
    tone: 4
  },
  {
    char: "弊",
    spell: "bì",
    stroke: "14",
    radical: "廾",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "弊",
    sex: "",
    tone: 4
  },
  {
    char: "式",
    spell: "shì",
    stroke: "6",
    radical: "弋",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "式",
    sex: "",
    tone: 4
  },
  {
    char: "弓",
    spell: "gōng",
    stroke: "3",
    radical: "弓",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄥ",
    tradition: "弓",
    sex: "",
    tone: 1
  },
  {
    char: "引",
    spell: "yǐn",
    stroke: "4",
    radical: "弓",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄧㄣˇ",
    tradition: "引",
    sex: "",
    tone: 3
  },
  {
    char: "弛",
    spell: "chí",
    stroke: "6",
    radical: "弓",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "弛",
    sex: "",
    tone: 2
  },
  {
    char: "弟",
    spell: "dì",
    stroke: "7",
    radical: "丷",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧˋ",
    tradition: "弟",
    sex: "",
    tone: 4
  },
  {
    char: "张",
    spell: "zhāng",
    stroke: "7",
    radical: "弓",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "張",
    sex: "",
    tone: 1
  },
  {
    char: "弥",
    spell: "mí",
    stroke: "8",
    radical: "弓",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˊ",
    tradition: "彌、瀰",
    sex: "",
    tone: 2
  },
  {
    char: "弦",
    spell: "xián",
    stroke: "8",
    radical: "弓",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄢˊ",
    tradition: "弦",
    sex: "",
    tone: 2
  },
  {
    char: "弧",
    spell: "hú",
    stroke: "8",
    radical: "弓",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "弧",
    sex: "",
    tone: 2
  },
  {
    char: "弯",
    spell: "wān",
    stroke: "9",
    radical: "弓",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄢ",
    tradition: "彎",
    sex: "",
    tone: 1
  },
  {
    char: "弱",
    spell: "ruò",
    stroke: "10",
    radical: "弓",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄖㄨㄛˋ",
    tradition: "弱",
    sex: "",
    tone: 4
  },
  {
    char: "弹",
    spell: "dàn",
    stroke: "11",
    radical: "弓",
    struct: "左右结构",
    five: "火",
    method: "",
    mark: "",
    tradition: "彈",
    sex: "",
    tone: 2
  },
  {
    char: "强",
    spell: "qiáng",
    stroke: "12",
    radical: "弓",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄤˋ",
    tradition: "强",
    sex: "男",
    tone: 2
  },
  {
    char: "归",
    spell: "guī",
    stroke: "5",
    radical: "彐",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄟ",
    tradition: "歸",
    sex: "",
    tone: 1
  },
  {
    char: "当",
    spell: "dāng",
    stroke: "6",
    radical: "⺌",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄤˋ",
    tradition: "當、噹",
    sex: "",
    tone: 1
  },
  {
    char: "录",
    spell: "lù",
    stroke: "8",
    radical: "彐",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˋ",
    tradition: "録",
    sex: "",
    tone: 4
  },
  {
    char: "形",
    spell: "xíng",
    stroke: "7",
    radical: "彡",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄥˊ",
    tradition: "形",
    sex: "",
    tone: 2
  },
  {
    char: "彤",
    spell: "tóng",
    stroke: "7",
    radical: "彡",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨㄥˊ",
    tradition: "彤",
    sex: "男",
    tone: 2
  },
  {
    char: "彩",
    spell: "cǎi",
    stroke: "11",
    radical: "彡",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞˇ",
    tradition: "彩",
    sex: "女",
    tone: 3
  },
  {
    char: "彪",
    spell: "biāo",
    stroke: "11",
    radical: "虎",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄠ",
    tradition: "彪",
    sex: "男",
    tone: 1
  },
  {
    char: "彬",
    spell: "bīn",
    stroke: "11",
    radical: "彡",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄧㄣ",
    tradition: "彬",
    sex: "男",
    tone: 1
  },
  {
    char: "彭",
    spell: "péng",
    stroke: "12",
    radical: "彡",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄆㄥˊ",
    tradition: "彭",
    sex: "",
    tone: 2
  },
  {
    char: "彰",
    spell: "zhāng",
    stroke: "14",
    radical: "彡",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄤ",
    tradition: "彰",
    sex: "",
    tone: 1
  },
  {
    char: "影",
    spell: "yǐng",
    stroke: "15",
    radical: "彡",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄥˇ",
    tradition: "影",
    sex: "女",
    tone: 3
  },
  {
    char: "役",
    spell: "yì",
    stroke: "7",
    radical: "彳",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "役",
    sex: "",
    tone: 4
  },
  {
    char: "彻",
    spell: "chè",
    stroke: "7",
    radical: "彳",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄜˋ",
    tradition: "徹",
    sex: "",
    tone: 4
  },
  {
    char: "彼",
    spell: "bǐ",
    stroke: "8",
    radical: "彳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˇ",
    tradition: "彼",
    sex: "",
    tone: 3
  },
  {
    char: "往",
    spell: "wǎng",
    stroke: "8",
    radical: "彳",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄤˇ",
    tradition: "往",
    sex: "",
    tone: 3
  },
  {
    char: "征",
    spell: "zhēng",
    stroke: "8",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄥ",
    tradition: "徵",
    sex: "",
    tone: 1
  },
  {
    char: "径",
    spell: "jìng",
    stroke: "8",
    radical: "彳",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "徑",
    sex: "",
    tone: 4
  },
  {
    char: "待",
    spell: "dài",
    stroke: "9",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "待",
    sex: "",
    tone: 4
  },
  {
    char: "很",
    spell: "hěn",
    stroke: "9",
    radical: "彳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄣˇ",
    tradition: "很",
    sex: "",
    tone: 3
  },
  {
    char: "徊",
    spell: "huái",
    stroke: "9",
    radical: "彳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄞˊ",
    tradition: "徊",
    sex: "",
    tone: 2
  },
  {
    char: "律",
    spell: "lǜ",
    stroke: "9",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˋ",
    tradition: "律",
    sex: "男",
    tone: 4
  },
  {
    char: "徐",
    spell: "xú",
    stroke: "10",
    radical: "彳",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˊ",
    tradition: "徐",
    sex: "",
    tone: 2
  },
  {
    char: "徒",
    spell: "tú",
    stroke: "10",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨˊ",
    tradition: "徒",
    sex: "",
    tone: 2
  },
  {
    char: "得",
    spell: "dé",
    stroke: "11",
    radical: "彳",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄉㄜˊ",
    tradition: "得",
    sex: "",
    tone: 2
  },
  {
    char: "徘",
    spell: "pái",
    stroke: "11",
    radical: "彳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞˊ",
    tradition: "徘",
    sex: "",
    tone: 2
  },
  {
    char: "徙",
    spell: "xǐ",
    stroke: "11",
    radical: "彳",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧˇ",
    tradition: "徙",
    sex: "",
    tone: 3
  },
  {
    char: "御",
    spell: "yù",
    stroke: "12",
    radical: "彳",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄩˋ",
    tradition: "禦",
    sex: "",
    tone: 4
  },
  {
    char: "循",
    spell: "xún",
    stroke: "12",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄩㄣˊ",
    tradition: "循",
    sex: "",
    tone: 2
  },
  {
    char: "微",
    spell: "wēi",
    stroke: "13",
    radical: "彳",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄟ",
    tradition: "微",
    sex: "女",
    tone: 1
  },
  {
    char: "德",
    spell: "dé",
    stroke: "15",
    radical: "彳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄜˊ",
    tradition: "德",
    sex: "男",
    tone: 2
  },
  {
    char: "徽",
    spell: "huī",
    stroke: "17",
    radical: "彳",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄏㄨㄟ",
    tradition: "徽",
    sex: "",
    tone: 1
  },
  {
    char: "心",
    spell: "xīn",
    stroke: "4",
    radical: "心",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄣ",
    tradition: "心",
    sex: "男",
    tone: 1
  },
  {
    char: "必",
    spell: "bì",
    stroke: "5",
    radical: "丶",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˋ",
    tradition: "必",
    sex: "",
    tone: 4
  },
  {
    char: "忆",
    spell: "yì",
    stroke: "4",
    radical: "忄",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "憶",
    sex: "女",
    tone: 4
  },
  {
    char: "忌",
    spell: "jì",
    stroke: "7",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "忌",
    sex: "",
    tone: 4
  },
  {
    char: "忍",
    spell: "rěn",
    stroke: "7",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄣˇ",
    tradition: "忍",
    sex: "",
    tone: 3
  },
  {
    char: "志",
    spell: "zhì",
    stroke: "7",
    radical: "士",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "志",
    sex: "男",
    tone: 4
  },
  {
    char: "忘",
    spell: "wàng",
    stroke: "7",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄤˋ",
    tradition: "忘",
    sex: "",
    tone: 4
  },
  {
    char: "忙",
    spell: "máng",
    stroke: "6",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄤˊ",
    tradition: "忙",
    sex: "",
    tone: 2
  },
  {
    char: "忠",
    spell: "zhōng",
    stroke: "8",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄥ",
    tradition: "忠",
    sex: "",
    tone: 1
  },
  {
    char: "忧",
    spell: "yōu",
    stroke: "7",
    radical: "忄",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡ",
    tradition: "憂",
    sex: "",
    tone: 1
  },
  {
    char: "快",
    spell: "kuài",
    stroke: "7",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄞˋ",
    tradition: "快",
    sex: "",
    tone: 4
  },
  {
    char: "忱",
    spell: "chén",
    stroke: "7",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄣˊ",
    tradition: "忱",
    sex: "",
    tone: 2
  },
  {
    char: "念",
    spell: "niàn",
    stroke: "8",
    radical: "人",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄧㄢˋ",
    tradition: "念",
    sex: "",
    tone: 4
  },
  {
    char: "忽",
    spell: "hū",
    stroke: "8",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨ",
    tradition: "忽",
    sex: "",
    tone: 1
  },
  {
    char: "忿",
    spell: "fèn",
    stroke: "8",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣˋ",
    tradition: "忿",
    sex: "",
    tone: 4
  },
  {
    char: "怀",
    spell: "huái",
    stroke: "7",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄞˊ",
    tradition: "懷",
    sex: "",
    tone: 2
  },
  {
    char: "态",
    spell: "tài",
    stroke: "8",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄞˋ",
    tradition: "態",
    sex: "",
    tone: 4
  },
  {
    char: "怎",
    spell: "zěn",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄣˇ",
    tradition: "怎",
    sex: "",
    tone: 3
  },
  {
    char: "怒",
    spell: "nù",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄩˋ",
    tradition: "怒",
    sex: "",
    tone: 4
  },
  {
    char: "怔",
    spell: "zhēng",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "怔",
    sex: "",
    tone: 1
  },
  {
    char: "怕",
    spell: "pà",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄚˋ",
    tradition: "怕",
    sex: "",
    tone: 4
  },
  {
    char: "怖",
    spell: "bù",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˋ",
    tradition: "怖",
    sex: "",
    tone: 4
  },
  {
    char: "怜",
    spell: "lián",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄢˊ",
    tradition: "憐",
    sex: "",
    tone: 2
  },
  {
    char: "思",
    spell: "sī",
    stroke: "9",
    radical: "田",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄙㄞ",
    tradition: "思",
    sex: "男",
    tone: 1
  },
  {
    char: "怠",
    spell: "dài",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "怠",
    sex: "",
    tone: 4
  },
  {
    char: "急",
    spell: "jí",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "急",
    sex: "",
    tone: 2
  },
  {
    char: "性",
    spell: "xìng",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄥˋ",
    tradition: "性",
    sex: "",
    tone: 4
  },
  {
    char: "怨",
    spell: "yuàn",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄩㄢˋ",
    tradition: "怨",
    sex: "",
    tone: 4
  },
  {
    char: "怪",
    spell: "guài",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄨㄞˋ",
    tradition: "怪",
    sex: "",
    tone: 4
  },
  {
    char: "怯",
    spell: "qiè",
    stroke: "8",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄝˋ",
    tradition: "怯",
    sex: "",
    tone: 4
  },
  {
    char: "总",
    spell: "zǒng",
    stroke: "9",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄗㄨㄥˇ",
    tradition: "總",
    sex: "",
    tone: 3
  },
  {
    char: "恃",
    spell: "shì",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "恃",
    sex: "",
    tone: 4
  },
  {
    char: "恋",
    spell: "liàn",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄢˋ",
    tradition: "戀",
    sex: "",
    tone: 4
  },
  {
    char: "恍",
    spell: "huǎng",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄤˇ",
    tradition: "恍",
    sex: "",
    tone: 3
  },
  {
    char: "恐",
    spell: "kǒng",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄥˇ",
    tradition: "恐",
    sex: "",
    tone: 3
  },
  {
    char: "恒",
    spell: "héng",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄥˊ",
    tradition: "恒",
    sex: "男",
    tone: 2
  },
  {
    char: "恕",
    spell: "shù",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "恕",
    sex: "",
    tone: 4
  },
  {
    char: "恢",
    spell: "huī",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄟ",
    tradition: "恢",
    sex: "",
    tone: 1
  },
  {
    char: "恤",
    spell: "xù",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "恤",
    sex: "",
    tone: 4
  },
  {
    char: "恨",
    spell: "hèn",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄣˋ",
    tradition: "恨",
    sex: "",
    tone: 4
  },
  {
    char: "恩",
    spell: "ēn",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄣ",
    tradition: "恩",
    sex: "男",
    tone: 1
  },
  {
    char: "恬",
    spell: "tián",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄢˊ",
    tradition: "恬",
    sex: "",
    tone: 2
  },
  {
    char: "恭",
    spell: "gōng",
    stroke: "10",
    radical: "⺗",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "恭",
    sex: "",
    tone: 1
  },
  {
    char: "息",
    spell: "xī",
    stroke: "10",
    radical: "自",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧ",
    tradition: "息",
    sex: "",
    tone: 1
  },
  {
    char: "恰",
    spell: "qià",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄚˋ",
    tradition: "恰",
    sex: "",
    tone: 4
  },
  {
    char: "恳",
    spell: "kěn",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄣˇ",
    tradition: "懇",
    sex: "",
    tone: 3
  },
  {
    char: "恶",
    spell: "è",
    stroke: "10",
    radical: "心",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "惡、噁",
    sex: "",
    tone: 4
  },
  {
    char: "恼",
    spell: "nǎo",
    stroke: "9",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄠˇ",
    tradition: "惱",
    sex: "",
    tone: 3
  },
  {
    char: "悄",
    spell: "qiāo",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˇ",
    tradition: "悄",
    sex: "",
    tone: 1
  },
  {
    char: "悉",
    spell: "xī",
    stroke: "11",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧ",
    tradition: "悉",
    sex: "",
    tone: 1
  },
  {
    char: "悍",
    spell: "hàn",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "悍",
    sex: "",
    tone: 4
  },
  {
    char: "悔",
    spell: "huǐ",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˇ",
    tradition: "悔",
    sex: "",
    tone: 3
  },
  {
    char: "悟",
    spell: "wù",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "悟",
    sex: "",
    tone: 4
  },
  {
    char: "悠",
    spell: "yōu",
    stroke: "11",
    radical: "心",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡ",
    tradition: "悠",
    sex: "",
    tone: 1
  },
  {
    char: "患",
    spell: "huàn",
    stroke: "11",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "患",
    sex: "",
    tone: 4
  },
  {
    char: "悦",
    spell: "yuè",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄩㄝˋ",
    tradition: "悦",
    sex: "女",
    tone: 4
  },
  {
    char: "您",
    spell: "nín",
    stroke: "11",
    radical: "心",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄧㄣˊ",
    tradition: "您",
    sex: "",
    tone: 2
  },
  {
    char: "悬",
    spell: "xuán",
    stroke: "11",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩㄢˊ",
    tradition: "懸",
    sex: "",
    tone: 2
  },
  {
    char: "悯",
    spell: "mǐn",
    stroke: "10",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄣˇ",
    tradition: "憫",
    sex: "",
    tone: 3
  },
  {
    char: "悲",
    spell: "bēi",
    stroke: "12",
    radical: "非",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟ",
    tradition: "悲",
    sex: "",
    tone: 1
  },
  {
    char: "悴",
    spell: "cuì",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟˋ",
    tradition: "悴",
    sex: "",
    tone: 4
  },
  {
    char: "悼",
    spell: "dào",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˋ",
    tradition: "悼",
    sex: "",
    tone: 4
  },
  {
    char: "情",
    spell: "qíng",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄥˊ",
    tradition: "情",
    sex: "",
    tone: 2
  },
  {
    char: "惊",
    spell: "jīng",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄥ",
    tradition: "驚",
    sex: "",
    tone: 1
  },
  {
    char: "惋",
    spell: "wǎn",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "惋",
    sex: "",
    tone: 3
  },
  {
    char: "惑",
    spell: "huò",
    stroke: "12",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄛˋ",
    tradition: "惑",
    sex: "",
    tone: 4
  },
  {
    char: "惕",
    spell: "tì",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧˋ",
    tradition: "惕",
    sex: "",
    tone: 4
  },
  {
    char: "惜",
    spell: "xī",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "惜",
    sex: "",
    tone: 1
  },
  {
    char: "惠",
    spell: "huì",
    stroke: "12",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄟˋ",
    tradition: "惠",
    sex: "女",
    tone: 4
  },
  {
    char: "惦",
    spell: "diàn",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "惦",
    sex: "",
    tone: 4
  },
  {
    char: "惧",
    spell: "jù",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "懼",
    sex: "",
    tone: 4
  },
  {
    char: "惨",
    spell: "cǎn",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢˇ",
    tradition: "慘",
    sex: "",
    tone: 3
  },
  {
    char: "惩",
    spell: "chéng",
    stroke: "12",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "懲",
    sex: "",
    tone: 2
  },
  {
    char: "惫",
    spell: "bèi",
    stroke: "12",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "惫",
    sex: "",
    tone: 4
  },
  {
    char: "惭",
    spell: "cán",
    stroke: "11",
    radical: "忄",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢˊ",
    tradition: "慚",
    sex: "",
    tone: 2
  },
  {
    char: "惯",
    spell: "guàn",
    stroke: "11",
    radical: "忄",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄨㄢˋ",
    tradition: "慣",
    sex: "",
    tone: 4
  },
  {
    char: "惰",
    spell: "duò",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄛˋ",
    tradition: "惰",
    sex: "",
    tone: 4
  },
  {
    char: "想",
    spell: "xiǎng",
    stroke: "13",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄤˇ",
    tradition: "想",
    sex: "",
    tone: 3
  },
  {
    char: "惶",
    spell: "huáng",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄤˊ",
    tradition: "惶",
    sex: "",
    tone: 2
  },
  {
    char: "惹",
    spell: "rě",
    stroke: "12",
    radical: "心",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄜˇ",
    tradition: "惹",
    sex: "",
    tone: 3
  },
  {
    char: "愁",
    spell: "chóu",
    stroke: "13",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "愁",
    sex: "",
    tone: 2
  },
  {
    char: "愈",
    spell: "yù",
    stroke: "13",
    radical: "人",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "愈",
    sex: "",
    tone: 4
  },
  {
    char: "愉",
    spell: "yú",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "愉",
    sex: "",
    tone: 2
  },
  {
    char: "意",
    spell: "yì",
    stroke: "13",
    radical: "音",
    struct: "上中下结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "意",
    sex: "男",
    tone: 4
  },
  {
    char: "愕",
    spell: "è",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˇ",
    tradition: "愕",
    sex: "",
    tone: 4
  },
  {
    char: "愚",
    spell: "yú",
    stroke: "13",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "愚",
    sex: "",
    tone: 2
  },
  {
    char: "感",
    spell: "gǎn",
    stroke: "13",
    radical: "心",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢˇ",
    tradition: "感",
    sex: "",
    tone: 3
  },
  {
    char: "愤",
    spell: "fèn",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣˋ",
    tradition: "憤",
    sex: "",
    tone: 4
  },
  {
    char: "愧",
    spell: "kuì",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟˋ",
    tradition: "愧",
    sex: "",
    tone: 4
  },
  {
    char: "愿",
    spell: "yuàn",
    stroke: "14",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄩㄢˋ",
    tradition: "願",
    sex: "",
    tone: 4
  },
  {
    char: "慈",
    spell: "cí",
    stroke: "13",
    radical: "心",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "慈",
    sex: "",
    tone: 2
  },
  {
    char: "慌",
    spell: "huāng",
    stroke: "12",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄤˇ",
    tradition: "慌",
    sex: "",
    tone: 1
  },
  {
    char: "慎",
    spell: "shèn",
    stroke: "13",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣˋ",
    tradition: "慎",
    sex: "",
    tone: 4
  },
  {
    char: "慕",
    spell: "mù",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "慕",
    sex: "",
    tone: 4
  },
  {
    char: "慢",
    spell: "màn",
    stroke: "14",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˋ",
    tradition: "慢",
    sex: "",
    tone: 4
  },
  {
    char: "慧",
    spell: "huì",
    stroke: "15",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "慧",
    sex: "女",
    tone: 4
  },
  {
    char: "慨",
    spell: "kǎi",
    stroke: "12",
    radical: "忄",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄞˇ",
    tradition: "慨",
    sex: "",
    tone: 3
  },
  {
    char: "慰",
    spell: "wèi",
    stroke: "15",
    radical: "心",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "慰",
    sex: "",
    tone: 4
  },
  {
    char: "慷",
    spell: "kāng",
    stroke: "14",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄤ",
    tradition: "慷",
    sex: "",
    tone: 1
  },
  {
    char: "憋",
    spell: "biē",
    stroke: "15",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄝ",
    tradition: "憋",
    sex: "",
    tone: 1
  },
  {
    char: "憎",
    spell: "zēng",
    stroke: "15",
    radical: "忄",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄥ",
    tradition: "憎",
    sex: "",
    tone: 1
  },
  {
    char: "憔",
    spell: "qiáo",
    stroke: "15",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "憔",
    sex: "",
    tone: 2
  },
  {
    char: "憨",
    spell: "hān",
    stroke: "15",
    radical: "心",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢ",
    tradition: "憨",
    sex: "",
    tone: 1
  },
  {
    char: "憾",
    spell: "hàn",
    stroke: "16",
    radical: "忄",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "憾",
    sex: "",
    tone: 4
  },
  {
    char: "懂",
    spell: "dǒng",
    stroke: "15",
    radical: "忄",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄨㄥˇ",
    tradition: "懂",
    sex: "",
    tone: 3
  },
  {
    char: "懈",
    spell: "xiè",
    stroke: "16",
    radical: "忄",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "懈",
    sex: "",
    tone: 4
  },
  {
    char: "懊",
    spell: "ào",
    stroke: "15",
    radical: "忄",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄠˋ",
    tradition: "懊",
    sex: "",
    tone: 4
  },
  {
    char: "懒",
    spell: "lǎn",
    stroke: "16",
    radical: "忄",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄢˇ",
    tradition: "懶",
    sex: "",
    tone: 3
  },
  {
    char: "懦",
    spell: "nuò",
    stroke: "17",
    radical: "忄",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄨㄛˋ",
    tradition: "懦",
    sex: "",
    tone: 4
  },
  {
    char: "戈",
    spell: "gē",
    stroke: "4",
    radical: "戈",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄍㄜ",
    tradition: "戈",
    sex: "",
    tone: 1
  },
  {
    char: "戏",
    spell: "xì",
    stroke: "6",
    radical: "又",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄏㄨ",
    tradition: "戲",
    sex: "",
    tone: 4
  },
  {
    char: "成",
    spell: "chéng",
    stroke: "6",
    radical: "戈",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄥˊ",
    tradition: "成",
    sex: "男",
    tone: 2
  },
  {
    char: "我",
    spell: "wǒ",
    stroke: "7",
    radical: "戈",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄨㄛˇ",
    tradition: "我",
    sex: "",
    tone: 3
  },
  {
    char: "戒",
    spell: "jiè",
    stroke: "7",
    radical: "戈",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄐㄧㄝˋ",
    tradition: "戒",
    sex: "",
    tone: 4
  },
  {
    char: "或",
    spell: "huò",
    stroke: "8",
    radical: "戈",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄛˋ",
    tradition: "或",
    sex: "",
    tone: 4
  },
  {
    char: "战",
    spell: "zhàn",
    stroke: "9",
    radical: "戈",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄢˋ",
    tradition: "戰",
    sex: "",
    tone: 4
  },
  {
    char: "戚",
    spell: "qī",
    stroke: "11",
    radical: "戈",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "戚",
    sex: "",
    tone: 1
  },
  {
    char: "截",
    spell: "jié",
    stroke: "14",
    radical: "隹",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "截",
    sex: "",
    tone: 2
  },
  {
    char: "戳",
    spell: "chuō",
    stroke: "18",
    radical: "戈",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄨㄛ",
    tradition: "戳",
    sex: "",
    tone: 1
  },
  {
    char: "戴",
    spell: "dài",
    stroke: "17",
    radical: "十",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "戴",
    sex: "",
    tone: 4
  },
  {
    char: "户",
    spell: "hù",
    stroke: "4",
    radical: "户",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨˋ",
    tradition: "户",
    sex: "",
    tone: 4
  },
  {
    char: "房",
    spell: "fáng",
    stroke: "8",
    radical: "户",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˊ",
    tradition: "房",
    sex: "",
    tone: 2
  },
  {
    char: "所",
    spell: "suǒ",
    stroke: "8",
    radical: "户",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄛˇ",
    tradition: "所",
    sex: "",
    tone: 3
  },
  {
    char: "扁",
    spell: "biǎn",
    stroke: "9",
    radical: "户",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄢˇ",
    tradition: "扁",
    sex: "",
    tone: 3
  },
  {
    char: "扇",
    spell: "shàn",
    stroke: "10",
    radical: "户",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄢˋ",
    tradition: "扇",
    sex: "",
    tone: 4
  },
  {
    char: "手",
    spell: "shǒu",
    stroke: "4",
    radical: "手",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄡˇ",
    tradition: "手",
    sex: "",
    tone: 3
  },
  {
    char: "才",
    spell: "cái",
    stroke: "3",
    radical: "一",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄘㄞˊ",
    tradition: "纔",
    sex: "男",
    tone: 2
  },
  {
    char: "扎",
    spell: "zhā",
    stroke: "4",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄚ",
    tradition: "扎",
    sex: "",
    tone: 1
  },
  {
    char: "扑",
    spell: "pū",
    stroke: "5",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄨ",
    tradition: "撲",
    sex: "",
    tone: 1
  },
  {
    char: "扒",
    spell: "bā",
    stroke: "5",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄚˊ",
    tradition: "扒",
    sex: "",
    tone: 1
  },
  {
    char: "打",
    spell: "dǎ",
    stroke: "5",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄚˊ",
    tradition: "打",
    sex: "",
    tone: 3
  },
  {
    char: "扔",
    spell: "rēng",
    stroke: "5",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄥ",
    tradition: "扔",
    sex: "",
    tone: 1
  },
  {
    char: "托",
    spell: "tuō",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛ",
    tradition: "托",
    sex: "",
    tone: 1
  },
  {
    char: "扛",
    spell: "káng",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄤ",
    tradition: "扛",
    sex: "",
    tone: 2
  },
  {
    char: "扣",
    spell: "kòu",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄡˋ",
    tradition: "扣",
    sex: "",
    tone: 4
  },
  {
    char: "执",
    spell: "zhí",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓˊ",
    tradition: "執",
    sex: "",
    tone: 2
  },
  {
    char: "扩",
    spell: "kuò",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨㄛˋ",
    tradition: "擴",
    sex: "",
    tone: 4
  },
  {
    char: "扫",
    spell: "sǎo",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄠˋ",
    tradition: "掃",
    sex: "",
    tone: 3
  },
  {
    char: "扬",
    spell: "yáng",
    stroke: "6",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄤˊ",
    tradition: "揚",
    sex: "",
    tone: 2
  },
  {
    char: "扭",
    spell: "niǔ",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄧㄡˇ",
    tradition: "扭",
    sex: "",
    tone: 3
  },
  {
    char: "扮",
    spell: "bàn",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "扮",
    sex: "",
    tone: 4
  },
  {
    char: "扯",
    spell: "chě",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄜˇ",
    tradition: "扯",
    sex: "",
    tone: 3
  },
  {
    char: "扰",
    spell: "rǎo",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄠˇ",
    tradition: "擾",
    sex: "",
    tone: 3
  },
  {
    char: "扳",
    spell: "bān",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢ",
    tradition: "扳",
    sex: "",
    tone: 1
  },
  {
    char: "扶",
    spell: "fú",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "扶",
    sex: "",
    tone: 2
  },
  {
    char: "批",
    spell: "pī",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧ",
    tradition: "批",
    sex: "",
    tone: 1
  },
  {
    char: "扼",
    spell: "è",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˇ",
    tradition: "扼",
    sex: "",
    tone: 4
  },
  {
    char: "找",
    spell: "zhǎo",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄠˇ",
    tradition: "找",
    sex: "",
    tone: 3
  },
  {
    char: "承",
    spell: "chéng",
    stroke: "8",
    radical: "乛",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄥˊ",
    tradition: "承",
    sex: "男",
    tone: 2
  },
  {
    char: "技",
    spell: "jì",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "技",
    sex: "",
    tone: 4
  },
  {
    char: "抄",
    spell: "chāo",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄠ",
    tradition: "抄",
    sex: "",
    tone: 1
  },
  {
    char: "把",
    spell: "bǎ",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "把",
    sex: "",
    tone: 3
  },
  {
    char: "抑",
    spell: "yì",
    stroke: "7",
    radical: "扌",
    struct: "左中右结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "抑",
    sex: "",
    tone: 4
  },
  {
    char: "抒",
    spell: "shū",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "抒",
    sex: "",
    tone: 1
  },
  {
    char: "抓",
    spell: "zhuā",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄚ",
    tradition: "抓",
    sex: "",
    tone: 1
  },
  {
    char: "投",
    spell: "tóu",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄡˊ",
    tradition: "投",
    sex: "",
    tone: 2
  },
  {
    char: "抖",
    spell: "dǒu",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˇ",
    tradition: "抖",
    sex: "",
    tone: 3
  },
  {
    char: "抗",
    spell: "kàng",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄤˋ",
    tradition: "抗",
    sex: "",
    tone: 4
  },
  {
    char: "折",
    spell: "shé",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄕㄜˊ",
    tradition: "摺",
    sex: "",
    tone: 2
  },
  {
    char: "抚",
    spell: "fǔ",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "撫",
    sex: "",
    tone: 3
  },
  {
    char: "抛",
    spell: "pāo",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄠ",
    tradition: "抛",
    sex: "",
    tone: 1
  },
  {
    char: "抠",
    spell: "kōu",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄡ",
    tradition: "摳",
    sex: "",
    tone: 1
  },
  {
    char: "抡",
    spell: "lún",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩㄣˊ",
    tradition: "掄",
    sex: "",
    tone: 1
  },
  {
    char: "抢",
    spell: "qiǎng",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄤˇ",
    tradition: "搶",
    sex: "",
    tone: 3
  },
  {
    char: "护",
    spell: "hù",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˋ",
    tradition: "護",
    sex: "",
    tone: 4
  },
  {
    char: "报",
    spell: "bào",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄠˋ",
    tradition: "報",
    sex: "",
    tone: 4
  },
  {
    char: "披",
    spell: "pī",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧ",
    tradition: "披",
    sex: "",
    tone: 1
  },
  {
    char: "抬",
    spell: "tái",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄞˊ",
    tradition: "抬",
    sex: "",
    tone: 2
  },
  {
    char: "抱",
    spell: "bào",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˋ",
    tradition: "抱",
    sex: "",
    tone: 4
  },
  {
    char: "抵",
    spell: "dǐ",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˇ",
    tradition: "抵",
    sex: "",
    tone: 3
  },
  {
    char: "抹",
    spell: "mǒ",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚ",
    tradition: "抹",
    sex: "",
    tone: 3
  },
  {
    char: "押",
    spell: "yā",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚ",
    tradition: "押",
    sex: "",
    tone: 1
  },
  {
    char: "抽",
    spell: "chōu",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄡ",
    tradition: "抽",
    sex: "",
    tone: 1
  },
  {
    char: "拂",
    spell: "fú",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "拂",
    sex: "",
    tone: 2
  },
  {
    char: "拄",
    spell: "zhǔ",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨˇ",
    tradition: "拄",
    sex: "",
    tone: 3
  },
  {
    char: "担",
    spell: "dān",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄢˋ",
    tradition: "擔",
    sex: "",
    tone: 1
  },
  {
    char: "拆",
    spell: "chāi",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄚ",
    tradition: "拆",
    sex: "",
    tone: 1
  },
  {
    char: "拇",
    spell: "mǔ",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄨˇ",
    tradition: "拇",
    sex: "",
    tone: 3
  },
  {
    char: "拉",
    spell: "lā",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˊ",
    tradition: "拉",
    sex: "",
    tone: 1
  },
  {
    char: "拌",
    spell: "bàn",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "拌",
    sex: "",
    tone: 4
  },
  {
    char: "拍",
    spell: "pāi",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞ",
    tradition: "拍",
    sex: "",
    tone: 1
  },
  {
    char: "拐",
    spell: "guǎi",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄍㄨㄞˇ",
    tradition: "拐",
    sex: "",
    tone: 3
  },
  {
    char: "拒",
    spell: "jù",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "拒",
    sex: "",
    tone: 4
  },
  {
    char: "拓",
    spell: "tuò",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄊㄚˋ",
    tradition: "拓",
    sex: "",
    tone: 4
  },
  {
    char: "拔",
    spell: "bá",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˊ",
    tradition: "拔",
    sex: "",
    tone: 2
  },
  {
    char: "拖",
    spell: "tuō",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛ",
    tradition: "拖",
    sex: "",
    tone: 1
  },
  {
    char: "拗",
    spell: "niù",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄠˋ",
    tradition: "拗",
    sex: "",
    tone: 4
  },
  {
    char: "拘",
    spell: "jū",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩ",
    tradition: "拘",
    sex: "",
    tone: 1
  },
  {
    char: "拙",
    spell: "zhuō",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄛ",
    tradition: "拙",
    sex: "",
    tone: 1
  },
  {
    char: "招",
    spell: "zhāo",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠ",
    tradition: "招",
    sex: "",
    tone: 1
  },
  {
    char: "拜",
    spell: "bài",
    stroke: "9",
    radical: "手",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄞˋ",
    tradition: "拜",
    sex: "",
    tone: 4
  },
  {
    char: "拟",
    spell: "nǐ",
    stroke: "7",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˇ",
    tradition: "擬",
    sex: "",
    tone: 3
  },
  {
    char: "拢",
    spell: "lǒng",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄥˇ",
    tradition: "攏",
    sex: "",
    tone: 3
  },
  {
    char: "拣",
    spell: "jiǎn",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "揀",
    sex: "",
    tone: 3
  },
  {
    char: "拥",
    spell: "yōng",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥ",
    tradition: "擁",
    sex: "",
    tone: 1
  },
  {
    char: "拦",
    spell: "lán",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄢˊ",
    tradition: "攔",
    sex: "",
    tone: 2
  },
  {
    char: "拧",
    spell: "nǐng",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄥˊ",
    tradition: "擰",
    sex: "",
    tone: 3
  },
  {
    char: "拨",
    spell: "bō",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛ",
    tradition: "撥",
    sex: "",
    tone: 1
  },
  {
    char: "择",
    spell: "zé",
    stroke: "8",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗㄜˊ",
    tradition: "擇",
    sex: "",
    tone: 2
  },
  {
    char: "括",
    spell: "kuò",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄛˋ",
    tradition: "括",
    sex: "",
    tone: 4
  },
  {
    char: "拭",
    spell: "shì",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "拭",
    sex: "",
    tone: 4
  },
  {
    char: "拯",
    spell: "zhěng",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥˇ",
    tradition: "拯",
    sex: "",
    tone: 3
  },
  {
    char: "拱",
    spell: "gǒng",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥˇ",
    tradition: "拱",
    sex: "",
    tone: 3
  },
  {
    char: "拳",
    spell: "quán",
    stroke: "10",
    radical: "手",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄢˊ",
    tradition: "拳",
    sex: "",
    tone: 2
  },
  {
    char: "拴",
    spell: "shuān",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄢ",
    tradition: "拴",
    sex: "",
    tone: 1
  },
  {
    char: "拷",
    spell: "kǎo",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄠˇ",
    tradition: "拷",
    sex: "",
    tone: 3
  },
  {
    char: "拼",
    spell: "pīn",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄣ",
    tradition: "拼",
    sex: "",
    tone: 1
  },
  {
    char: "拾",
    spell: "shí",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄜˋ",
    tradition: "拾",
    sex: "",
    tone: 2
  },
  {
    char: "拿",
    spell: "ná",
    stroke: "10",
    radical: "人",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄚˊ",
    tradition: "拿",
    sex: "",
    tone: 2
  },
  {
    char: "持",
    spell: "chí",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "持",
    sex: "",
    tone: 2
  },
  {
    char: "挂",
    spell: "guà",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄚˋ",
    tradition: "挂",
    sex: "",
    tone: 4
  },
  {
    char: "指",
    spell: "zhǐ",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˇ",
    tradition: "指",
    sex: "",
    tone: 3
  },
  {
    char: "按",
    spell: "àn",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄢˋ",
    tradition: "按",
    sex: "",
    tone: 4
  },
  {
    char: "挎",
    spell: "kuà",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄚˋ",
    tradition: "挎",
    sex: "",
    tone: 4
  },
  {
    char: "挑",
    spell: "tiāo",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄠˇ",
    tradition: "挑",
    sex: "",
    tone: 1
  },
  {
    char: "挖",
    spell: "wā",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄚ",
    tradition: "挖",
    sex: "",
    tone: 1
  },
  {
    char: "挚",
    spell: "zhì",
    stroke: "10",
    radical: "手",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "摯",
    sex: "",
    tone: 4
  },
  {
    char: "挟",
    spell: "jiā",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "挾",
    sex: "",
    tone: 2
  },
  {
    char: "挠",
    spell: "náo",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄠˊ",
    tradition: "撓",
    sex: "",
    tone: 2
  },
  {
    char: "挡",
    spell: "dǎng",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄤˋ",
    tradition: "擋",
    sex: "",
    tone: 3
  },
  {
    char: "挣",
    spell: "zhèng",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "挣",
    sex: "",
    tone: 4
  },
  {
    char: "挤",
    spell: "jǐ",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˇ",
    tradition: "擠",
    sex: "",
    tone: 3
  },
  {
    char: "挥",
    spell: "huī",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟ",
    tradition: "揮",
    sex: "",
    tone: 1
  },
  {
    char: "挨",
    spell: "āi",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞˊ",
    tradition: "挨",
    sex: "",
    tone: 1
  },
  {
    char: "挪",
    spell: "nuó",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄨㄛˊ",
    tradition: "挪",
    sex: "",
    tone: 2
  },
  {
    char: "挫",
    spell: "cuò",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛˋ",
    tradition: "挫",
    sex: "",
    tone: 4
  },
  {
    char: "振",
    spell: "zhèn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄣˋ",
    tradition: "振",
    sex: "男",
    tone: 4
  },
  {
    char: "挺",
    spell: "tǐng",
    stroke: "9",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˇ",
    tradition: "挺",
    sex: "",
    tone: 3
  },
  {
    char: "挽",
    spell: "wǎn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "挽",
    sex: "",
    tone: 3
  },
  {
    char: "捂",
    spell: "wǔ",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˇ",
    tradition: "捂",
    sex: "",
    tone: 3
  },
  {
    char: "捅",
    spell: "tǒng",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄥˇ",
    tradition: "捅",
    sex: "",
    tone: 3
  },
  {
    char: "捆",
    spell: "kǔn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄎㄨㄣˇ",
    tradition: "捆",
    sex: "",
    tone: 3
  },
  {
    char: "捉",
    spell: "zhuō",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄛ",
    tradition: "捉",
    sex: "",
    tone: 1
  },
  {
    char: "捌",
    spell: "bā",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚ",
    tradition: "捌",
    sex: "",
    tone: 1
  },
  {
    char: "捍",
    spell: "hàn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "捍",
    sex: "",
    tone: 4
  },
  {
    char: "捎",
    spell: "shāo",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄠˋ",
    tradition: "捎",
    sex: "",
    tone: 1
  },
  {
    char: "捏",
    spell: "niē",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄝ",
    tradition: "捏",
    sex: "",
    tone: 1
  },
  {
    char: "捐",
    spell: "juān",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢ",
    tradition: "捐",
    sex: "",
    tone: 1
  },
  {
    char: "捕",
    spell: "bǔ",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˇ",
    tradition: "捕",
    sex: "",
    tone: 3
  },
  {
    char: "捞",
    spell: "lāo",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄠ",
    tradition: "撈",
    sex: "",
    tone: 1
  },
  {
    char: "损",
    spell: "sǔn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄣˇ",
    tradition: "損",
    sex: "",
    tone: 3
  },
  {
    char: "捡",
    spell: "jiǎn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "撿",
    sex: "",
    tone: 3
  },
  {
    char: "换",
    spell: "huàn",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "换",
    sex: "",
    tone: 4
  },
  {
    char: "捣",
    spell: "dǎo",
    stroke: "10",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˇ",
    tradition: "搗",
    sex: "",
    tone: 3
  },
  {
    char: "捧",
    spell: "pěng",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄥˇ",
    tradition: "捧",
    sex: "",
    tone: 3
  },
  {
    char: "据",
    spell: "jù",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "據",
    sex: "",
    tone: 4
  },
  {
    char: "捶",
    spell: "chuí",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄟˊ",
    tradition: "捶",
    sex: "",
    tone: 2
  },
  {
    char: "捷",
    spell: "jié",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "捷",
    sex: "",
    tone: 2
  },
  {
    char: "捺",
    spell: "nà",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "捺",
    sex: "",
    tone: 4
  },
  {
    char: "捻",
    spell: "niǎn",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄧㄢˇ",
    tradition: "捻",
    sex: "",
    tone: 3
  },
  {
    char: "掀",
    spell: "xiān",
    stroke: "11",
    radical: "扌",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢ",
    tradition: "掀",
    sex: "",
    tone: 1
  },
  {
    char: "掂",
    spell: "diān",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢ",
    tradition: "掂",
    sex: "",
    tone: 1
  },
  {
    char: "授",
    spell: "shòu",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄡˋ",
    tradition: "授",
    sex: "",
    tone: 4
  },
  {
    char: "掉",
    spell: "diào",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄠˋ",
    tradition: "掉",
    sex: "",
    tone: 4
  },
  {
    char: "掌",
    spell: "zhǎng",
    stroke: "12",
    radical: "手",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄤˇ",
    tradition: "掌",
    sex: "",
    tone: 3
  },
  {
    char: "掏",
    spell: "tāo",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄠ",
    tradition: "掏",
    sex: "",
    tone: 1
  },
  {
    char: "掐",
    spell: "qiā",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄚ",
    tradition: "掐",
    sex: "",
    tone: 1
  },
  {
    char: "排",
    spell: "pái",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞˊ",
    tradition: "排",
    sex: "",
    tone: 2
  },
  {
    char: "掖",
    spell: "yè",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄝˋ",
    tradition: "掖",
    sex: "",
    tone: 4
  },
  {
    char: "掘",
    spell: "jué",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄝˊ",
    tradition: "掘",
    sex: "",
    tone: 2
  },
  {
    char: "掠",
    spell: "lüè",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩㄝˋ",
    tradition: "掠",
    sex: "",
    tone: 4
  },
  {
    char: "探",
    spell: "tàn",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˋ",
    tradition: "探",
    sex: "",
    tone: 4
  },
  {
    char: "接",
    spell: "jiē",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "接",
    sex: "",
    tone: 1
  },
  {
    char: "控",
    spell: "kòng",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄥˋ",
    tradition: "控",
    sex: "",
    tone: 4
  },
  {
    char: "推",
    spell: "tuī",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄟ",
    tradition: "推",
    sex: "",
    tone: 1
  },
  {
    char: "掩",
    spell: "yǎn",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˇ",
    tradition: "掩",
    sex: "",
    tone: 3
  },
  {
    char: "措",
    spell: "cuò",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛˋ",
    tradition: "措",
    sex: "",
    tone: 4
  },
  {
    char: "掰",
    spell: "bāi",
    stroke: "12",
    radical: "龵",
    struct: "左中右结构",
    five: "火",
    method: "会意",
    mark: "ㄅㄞ",
    tradition: "掰",
    sex: "",
    tone: 1
  },
  {
    char: "掷",
    spell: "zhì",
    stroke: "11",
    radical: "扌",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "擲",
    sex: "",
    tone: 4
  },
  {
    char: "掸",
    spell: "dǎn",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄢˇ",
    tradition: "撣",
    sex: "",
    tone: 3
  },
  {
    char: "掺",
    spell: "chān",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢˋ",
    tradition: "摻",
    sex: "",
    tone: 1
  },
  {
    char: "揉",
    spell: "róu",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄡˊ",
    tradition: "揉",
    sex: "",
    tone: 2
  },
  {
    char: "揍",
    spell: "zòu",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄡˋ",
    tradition: "揍",
    sex: "",
    tone: 4
  },
  {
    char: "描",
    spell: "miáo",
    stroke: "11",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄠˊ",
    tradition: "描",
    sex: "",
    tone: 2
  },
  {
    char: "提",
    spell: "tí",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧ",
    tradition: "提",
    sex: "",
    tone: 2
  },
  {
    char: "插",
    spell: "chā",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄚ",
    tradition: "插",
    sex: "",
    tone: 1
  },
  {
    char: "揖",
    spell: "yī",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧ",
    tradition: "揖",
    sex: "",
    tone: 1
  },
  {
    char: "握",
    spell: "wò",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄛˋ",
    tradition: "握",
    sex: "",
    tone: 4
  },
  {
    char: "揣",
    spell: "chuāi",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄞˋ",
    tradition: "揣",
    sex: "",
    tone: 1
  },
  {
    char: "揩",
    spell: "kāi",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄞ",
    tradition: "揩",
    sex: "",
    tone: 1
  },
  {
    char: "揪",
    spell: "jiū",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡ",
    tradition: "揪",
    sex: "",
    tone: 1
  },
  {
    char: "揭",
    spell: "jiē",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝ",
    tradition: "揭",
    sex: "",
    tone: 1
  },
  {
    char: "援",
    spell: "yuán",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "援",
    sex: "",
    tone: 2
  },
  {
    char: "揽",
    spell: "lǎn",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄢˇ",
    tradition: "攬",
    sex: "",
    tone: 3
  },
  {
    char: "搀",
    spell: "chān",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄢ",
    tradition: "攙",
    sex: "",
    tone: 1
  },
  {
    char: "搁",
    spell: "gē",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "擱",
    sex: "",
    tone: 1
  },
  {
    char: "搂",
    spell: "lōu",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄡˇ",
    tradition: "摟",
    sex: "",
    tone: 3
  },
  {
    char: "搅",
    spell: "jiǎo",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "攪",
    sex: "",
    tone: 3
  },
  {
    char: "搏",
    spell: "bó",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "搏",
    sex: "",
    tone: 2
  },
  {
    char: "搓",
    spell: "cuō",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛ",
    tradition: "搓",
    sex: "",
    tone: 1
  },
  {
    char: "搔",
    spell: "sāo",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄠ",
    tradition: "搔",
    sex: "",
    tone: 1
  },
  {
    char: "搜",
    spell: "sōu",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄡ",
    tradition: "搜",
    sex: "",
    tone: 1
  },
  {
    char: "搞",
    spell: "gǎo",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄠˇ",
    tradition: "搞",
    sex: "",
    tone: 3
  },
  {
    char: "搪",
    spell: "táng",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "搪",
    sex: "",
    tone: 2
  },
  {
    char: "搬",
    spell: "bān",
    stroke: "13",
    radical: "扌",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢ",
    tradition: "搬",
    sex: "",
    tone: 1
  },
  {
    char: "搭",
    spell: "dā",
    stroke: "12",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄚ",
    tradition: "搭",
    sex: "",
    tone: 1
  },
  {
    char: "携",
    spell: "xié",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "携",
    sex: "",
    tone: 2
  },
  {
    char: "摄",
    spell: "shè",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄜˋ",
    tradition: "攝",
    sex: "",
    tone: 4
  },
  {
    char: "摆",
    spell: "bǎi",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄅㄞˇ",
    tradition: "擺、襬",
    sex: "",
    tone: 3
  },
  {
    char: "摇",
    spell: "yáo",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠˊ",
    tradition: "摇",
    sex: "",
    tone: 2
  },
  {
    char: "摊",
    spell: "tān",
    stroke: "13",
    radical: "扌",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢ",
    tradition: "攤",
    sex: "",
    tone: 1
  },
  {
    char: "摔",
    spell: "shuāi",
    stroke: "14",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄞ",
    tradition: "摔",
    sex: "",
    tone: 1
  },
  {
    char: "摘",
    spell: "zhāi",
    stroke: "14",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄞ",
    tradition: "摘",
    sex: "",
    tone: 1
  },
  {
    char: "摧",
    spell: "cuī",
    stroke: "14",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟ",
    tradition: "摧",
    sex: "",
    tone: 1
  },
  {
    char: "摩",
    spell: "mó",
    stroke: "15",
    radical: "麻",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚ",
    tradition: "摩",
    sex: "",
    tone: 2
  },
  {
    char: "摸",
    spell: "mō",
    stroke: "13",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛ",
    tradition: "摸",
    sex: "",
    tone: 1
  },
  {
    char: "摹",
    spell: "mó",
    stroke: "14",
    radical: "手",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "摹",
    sex: "",
    tone: 2
  },
  {
    char: "撇",
    spell: "piě",
    stroke: "14",
    radical: "扌",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄝˇ",
    tradition: "撇",
    sex: "",
    tone: 3
  },
  {
    char: "撑",
    spell: "chēng",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄥ",
    tradition: "撑",
    sex: "",
    tone: 1
  },
  {
    char: "撒",
    spell: "sā",
    stroke: "15",
    radical: "扌",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄚˇ",
    tradition: "撒",
    sex: "",
    tone: 1
  },
  {
    char: "撕",
    spell: "sī",
    stroke: "15",
    radical: "扌",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄙ",
    tradition: "撕",
    sex: "",
    tone: 1
  },
  {
    char: "撞",
    spell: "zhuàng",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄤˋ",
    tradition: "撞",
    sex: "",
    tone: 4
  },
  {
    char: "撤",
    spell: "chè",
    stroke: "15",
    radical: "扌",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄜˋ",
    tradition: "撤",
    sex: "",
    tone: 4
  },
  {
    char: "撩",
    spell: "liáo",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "撩",
    sex: "",
    tone: 2
  },
  {
    char: "撬",
    spell: "qiào",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˋ",
    tradition: "撬",
    sex: "",
    tone: 4
  },
  {
    char: "播",
    spell: "bō",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛ",
    tradition: "播",
    sex: "",
    tone: 1
  },
  {
    char: "撮",
    spell: "cuō",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛ",
    tradition: "撮",
    sex: "",
    tone: 1
  },
  {
    char: "撰",
    spell: "zhuàn",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄢˋ",
    tradition: "撰",
    sex: "",
    tone: 4
  },
  {
    char: "撵",
    spell: "niǎn",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄧㄢˇ",
    tradition: "攆",
    sex: "",
    tone: 3
  },
  {
    char: "撼",
    spell: "hàn",
    stroke: "16",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "撼",
    sex: "",
    tone: 4
  },
  {
    char: "擂",
    spell: "lèi",
    stroke: "16",
    radical: "扌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄟˊ",
    tradition: "擂",
    sex: "",
    tone: 4
  },
  {
    char: "擅",
    spell: "shàn",
    stroke: "16",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢˋ",
    tradition: "擅",
    sex: "",
    tone: 4
  },
  {
    char: "操",
    spell: "cāo",
    stroke: "16",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄠ",
    tradition: "操",
    sex: "",
    tone: 1
  },
  {
    char: "擎",
    spell: "qíng",
    stroke: "16",
    radical: "手",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄥˊ",
    tradition: "擎",
    sex: "",
    tone: 2
  },
  {
    char: "擒",
    spell: "qín",
    stroke: "15",
    radical: "扌",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄣˊ",
    tradition: "擒",
    sex: "",
    tone: 2
  },
  {
    char: "擦",
    spell: "cā",
    stroke: "17",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄚ",
    tradition: "擦",
    sex: "",
    tone: 1
  },
  {
    char: "攀",
    spell: "pān",
    stroke: "19",
    radical: "手",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄢ",
    tradition: "攀",
    sex: "",
    tone: 1
  },
  {
    char: "攒",
    spell: "zǎn",
    stroke: "19",
    radical: "扌",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄢˊ",
    tradition: "攢",
    sex: "",
    tone: 3
  },
  {
    char: "攘",
    spell: "rǎng",
    stroke: "20",
    radical: "扌",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄤˇ",
    tradition: "攘",
    sex: "",
    tone: 3
  },
  {
    char: "支",
    spell: "zhī",
    stroke: "4",
    radical: "支",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄓ",
    tradition: "支",
    sex: "",
    tone: 1
  },
  {
    char: "收",
    spell: "shōu",
    stroke: "6",
    radical: "攵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄡ",
    tradition: "收",
    sex: "",
    tone: 1
  },
  {
    char: "改",
    spell: "gǎi",
    stroke: "7",
    radical: "己",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄞˇ",
    tradition: "改",
    sex: "",
    tone: 3
  },
  {
    char: "攻",
    spell: "gōng",
    stroke: "7",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "攻",
    sex: "",
    tone: 1
  },
  {
    char: "放",
    spell: "fàng",
    stroke: "8",
    radical: "攵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˋ",
    tradition: "放",
    sex: "",
    tone: 4
  },
  {
    char: "政",
    spell: "zhèng",
    stroke: "9",
    radical: "攵",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "政",
    sex: "男",
    tone: 4
  },
  {
    char: "故",
    spell: "gù",
    stroke: "9",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˋ",
    tradition: "故",
    sex: "",
    tone: 4
  },
  {
    char: "效",
    spell: "xiào",
    stroke: "10",
    radical: "攵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄠˋ",
    tradition: "效",
    sex: "",
    tone: 4
  },
  {
    char: "敌",
    spell: "dí",
    stroke: "10",
    radical: "舌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "敵",
    sex: "",
    tone: 2
  },
  {
    char: "敏",
    spell: "mǐn",
    stroke: "11",
    radical: "攵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄣˇ",
    tradition: "敏",
    sex: "",
    tone: 3
  },
  {
    char: "救",
    spell: "jiù",
    stroke: "11",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡˋ",
    tradition: "救",
    sex: "",
    tone: 4
  },
  {
    char: "教",
    spell: "jiào",
    stroke: "11",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "教",
    sex: "",
    tone: 4
  },
  {
    char: "敛",
    spell: "liǎn",
    stroke: "11",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄢˇ",
    tradition: "斂",
    sex: "",
    tone: 3
  },
  {
    char: "敞",
    spell: "chǎng",
    stroke: "12",
    radical: "攵",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˇ",
    tradition: "敞",
    sex: "",
    tone: 3
  },
  {
    char: "敢",
    spell: "gǎn",
    stroke: "11",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄢˇ",
    tradition: "敢",
    sex: "",
    tone: 3
  },
  {
    char: "散",
    spell: "sàn",
    stroke: "12",
    radical: "攵",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄢˋ",
    tradition: "散",
    sex: "",
    tone: 4
  },
  {
    char: "敦",
    spell: "dūn",
    stroke: "12",
    radical: "攵",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄟˋ",
    tradition: "敦",
    sex: "",
    tone: 1
  },
  {
    char: "敬",
    spell: "jìng",
    stroke: "12",
    radical: "攵",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄥˋ",
    tradition: "敬",
    sex: "男",
    tone: 4
  },
  {
    char: "数",
    spell: "shù",
    stroke: "13",
    radical: "攵",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "數",
    sex: "",
    tone: 4
  },
  {
    char: "敲",
    spell: "qiāo",
    stroke: "14",
    radical: "高",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠ",
    tradition: "敲",
    sex: "",
    tone: 1
  },
  {
    char: "整",
    spell: "zhěng",
    stroke: "16",
    radical: "攵",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄓㄥˇ",
    tradition: "整",
    sex: "",
    tone: 3
  },
  {
    char: "敷",
    spell: "fū",
    stroke: "15",
    radical: "攵",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄨ",
    tradition: "敷",
    sex: "",
    tone: 1
  },
  {
    char: "文",
    spell: "wén",
    stroke: "4",
    radical: "文",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄨㄣˊ",
    tradition: "文",
    sex: "男",
    tone: 2
  },
  {
    char: "斋",
    spell: "zhāi",
    stroke: "10",
    radical: "文",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄞ",
    tradition: "齋",
    sex: "",
    tone: 1
  },
  {
    char: "斑",
    spell: "bān",
    stroke: "12",
    radical: "王",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢ",
    tradition: "斑",
    sex: "",
    tone: 1
  },
  {
    char: "斗",
    spell: "dòu",
    stroke: "4",
    radical: "斗",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄡˋ",
    tradition: "鬥",
    sex: "",
    tone: 4
  },
  {
    char: "料",
    spell: "liào",
    stroke: "10",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄠˋ",
    tradition: "料",
    sex: "",
    tone: 4
  },
  {
    char: "斜",
    spell: "xié",
    stroke: "11",
    radical: "斗",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "斜",
    sex: "",
    tone: 2
  },
  {
    char: "斟",
    spell: "zhēn",
    stroke: "13",
    radical: "斗",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄣ",
    tradition: "斟",
    sex: "",
    tone: 1
  },
  {
    char: "斤",
    spell: "jīn",
    stroke: "4",
    radical: "斤",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄣ",
    tradition: "斤",
    sex: "",
    tone: 1
  },
  {
    char: "斥",
    spell: "chì",
    stroke: "5",
    radical: "斤",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔˋ",
    tradition: "斥",
    sex: "",
    tone: 4
  },
  {
    char: "斧",
    spell: "fǔ",
    stroke: "8",
    radical: "父",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "斧",
    sex: "",
    tone: 3
  },
  {
    char: "斩",
    spell: "zhǎn",
    stroke: "8",
    radical: "斤",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄢˇ",
    tradition: "斬",
    sex: "",
    tone: 3
  },
  {
    char: "断",
    spell: "duàn",
    stroke: "11",
    radical: "斤",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄨㄢˋ",
    tradition: "斷",
    sex: "",
    tone: 4
  },
  {
    char: "斯",
    spell: "sī",
    stroke: "12",
    radical: "斤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙ",
    tradition: "斯",
    sex: "",
    tone: 1
  },
  {
    char: "新",
    spell: "xīn",
    stroke: "13",
    radical: "斤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄣ",
    tradition: "新",
    sex: "男",
    tone: 1
  },
  {
    char: "方",
    spell: "fāng",
    stroke: "4",
    radical: "方",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄤ",
    tradition: "方",
    sex: "",
    tone: 1
  },
  {
    char: "施",
    spell: "shī",
    stroke: "9",
    radical: "方",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕ",
    tradition: "施",
    sex: "",
    tone: 1
  },
  {
    char: "旁",
    spell: "páng",
    stroke: "10",
    radical: "方",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "旁",
    sex: "",
    tone: 2
  },
  {
    char: "旅",
    spell: "lǚ",
    stroke: "10",
    radical: "方",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "旅",
    sex: "",
    tone: 3
  },
  {
    char: "旋",
    spell: "xuán",
    stroke: "11",
    radical: "方",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄩㄢˊ",
    tradition: "鏇",
    sex: "",
    tone: 2
  },
  {
    char: "族",
    spell: "zú",
    stroke: "11",
    radical: "方",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄨˊ",
    tradition: "族",
    sex: "",
    tone: 2
  },
  {
    char: "旗",
    spell: "qí",
    stroke: "14",
    radical: "方",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "旗",
    sex: "",
    tone: 2
  },
  {
    char: "无",
    spell: "wú",
    stroke: "4",
    radical: "一、无",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄛˊ",
    tradition: "無",
    sex: "",
    tone: 2
  },
  {
    char: "既",
    spell: "jì",
    stroke: "9",
    radical: "旡",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "既",
    sex: "",
    tone: 4
  },
  {
    char: "日",
    spell: "rì",
    stroke: "4",
    radical: "日",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄖˋ",
    tradition: "日",
    sex: "",
    tone: 4
  },
  {
    char: "旦",
    spell: "dàn",
    stroke: "5",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄉㄢˋ",
    tradition: "旦",
    sex: "",
    tone: 4
  },
  {
    char: "旧",
    spell: "jiù",
    stroke: "5",
    radical: "丨",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄡˋ",
    tradition: "舊",
    sex: "",
    tone: 4
  },
  {
    char: "旨",
    spell: "zhǐ",
    stroke: "6",
    radical: "匕",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓˇ",
    tradition: "旨",
    sex: "",
    tone: 3
  },
  {
    char: "早",
    spell: "zǎo",
    stroke: "6",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄠˇ",
    tradition: "早",
    sex: "",
    tone: 3
  },
  {
    char: "旬",
    spell: "xún",
    stroke: "6",
    radical: "日",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄩㄣˊ",
    tradition: "旬",
    sex: "",
    tone: 2
  },
  {
    char: "旭",
    spell: "xù",
    stroke: "6",
    radical: "日",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "旭",
    sex: "男",
    tone: 4
  },
  {
    char: "旱",
    spell: "hàn",
    stroke: "7",
    radical: "日",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "旱",
    sex: "",
    tone: 4
  },
  {
    char: "时",
    spell: "shí",
    stroke: "7",
    radical: "日",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄕˊ",
    tradition: "時",
    sex: "男",
    tone: 2
  },
  {
    char: "旷",
    spell: "kuàng",
    stroke: "7",
    radical: "日",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄤˋ",
    tradition: "曠",
    sex: "",
    tone: 4
  },
  {
    char: "旺",
    spell: "wàng",
    stroke: "8",
    radical: "日",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄤˋ",
    tradition: "旺",
    sex: "",
    tone: 4
  },
  {
    char: "昂",
    spell: "áng",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄤˊ",
    tradition: "昂",
    sex: "",
    tone: 2
  },
  {
    char: "昆",
    spell: "kūn",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄎㄨㄣ",
    tradition: "昆",
    sex: "",
    tone: 1
  },
  {
    char: "昌",
    spell: "chāng",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄤ",
    tradition: "昌",
    sex: "男",
    tone: 1
  },
  {
    char: "明",
    spell: "míng",
    stroke: "8",
    radical: "日",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧㄥˊ",
    tradition: "明",
    sex: "男",
    tone: 2
  },
  {
    char: "昏",
    spell: "hūn",
    stroke: "8",
    radical: "氏",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄏㄨㄣ",
    tradition: "昏",
    sex: "",
    tone: 1
  },
  {
    char: "易",
    spell: "yì",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄧˋ",
    tradition: "易",
    sex: "",
    tone: 4
  },
  {
    char: "昔",
    spell: "xī",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧ",
    tradition: "昔",
    sex: "",
    tone: 1
  },
  {
    char: "昙",
    spell: "tán",
    stroke: "8",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄢˊ",
    tradition: "曇",
    sex: "",
    tone: 2
  },
  {
    char: "星",
    spell: "xīng",
    stroke: "9",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄥ",
    tradition: "星",
    sex: "男",
    tone: 1
  },
  {
    char: "映",
    spell: "yìng",
    stroke: "9",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄥˋ",
    tradition: "映",
    sex: "",
    tone: 4
  },
  {
    char: "春",
    spell: "chūn",
    stroke: "9",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄨㄣ",
    tradition: "春",
    sex: "女",
    tone: 1
  },
  {
    char: "昧",
    spell: "mèi",
    stroke: "9",
    radical: "日",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄟˋ",
    tradition: "昧",
    sex: "",
    tone: 4
  },
  {
    char: "昨",
    spell: "zuó",
    stroke: "9",
    radical: "日",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨㄛˊ",
    tradition: "昨",
    sex: "",
    tone: 2
  },
  {
    char: "昭",
    spell: "zhāo",
    stroke: "9",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠ",
    tradition: "昭",
    sex: "女",
    tone: 1
  },
  {
    char: "是",
    spell: "shì",
    stroke: "9",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕˋ",
    tradition: "是",
    sex: "",
    tone: 4
  },
  {
    char: "昵",
    spell: "nì",
    stroke: "9",
    radical: "日",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˋ",
    tradition: "昵",
    sex: "",
    tone: 4
  },
  {
    char: "昼",
    spell: "zhòu",
    stroke: "9",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄓㄡˋ",
    tradition: "晝",
    sex: "",
    tone: 4
  },
  {
    char: "显",
    spell: "xiǎn",
    stroke: "9",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄒㄧㄢˇ",
    tradition: "顯",
    sex: "",
    tone: 3
  },
  {
    char: "晃",
    spell: "huàng",
    stroke: "10",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄤˋ",
    tradition: "晃",
    sex: "",
    tone: 4
  },
  {
    char: "晋",
    spell: "jìn",
    stroke: "10",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄣˋ",
    tradition: "晋",
    sex: "",
    tone: 4
  },
  {
    char: "晌",
    spell: "shǎng",
    stroke: "10",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄤˇ",
    tradition: "晌",
    sex: "",
    tone: 3
  },
  {
    char: "晒",
    spell: "shài",
    stroke: "10",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄕㄞˋ",
    tradition: "曬",
    sex: "",
    tone: 4
  },
  {
    char: "晓",
    spell: "xiǎo",
    stroke: "10",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄧㄠˇ",
    tradition: "曉",
    sex: "女",
    tone: 3
  },
  {
    char: "晕",
    spell: "yūn",
    stroke: "10",
    radical: "日",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄣˋ",
    tradition: "暈",
    sex: "",
    tone: 1
  },
  {
    char: "晚",
    spell: "wǎn",
    stroke: "11",
    radical: "日",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "晚",
    sex: "",
    tone: 3
  },
  {
    char: "晤",
    spell: "wù",
    stroke: "11",
    radical: "日",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "晤",
    sex: "",
    tone: 4
  },
  {
    char: "晦",
    spell: "huì",
    stroke: "11",
    radical: "日",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "晦",
    sex: "",
    tone: 4
  },
  {
    char: "晨",
    spell: "chén",
    stroke: "11",
    radical: "日",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄣˊ",
    tradition: "晨",
    sex: "男",
    tone: 2
  },
  {
    char: "普",
    spell: "pǔ",
    stroke: "12",
    radical: "日",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄆㄨˇ",
    tradition: "普",
    sex: "",
    tone: 3
  },
  {
    char: "景",
    spell: "jǐng",
    stroke: "12",
    radical: "日",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥˇ",
    tradition: "景",
    sex: "男",
    tone: 3
  },
  {
    char: "晰",
    spell: "xī",
    stroke: "12",
    radical: "日",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "晰",
    sex: "",
    tone: 1
  },
  {
    char: "晴",
    spell: "qíng",
    stroke: "12",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄑㄧㄥˊ",
    tradition: "晴",
    sex: "女",
    tone: 2
  },
  {
    char: "晶",
    spell: "jīng",
    stroke: "12",
    radical: "日",
    struct: "品字结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄥ",
    tradition: "晶",
    sex: "女",
    tone: 1
  },
  {
    char: "智",
    spell: "zhì",
    stroke: "12",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄓˋ",
    tradition: "智",
    sex: "",
    tone: 4
  },
  {
    char: "晾",
    spell: "liàng",
    stroke: "12",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˋ",
    tradition: "晾",
    sex: "",
    tone: 4
  },
  {
    char: "暂",
    spell: "zàn",
    stroke: "12",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄗㄢˋ",
    tradition: "暫",
    sex: "",
    tone: 4
  },
  {
    char: "暇",
    spell: "xiá",
    stroke: "13",
    radical: "日",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "暇",
    sex: "",
    tone: 2
  },
  {
    char: "暑",
    spell: "shǔ",
    stroke: "12",
    radical: "曰",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "暑",
    sex: "",
    tone: 3
  },
  {
    char: "暖",
    spell: "nuǎn",
    stroke: "13",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄨㄢˇ",
    tradition: "暖",
    sex: "",
    tone: 3
  },
  {
    char: "暗",
    spell: "àn",
    stroke: "13",
    radical: "日",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄢˋ",
    tradition: "暗",
    sex: "",
    tone: 4
  },
  {
    char: "暮",
    spell: "mù",
    stroke: "14",
    radical: "日",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "暮",
    sex: "",
    tone: 4
  },
  {
    char: "暴",
    spell: "bào",
    stroke: "15",
    radical: "日",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄠˋ",
    tradition: "暴",
    sex: "",
    tone: 4
  },
  {
    char: "曙",
    spell: "shǔ",
    stroke: "17",
    radical: "日",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "曙",
    sex: "",
    tone: 3
  },
  {
    char: "曲",
    spell: "qǔ",
    stroke: "6",
    radical: "丨",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩˇ",
    tradition: "麯",
    sex: "",
    tone: 1
  },
  {
    char: "更",
    spell: "gēng",
    stroke: "7",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄥˋ",
    tradition: "更",
    sex: "",
    tone: 4
  },
  {
    char: "曹",
    spell: "cáo",
    stroke: "11",
    radical: "曰",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄘㄠˊ",
    tradition: "曹",
    sex: "",
    tone: 2
  },
  {
    char: "曼",
    spell: "màn",
    stroke: "11",
    radical: "曰",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˋ",
    tradition: "曼",
    sex: "",
    tone: 4
  },
  {
    char: "曾",
    spell: "zēng",
    stroke: "12",
    radical: "曰",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄥˊ",
    tradition: "曾",
    sex: "",
    tone: 2
  },
  {
    char: "替",
    spell: "tì",
    stroke: "12",
    radical: "曰",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄧˋ",
    tradition: "替",
    sex: "",
    tone: 4
  },
  {
    char: "最",
    spell: "zuì",
    stroke: "12",
    radical: "曰",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄗㄨㄟˋ",
    tradition: "最",
    sex: "",
    tone: 4
  },
  {
    char: "月",
    spell: "yuè",
    stroke: "4",
    radical: "月",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄩㄝˋ",
    tradition: "月",
    sex: "女",
    tone: 4
  },
  {
    char: "有",
    spell: "yǒu",
    stroke: "6",
    radical: "",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄡˋ",
    tradition: "有",
    sex: "男",
    tone: 3
  },
  {
    char: "朋",
    spell: "péng",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄆㄥˊ",
    tradition: "朋",
    sex: "男",
    tone: 2
  },
  {
    char: "服",
    spell: "fú",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˊ",
    tradition: "服",
    sex: "",
    tone: 2
  },
  {
    char: "朗",
    spell: "lǎng",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄤˇ",
    tradition: "朗",
    sex: "男",
    tone: 3
  },
  {
    char: "望",
    spell: "wàng",
    stroke: "11",
    radical: "王",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄨㄤˋ",
    tradition: "望",
    sex: "",
    tone: 4
  },
  {
    char: "朝",
    spell: "cháo",
    stroke: "12",
    radical: "龺",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄠˊ",
    tradition: "朝",
    sex: "",
    tone: 2
  },
  {
    char: "期",
    spell: "qī",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "期",
    sex: "",
    tone: 1
  },
  {
    char: "朦",
    spell: "méng",
    stroke: "17",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄥˊ",
    tradition: "朦",
    sex: "",
    tone: 2
  },
  {
    char: "木",
    spell: "mù",
    stroke: "4",
    radical: "木",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄇㄨˋ",
    tradition: "木",
    sex: "",
    tone: 4
  },
  {
    char: "未",
    spell: "wèi",
    stroke: "5",
    radical: "一",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄨㄟˋ",
    tradition: "未",
    sex: "",
    tone: 4
  },
  {
    char: "末",
    spell: "mò",
    stroke: "5",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄛˋ",
    tradition: "末",
    sex: "",
    tone: 4
  },
  {
    char: "本",
    spell: "běn",
    stroke: "5",
    radical: "木",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄅㄣˇ",
    tradition: "本",
    sex: "男",
    tone: 3
  },
  {
    char: "术",
    spell: "shù",
    stroke: "5",
    radical: "木",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄕㄨˋ",
    tradition: "術",
    sex: "",
    tone: 4
  },
  {
    char: "朱",
    spell: "zhū",
    stroke: "6",
    radical: "丿",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄓㄨ",
    tradition: "硃",
    sex: "",
    tone: 1
  },
  {
    char: "朴",
    spell: "pǔ",
    stroke: "6",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄧㄠˊ",
    tradition: "樸",
    sex: "",
    tone: 3
  },
  {
    char: "朵",
    spell: "duǒ",
    stroke: "6",
    radical: "几",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄉㄨㄛˇ",
    tradition: "朵",
    sex: "",
    tone: 3
  },
  {
    char: "机",
    spell: "jī",
    stroke: "6",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "機",
    sex: "",
    tone: 1
  },
  {
    char: "朽",
    spell: "xiǔ",
    stroke: "6",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄡˇ",
    tradition: "朽",
    sex: "",
    tone: 3
  },
  {
    char: "杀",
    spell: "shā",
    stroke: "6",
    radical: "朩",
    struct: "上下结构",
    five: "水",
    method: "",
    mark: "",
    tradition: "殺",
    sex: "",
    tone: 1
  },
  {
    char: "杂",
    spell: "zá",
    stroke: "6",
    radical: "朩",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄗㄚˊ",
    tradition: "雜",
    sex: "",
    tone: 2
  },
  {
    char: "权",
    spell: "quán",
    stroke: "6",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩㄢˊ",
    tradition: "權",
    sex: "",
    tone: 2
  },
  {
    char: "杆",
    spell: "gǎn",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢˇ",
    tradition: "杆",
    sex: "",
    tone: 1
  },
  {
    char: "杈",
    spell: "chā",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄚˋ",
    tradition: "杈",
    sex: "",
    tone: 1
  },
  {
    char: "杉",
    spell: "shān",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄚ",
    tradition: "杉",
    sex: "",
    tone: 1
  },
  {
    char: "李",
    spell: "lǐ",
    stroke: "7",
    radical: "木",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧˇ",
    tradition: "李",
    sex: "",
    tone: 3
  },
  {
    char: "杏",
    spell: "xìng",
    stroke: "7",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄒㄧㄥˋ",
    tradition: "杏",
    sex: "",
    tone: 4
  },
  {
    char: "材",
    spell: "cái",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄞˊ",
    tradition: "材",
    sex: "",
    tone: 2
  },
  {
    char: "村",
    spell: "cūn",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄨㄣ",
    tradition: "村",
    sex: "",
    tone: 1
  },
  {
    char: "杖",
    spell: "zhàng",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "杖",
    sex: "",
    tone: 4
  },
  {
    char: "杜",
    spell: "dù",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "杜",
    sex: "",
    tone: 4
  },
  {
    char: "束",
    spell: "shù",
    stroke: "7",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨˋ",
    tradition: "束",
    sex: "",
    tone: 4
  },
  {
    char: "杠",
    spell: "gàng",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄤˋ",
    tradition: "杠",
    sex: "",
    tone: 4
  },
  {
    char: "条",
    spell: "tiáo",
    stroke: "7",
    radical: "夂",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄠˊ",
    tradition: "條",
    sex: "",
    tone: 2
  },
  {
    char: "来",
    spell: "lái",
    stroke: "7",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄞˊ",
    tradition: "來",
    sex: "",
    tone: 2
  },
  {
    char: "杨",
    spell: "yáng",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄤˊ",
    tradition: "楊",
    sex: "",
    tone: 2
  },
  {
    char: "杭",
    spell: "háng",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄤˊ",
    tradition: "杭",
    sex: "",
    tone: 2
  },
  {
    char: "杯",
    spell: "bēi",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄟ",
    tradition: "杯",
    sex: "",
    tone: 1
  },
  {
    char: "杰",
    spell: "jié",
    stroke: "8",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄝˊ",
    tradition: "杰",
    sex: "男",
    tone: 2
  },
  {
    char: "松",
    spell: "sōng",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄨㄥ",
    tradition: "鬆",
    sex: "男",
    tone: 1
  },
  {
    char: "板",
    spell: "bǎn",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄢˇ",
    tradition: "闆",
    sex: "",
    tone: 3
  },
  {
    char: "极",
    spell: "jí",
    stroke: "7",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˊ",
    tradition: "極",
    sex: "",
    tone: 2
  },
  {
    char: "构",
    spell: "gòu",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄡˋ",
    tradition: "構",
    sex: "",
    tone: 4
  },
  {
    char: "枉",
    spell: "wǎng",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄤˇ",
    tradition: "枉",
    sex: "",
    tone: 3
  },
  {
    char: "析",
    spell: "xī",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄒㄧ",
    tradition: "析",
    sex: "",
    tone: 1
  },
  {
    char: "枕",
    spell: "zhěn",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄣˇ",
    tradition: "枕",
    sex: "",
    tone: 3
  },
  {
    char: "林",
    spell: "lín",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄌㄧㄣˊ",
    tradition: "林",
    sex: "男",
    tone: 2
  },
  {
    char: "枚",
    spell: "méi",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "枚",
    sex: "",
    tone: 2
  },
  {
    char: "果",
    spell: "guǒ",
    stroke: "8",
    radical: "丨、木",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄛˇ",
    tradition: "果",
    sex: "",
    tone: 3
  },
  {
    char: "枝",
    spell: "zhī",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓ",
    tradition: "枝",
    sex: "女",
    tone: 1
  },
  {
    char: "枢",
    spell: "shū",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "樞",
    sex: "",
    tone: 1
  },
  {
    char: "枣",
    spell: "zǎo",
    stroke: "8",
    radical: "木",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄠˇ",
    tradition: "棗",
    sex: "",
    tone: 3
  },
  {
    char: "枪",
    spell: "qiāng",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "",
    mark: "",
    tradition: "槍",
    sex: "",
    tone: 1
  },
  {
    char: "枫",
    spell: "fēng",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄥ",
    tradition: "楓",
    sex: "女",
    tone: 1
  },
  {
    char: "枯",
    spell: "kū",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄎㄨ",
    tradition: "枯",
    sex: "",
    tone: 1
  },
  {
    char: "架",
    spell: "jià",
    stroke: "9",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "架",
    sex: "",
    tone: 4
  },
  {
    char: "枷",
    spell: "jiā",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚ",
    tradition: "枷",
    sex: "",
    tone: 1
  },
  {
    char: "柄",
    spell: "bǐng",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄧㄥˇ",
    tradition: "柄",
    sex: "",
    tone: 3
  },
  {
    char: "柏",
    spell: "bǎi",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄞˇ",
    tradition: "柏",
    sex: "男",
    tone: 3
  },
  {
    char: "某",
    spell: "mǒu",
    stroke: "9",
    radical: "甘",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄡˇ",
    tradition: "某",
    sex: "",
    tone: 3
  },
  {
    char: "柑",
    spell: "gān",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢ",
    tradition: "柑",
    sex: "",
    tone: 1
  },
  {
    char: "柒",
    spell: "qī",
    stroke: "9",
    radical: "木",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "柒",
    sex: "",
    tone: 1
  },
  {
    char: "染",
    spell: "rǎn",
    stroke: "9",
    radical: "木",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄢˇ",
    tradition: "染",
    sex: "",
    tone: 3
  },
  {
    char: "柔",
    spell: "róu",
    stroke: "9",
    radical: "矛",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄡˊ",
    tradition: "柔",
    sex: "女",
    tone: 2
  },
  {
    char: "柜",
    spell: "guì",
    stroke: "8",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˋ",
    tradition: "櫃",
    sex: "",
    tone: 4
  },
  {
    char: "柠",
    spell: "níng",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧㄥˊ",
    tradition: "檸",
    sex: "",
    tone: 2
  },
  {
    char: "查",
    spell: "zhā",
    stroke: "9",
    radical: "木",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄚˊ",
    tradition: "查",
    sex: "",
    tone: 2
  },
  {
    char: "柬",
    spell: "jiǎn",
    stroke: "9",
    radical: "木",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄢˇ",
    tradition: "柬",
    sex: "",
    tone: 3
  },
  {
    char: "柱",
    spell: "zhù",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "柱",
    sex: "",
    tone: 4
  },
  {
    char: "柳",
    spell: "liǔ",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄡˇ",
    tradition: "柳",
    sex: "",
    tone: 3
  },
  {
    char: "柴",
    spell: "chái",
    stroke: "10",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄞˊ",
    tradition: "柴",
    sex: "",
    tone: 2
  },
  {
    char: "柿",
    spell: "shì",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "柿",
    sex: "",
    tone: 4
  },
  {
    char: "栅",
    spell: "shān",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄢ",
    tradition: "栅",
    sex: "",
    tone: 1
  },
  {
    char: "标",
    spell: "biāo",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄅㄧㄠ",
    tradition: "標",
    sex: "",
    tone: 1
  },
  {
    char: "栈",
    spell: "zhàn",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄢˋ",
    tradition: "棧",
    sex: "",
    tone: 4
  },
  {
    char: "栋",
    spell: "dòng",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄨㄥˋ",
    tradition: "棟",
    sex: "男",
    tone: 4
  },
  {
    char: "栏",
    spell: "lán",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄢˊ",
    tradition: "欄",
    sex: "",
    tone: 2
  },
  {
    char: "树",
    spell: "shù",
    stroke: "9",
    radical: "木",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "樹",
    sex: "男",
    tone: 4
  },
  {
    char: "栓",
    spell: "shuān",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨㄢ",
    tradition: "栓",
    sex: "",
    tone: 1
  },
  {
    char: "栖",
    spell: "qī",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "栖",
    sex: "",
    tone: 1
  },
  {
    char: "栗",
    spell: "lì",
    stroke: "10",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄌㄧˋ",
    tradition: "栗",
    sex: "",
    tone: 4
  },
  {
    char: "校",
    spell: "xiào",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "校",
    sex: "",
    tone: 4
  },
  {
    char: "株",
    spell: "zhū",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨ",
    tradition: "株",
    sex: "",
    tone: 1
  },
  {
    char: "样",
    spell: "yàng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄤˋ",
    tradition: "樣",
    sex: "",
    tone: 4
  },
  {
    char: "核",
    spell: "hé",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "核",
    sex: "",
    tone: 2
  },
  {
    char: "根",
    spell: "gēn",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄣ",
    tradition: "根",
    sex: "",
    tone: 1
  },
  {
    char: "格",
    spell: "gé",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "格",
    sex: "",
    tone: 2
  },
  {
    char: "栽",
    spell: "zāi",
    stroke: "10",
    radical: "木",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄞ",
    tradition: "栽",
    sex: "",
    tone: 1
  },
  {
    char: "桂",
    spell: "guì",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˋ",
    tradition: "桂",
    sex: "女",
    tone: 4
  },
  {
    char: "桃",
    spell: "táo",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄠˊ",
    tradition: "桃",
    sex: "",
    tone: 2
  },
  {
    char: "桅",
    spell: "wéi",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˊ",
    tradition: "桅",
    sex: "",
    tone: 2
  },
  {
    char: "框",
    spell: "kuàng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄤˋ",
    tradition: "框",
    sex: "",
    tone: 4
  },
  {
    char: "案",
    spell: "àn",
    stroke: "10",
    radical: "宀",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄢˋ",
    tradition: "案",
    sex: "",
    tone: 4
  },
  {
    char: "桌",
    spell: "zhuō",
    stroke: "10",
    radical: "⺊",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨㄛ",
    tradition: "桌",
    sex: "",
    tone: 1
  },
  {
    char: "桐",
    spell: "tóng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄨㄥˊ",
    tradition: "桐",
    sex: "",
    tone: 2
  },
  {
    char: "桑",
    spell: "sāng",
    stroke: "10",
    radical: "又、木",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄙㄤ",
    tradition: "桑",
    sex: "女",
    tone: 1
  },
  {
    char: "档",
    spell: "dàng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄤˋ",
    tradition: "檔",
    sex: "",
    tone: 4
  },
  {
    char: "桥",
    spell: "qiáo",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "橋",
    sex: "",
    tone: 2
  },
  {
    char: "桦",
    spell: "huà",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄚˋ",
    tradition: "樺",
    sex: "男",
    tone: 4
  },
  {
    char: "桨",
    spell: "jiǎng",
    stroke: "10",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤˇ",
    tradition: "槳",
    sex: "",
    tone: 3
  },
  {
    char: "桩",
    spell: "zhuāng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨㄤ",
    tradition: "樁",
    sex: "",
    tone: 1
  },
  {
    char: "桶",
    spell: "tǒng",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄨㄥˇ",
    tradition: "桶",
    sex: "",
    tone: 3
  },
  {
    char: "梁",
    spell: "liáng",
    stroke: "11",
    radical: "木",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˊ",
    tradition: "梁",
    sex: "男",
    tone: 2
  },
  {
    char: "梅",
    spell: "méi",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "梅",
    sex: "女",
    tone: 2
  },
  {
    char: "梆",
    spell: "bāng",
    stroke: "10",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄅㄤ",
    tradition: "梆",
    sex: "",
    tone: 1
  },
  {
    char: "梗",
    spell: "gěng",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄥˇ",
    tradition: "梗",
    sex: "",
    tone: 3
  },
  {
    char: "梢",
    spell: "shāo",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄠ",
    tradition: "梢",
    sex: "",
    tone: 1
  },
  {
    char: "梦",
    spell: "mèng",
    stroke: "11",
    radical: "夕",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄇㄥˋ",
    tradition: "夢",
    sex: "女",
    tone: 4
  },
  {
    char: "梧",
    spell: "wú",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨˊ",
    tradition: "梧",
    sex: "",
    tone: 2
  },
  {
    char: "梨",
    spell: "lí",
    stroke: "11",
    radical: "木",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "梨",
    sex: "",
    tone: 2
  },
  {
    char: "梭",
    spell: "suō",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄨㄛ",
    tradition: "梭",
    sex: "",
    tone: 1
  },
  {
    char: "梯",
    spell: "tī",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄧ",
    tradition: "梯",
    sex: "",
    tone: 1
  },
  {
    char: "械",
    spell: "xiè",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "械",
    sex: "",
    tone: 4
  },
  {
    char: "梳",
    spell: "shū",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "梳",
    sex: "",
    tone: 1
  },
  {
    char: "检",
    spell: "jiǎn",
    stroke: "11",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "檢",
    sex: "",
    tone: 3
  },
  {
    char: "棉",
    spell: "mián",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄇㄧㄢˊ",
    tradition: "棉",
    sex: "",
    tone: 2
  },
  {
    char: "棋",
    spell: "qí",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "棋",
    sex: "",
    tone: 2
  },
  {
    char: "棍",
    spell: "gùn",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "",
    mark: "",
    tradition: "棍",
    sex: "",
    tone: 4
  },
  {
    char: "棒",
    spell: "bàng",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "",
    mark: "",
    tradition: "棒",
    sex: "",
    tone: 4
  },
  {
    char: "棕",
    spell: "zōng",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄗㄨㄥ",
    tradition: "棕",
    sex: "",
    tone: 1
  },
  {
    char: "棘",
    spell: "jí",
    stroke: "12",
    radical: "一",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "棘",
    sex: "",
    tone: 2
  },
  {
    char: "棚",
    spell: "péng",
    stroke: "12",
    radical: "木",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "棚",
    sex: "",
    tone: 2
  },
  {
    char: "棠",
    spell: "táng",
    stroke: "12",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "棠",
    sex: "",
    tone: 2
  },
  {
    char: "森",
    spell: "sēn",
    stroke: "12",
    radical: "木",
    struct: "品字结构",
    five: "木",
    method: "会意",
    mark: "ㄙㄣ",
    tradition: "森",
    sex: "",
    tone: 1
  },
  {
    char: "棱",
    spell: "léng",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄥ",
    tradition: "棱",
    sex: "",
    tone: 2
  },
  {
    char: "棵",
    spell: "kē",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜ",
    tradition: "棵",
    sex: "",
    tone: 1
  },
  {
    char: "棺",
    spell: "guān",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄢ",
    tradition: "棺",
    sex: "",
    tone: 1
  },
  {
    char: "椅",
    spell: "yǐ",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˇ",
    tradition: "椅",
    sex: "",
    tone: 3
  },
  {
    char: "植",
    spell: "zhí",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓˊ",
    tradition: "植",
    sex: "",
    tone: 2
  },
  {
    char: "椎",
    spell: "zhuī",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄨㄟˊ",
    tradition: "椎",
    sex: "",
    tone: 1
  },
  {
    char: "椒",
    spell: "jiāo",
    stroke: "12",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "椒",
    sex: "",
    tone: 1
  },
  {
    char: "椭",
    spell: "tuǒ",
    stroke: "12",
    radical: "木",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄨㄛˇ",
    tradition: "橢",
    sex: "",
    tone: 3
  },
  {
    char: "椰",
    spell: "yē",
    stroke: "12",
    radical: "木",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄝ",
    tradition: "椰",
    sex: "",
    tone: 1
  },
  {
    char: "椿",
    spell: "chūn",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄨㄣ",
    tradition: "椿",
    sex: "",
    tone: 1
  },
  {
    char: "楔",
    spell: "xiē",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝ",
    tradition: "楔",
    sex: "",
    tone: 1
  },
  {
    char: "楚",
    spell: "chǔ",
    stroke: "13",
    radical: "疋",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˇ",
    tradition: "楚",
    sex: "",
    tone: 3
  },
  {
    char: "楞",
    spell: "léng",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄥˊ",
    tradition: "楞",
    sex: "",
    tone: 2
  },
  {
    char: "楣",
    spell: "méi",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "楣",
    sex: "",
    tone: 2
  },
  {
    char: "楷",
    spell: "kǎi",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝ",
    tradition: "楷",
    sex: "",
    tone: 3
  },
  {
    char: "楼",
    spell: "lóu",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄡˊ",
    tradition: "樓",
    sex: "",
    tone: 2
  },
  {
    char: "概",
    spell: "gài",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄞˋ",
    tradition: "概",
    sex: "",
    tone: 4
  },
  {
    char: "榄",
    spell: "lǎn",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄢˇ",
    tradition: "欖",
    sex: "",
    tone: 3
  },
  {
    char: "榆",
    spell: "yú",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "榆",
    sex: "",
    tone: 2
  },
  {
    char: "榔",
    spell: "láng",
    stroke: "12",
    radical: "木",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄤˊ",
    tradition: "榔",
    sex: "",
    tone: 2
  },
  {
    char: "榕",
    spell: "róng",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "榕",
    sex: "男",
    tone: 2
  },
  {
    char: "榛",
    spell: "zhēn",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄣ",
    tradition: "榛",
    sex: "",
    tone: 1
  },
  {
    char: "榜",
    spell: "bǎng",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "榜",
    sex: "",
    tone: 3
  },
  {
    char: "榨",
    spell: "zhà",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄚˋ",
    tradition: "榨",
    sex: "",
    tone: 4
  },
  {
    char: "榴",
    spell: "liú",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "榴",
    sex: "",
    tone: 2
  },
  {
    char: "槐",
    spell: "huái",
    stroke: "13",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄞˊ",
    tradition: "槐",
    sex: "",
    tone: 2
  },
  {
    char: "槽",
    spell: "cáo",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄠˊ",
    tradition: "槽",
    sex: "",
    tone: 2
  },
  {
    char: "樊",
    spell: "fán",
    stroke: "15",
    radical: "木",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄢˊ",
    tradition: "樊",
    sex: "",
    tone: 2
  },
  {
    char: "樟",
    spell: "zhāng",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄤ",
    tradition: "樟",
    sex: "",
    tone: 1
  },
  {
    char: "模",
    spell: "mó",
    stroke: "14",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "模",
    sex: "",
    tone: 2
  },
  {
    char: "横",
    spell: "héng",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄥˊ",
    tradition: "横",
    sex: "",
    tone: 2
  },
  {
    char: "樱",
    spell: "yīng",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "櫻",
    sex: "",
    tone: 1
  },
  {
    char: "橄",
    spell: "gǎn",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢˇ",
    tradition: "橄",
    sex: "",
    tone: 3
  },
  {
    char: "橘",
    spell: "jú",
    stroke: "16",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˊ",
    tradition: "橘",
    sex: "",
    tone: 2
  },
  {
    char: "橙",
    spell: "chéng",
    stroke: "16",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "橙",
    sex: "",
    tone: 2
  },
  {
    char: "橡",
    spell: "xiàng",
    stroke: "15",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄤˋ",
    tradition: "橡",
    sex: "",
    tone: 4
  },
  {
    char: "橱",
    spell: "chú",
    stroke: "16",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "橱",
    sex: "",
    tone: 2
  },
  {
    char: "檀",
    spell: "tán",
    stroke: "17",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "檀",
    sex: "",
    tone: 2
  },
  {
    char: "檐",
    spell: "yán",
    stroke: "17",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "檐",
    sex: "",
    tone: 2
  },
  {
    char: "檩",
    spell: "lǐn",
    stroke: "17",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄣˇ",
    tradition: "檩",
    sex: "",
    tone: 3
  },
  {
    char: "檬",
    spell: "méng",
    stroke: "17",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄥˊ",
    tradition: "檬",
    sex: "",
    tone: 2
  },
  {
    char: "欠",
    spell: "qiàn",
    stroke: "4",
    radical: "欠",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄢˋ",
    tradition: "欠",
    sex: "",
    tone: 4
  },
  {
    char: "次",
    spell: "cì",
    stroke: "6",
    radical: "欠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˋ",
    tradition: "次",
    sex: "",
    tone: 4
  },
  {
    char: "欢",
    spell: "huān",
    stroke: "6",
    radical: "又",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢ",
    tradition: "歡",
    sex: "女",
    tone: 1
  },
  {
    char: "欣",
    spell: "xīn",
    stroke: "8",
    radical: "斤",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄣ",
    tradition: "欣",
    sex: "女",
    tone: 1
  },
  {
    char: "欧",
    spell: "ōu",
    stroke: "8",
    radical: "欠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄡ",
    tradition: "歐",
    sex: "",
    tone: 1
  },
  {
    char: "欲",
    spell: "yù",
    stroke: "11",
    radical: "欠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "欲",
    sex: "",
    tone: 4
  },
  {
    char: "欺",
    spell: "qī",
    stroke: "12",
    radical: "欠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "欺",
    sex: "",
    tone: 1
  },
  {
    char: "款",
    spell: "kuǎn",
    stroke: "12",
    radical: "欠",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄨㄢˇ",
    tradition: "款",
    sex: "",
    tone: 3
  },
  {
    char: "歇",
    spell: "xiē",
    stroke: "13",
    radical: "欠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝ",
    tradition: "歇",
    sex: "",
    tone: 1
  },
  {
    char: "歉",
    spell: "qiàn",
    stroke: "14",
    radical: "欠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢˋ",
    tradition: "歉",
    sex: "",
    tone: 4
  },
  {
    char: "歌",
    spell: "gē",
    stroke: "14",
    radical: "欠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜ",
    tradition: "歌",
    sex: "",
    tone: 1
  },
  {
    char: "止",
    spell: "zhǐ",
    stroke: "4",
    radical: "止",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄓˇ",
    tradition: "止",
    sex: "",
    tone: 3
  },
  {
    char: "正",
    spell: "zhèng",
    stroke: "5",
    radical: "止",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄓㄥˋ",
    tradition: "正",
    sex: "男",
    tone: 4
  },
  {
    char: "此",
    spell: "cǐ",
    stroke: "6",
    radical: "止",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄘˇ",
    tradition: "此",
    sex: "",
    tone: 3
  },
  {
    char: "步",
    spell: "bù",
    stroke: "7",
    radical: "止",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄨˋ",
    tradition: "步",
    sex: "",
    tone: 4
  },
  {
    char: "武",
    spell: "wǔ",
    stroke: "8",
    radical: "止",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄨˇ",
    tradition: "武",
    sex: "男",
    tone: 3
  },
  {
    char: "歧",
    spell: "qí",
    stroke: "8",
    radical: "止",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "歧",
    sex: "",
    tone: 2
  },
  {
    char: "歪",
    spell: "wāi",
    stroke: "9",
    radical: "一",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄨㄞˇ",
    tradition: "歪",
    sex: "",
    tone: 1
  },
  {
    char: "歹",
    spell: "dǎi",
    stroke: "4",
    radical: "歹",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄉㄞˇ",
    tradition: "歹",
    sex: "",
    tone: 3
  },
  {
    char: "死",
    spell: "sǐ",
    stroke: "6",
    radical: "歹",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "",
    tradition: "死",
    sex: "",
    tone: 3
  },
  {
    char: "歼",
    spell: "jiān",
    stroke: "7",
    radical: "歹",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢ",
    tradition: "殱",
    sex: "",
    tone: 1
  },
  {
    char: "殃",
    spell: "yāng",
    stroke: "9",
    radical: "歹",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄤ",
    tradition: "殃",
    sex: "",
    tone: 1
  },
  {
    char: "殉",
    spell: "xùn",
    stroke: "10",
    radical: "歹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "殉",
    sex: "",
    tone: 4
  },
  {
    char: "殊",
    spell: "shū",
    stroke: "10",
    radical: "歹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "殊",
    sex: "",
    tone: 1
  },
  {
    char: "残",
    spell: "cán",
    stroke: "9",
    radical: "歹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢˊ",
    tradition: "殘",
    sex: "",
    tone: 2
  },
  {
    char: "殖",
    spell: "zhí",
    stroke: "12",
    radical: "歹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˊ",
    tradition: "殖",
    sex: "",
    tone: 2
  },
  {
    char: "殴",
    spell: "ōu",
    stroke: "8",
    radical: "殳",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄡ",
    tradition: "毆",
    sex: "",
    tone: 1
  },
  {
    char: "段",
    spell: "duàn",
    stroke: "9",
    radical: "殳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄢˋ",
    tradition: "段",
    sex: "",
    tone: 4
  },
  {
    char: "殷",
    spell: "yīn",
    stroke: "10",
    radical: "殳",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢ",
    tradition: "殷",
    sex: "",
    tone: 1
  },
  {
    char: "殿",
    spell: "diàn",
    stroke: "13",
    radical: "殳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "殿",
    sex: "",
    tone: 4
  },
  {
    char: "毁",
    spell: "huǐ",
    stroke: "13",
    radical: "殳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˇ",
    tradition: "毁",
    sex: "",
    tone: 3
  },
  {
    char: "毅",
    spell: "yì",
    stroke: "15",
    radical: "殳",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "毅",
    sex: "男",
    tone: 4
  },
  {
    char: "母",
    spell: "mǔ",
    stroke: "5",
    radical: "母",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄨˇ",
    tradition: "母",
    sex: "",
    tone: 3
  },
  {
    char: "每",
    spell: "měi",
    stroke: "7",
    radical: "母",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˇ",
    tradition: "每",
    sex: "",
    tone: 3
  },
  {
    char: "毒",
    spell: "dú",
    stroke: "9",
    radical: "母",
    struct: "上下结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "毒",
    sex: "",
    tone: 2
  },
  {
    char: "比",
    spell: "bǐ",
    stroke: "4",
    radical: "比",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˇ",
    tradition: "比",
    sex: "",
    tone: 3
  },
  {
    char: "毕",
    spell: "bì",
    stroke: "6",
    radical: "比",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˋ",
    tradition: "畢",
    sex: "",
    tone: 4
  },
  {
    char: "毙",
    spell: "bì",
    stroke: "10",
    radical: "比",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "斃",
    sex: "",
    tone: 4
  },
  {
    char: "毛",
    spell: "máo",
    stroke: "4",
    radical: "毛",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄠˊ",
    tradition: "毛",
    sex: "",
    tone: 2
  },
  {
    char: "毡",
    spell: "zhān",
    stroke: "9",
    radical: "毛",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄢ",
    tradition: "氈",
    sex: "",
    tone: 1
  },
  {
    char: "毫",
    spell: "háo",
    stroke: "11",
    radical: "亠",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄠˊ",
    tradition: "毫",
    sex: "",
    tone: 2
  },
  {
    char: "毯",
    spell: "tǎn",
    stroke: "12",
    radical: "毛",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˇ",
    tradition: "毯",
    sex: "",
    tone: 3
  },
  {
    char: "氏",
    spell: "shì",
    stroke: "4",
    radical: "氏",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕˋ",
    tradition: "氏",
    sex: "",
    tone: 4
  },
  {
    char: "民",
    spell: "mín",
    stroke: "5",
    radical: "乛",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧㄣˊ",
    tradition: "民",
    sex: "男",
    tone: 2
  },
  {
    char: "氓",
    spell: "méng",
    stroke: "8",
    radical: "亠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄤˊ",
    tradition: "氓",
    sex: "",
    tone: 2
  },
  {
    char: "气",
    spell: "qì",
    stroke: "4",
    radical: "气",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧˋ",
    tradition: "氣",
    sex: "",
    tone: 4
  },
  {
    char: "氛",
    spell: "fēn",
    stroke: "8",
    radical: "气",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣ",
    tradition: "氛",
    sex: "",
    tone: 1
  },
  {
    char: "氢",
    spell: "qīng",
    stroke: "9",
    radical: "气",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄥ",
    tradition: "氫",
    sex: "",
    tone: 1
  },
  {
    char: "氧",
    spell: "yǎng",
    stroke: "10",
    radical: "气",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄤˇ",
    tradition: "氧",
    sex: "",
    tone: 3
  },
  {
    char: "氨",
    spell: "ān",
    stroke: "10",
    radical: "气",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄢ",
    tradition: "氨",
    sex: "",
    tone: 1
  },
  {
    char: "氮",
    spell: "dàn",
    stroke: "12",
    radical: "气",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄢˋ",
    tradition: "氮",
    sex: "",
    tone: 4
  },
  {
    char: "氯",
    spell: "lǜ",
    stroke: "12",
    radical: "气",
    struct: "半包围结构",
    five: "",
    method: "-",
    mark: "ㄌㄩˋ",
    tradition: "氯",
    sex: "",
    tone: 4
  },
  {
    char: "水",
    spell: "shuǐ",
    stroke: "4",
    radical: "水",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄕㄨㄟˇ",
    tradition: "水",
    sex: "",
    tone: 3
  },
  {
    char: "永",
    spell: "yǒng",
    stroke: "5",
    radical: "丶",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄩㄥˇ",
    tradition: "永",
    sex: "男",
    tone: 3
  },
  {
    char: "汁",
    spell: "zhī",
    stroke: "5",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓ",
    tradition: "汁",
    sex: "",
    tone: 1
  },
  {
    char: "求",
    spell: "qiú",
    stroke: "7",
    radical: "一",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄑㄧㄡˊ",
    tradition: "求",
    sex: "",
    tone: 2
  },
  {
    char: "汇",
    spell: "huì",
    stroke: "5",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨㄟˋ",
    tradition: "匯、彙",
    sex: "",
    tone: 4
  },
  {
    char: "汉",
    spell: "hàn",
    stroke: "5",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄏㄢˋ",
    tradition: "漢",
    sex: "",
    tone: 4
  },
  {
    char: "汗",
    spell: "hàn",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˊ",
    tradition: "汗",
    sex: "",
    tone: 4
  },
  {
    char: "汛",
    spell: "xùn",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "汛",
    sex: "",
    tone: 4
  },
  {
    char: "汞",
    spell: "gǒng",
    stroke: "7",
    radical: "水",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄥˇ",
    tradition: "汞",
    sex: "",
    tone: 3
  },
  {
    char: "江",
    spell: "jiāng",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "江",
    sex: "男",
    tone: 1
  },
  {
    char: "池",
    spell: "chí",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "池",
    sex: "",
    tone: 2
  },
  {
    char: "污",
    spell: "wū",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨ",
    tradition: "污",
    sex: "",
    tone: 1
  },
  {
    char: "汤",
    spell: "tāng",
    stroke: "6",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄤ",
    tradition: "湯",
    sex: "",
    tone: 1
  },
  {
    char: "汪",
    spell: "wāng",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄤ",
    tradition: "汪",
    sex: "",
    tone: 1
  },
  {
    char: "汰",
    spell: "tài",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄞˋ",
    tradition: "汰",
    sex: "",
    tone: 4
  },
  {
    char: "汹",
    spell: "xiōng",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄥ",
    tradition: "汹",
    sex: "",
    tone: 1
  },
  {
    char: "汽",
    spell: "qì",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧˋ",
    tradition: "汽",
    sex: "",
    tone: 4
  },
  {
    char: "沃",
    spell: "wò",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄛˋ",
    tradition: "沃",
    sex: "",
    tone: 4
  },
  {
    char: "沈",
    spell: "shěn",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄣˇ",
    tradition: "瀋",
    sex: "",
    tone: 3
  },
  {
    char: "沉",
    spell: "chén",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄣˊ",
    tradition: "沉",
    sex: "",
    tone: 2
  },
  {
    char: "沐",
    spell: "mù",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "沐",
    sex: "",
    tone: 4
  },
  {
    char: "沙",
    spell: "shā",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄕㄚˋ",
    tradition: "沙",
    sex: "",
    tone: 1
  },
  {
    char: "沛",
    spell: "pèi",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄟˋ",
    tradition: "沛",
    sex: "",
    tone: 4
  },
  {
    char: "沟",
    spell: "gōu",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄡ",
    tradition: "溝",
    sex: "",
    tone: 1
  },
  {
    char: "没",
    spell: "méi",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄟˊ",
    tradition: "没",
    sex: "",
    tone: 2
  },
  {
    char: "沥",
    spell: "lì",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "瀝",
    sex: "",
    tone: 4
  },
  {
    char: "沦",
    spell: "lún",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄩㄣˊ",
    tradition: "淪",
    sex: "",
    tone: 2
  },
  {
    char: "沧",
    spell: "cāng",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄘㄤ",
    tradition: "滄",
    sex: "",
    tone: 1
  },
  {
    char: "沪",
    spell: "hù",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˋ",
    tradition: "滬",
    sex: "",
    tone: 4
  },
  {
    char: "沫",
    spell: "mò",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "沫",
    sex: "",
    tone: 4
  },
  {
    char: "沮",
    spell: "jǔ",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "沮",
    sex: "",
    tone: 3
  },
  {
    char: "河",
    spell: "hé",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "河",
    sex: "男",
    tone: 2
  },
  {
    char: "沸",
    spell: "fèi",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄟˋ",
    tradition: "沸",
    sex: "",
    tone: 4
  },
  {
    char: "油",
    spell: "yóu",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄡˊ",
    tradition: "油",
    sex: "",
    tone: 2
  },
  {
    char: "治",
    spell: "zhì",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "治",
    sex: "",
    tone: 4
  },
  {
    char: "沼",
    spell: "zhǎo",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄠˇ",
    tradition: "沼",
    sex: "",
    tone: 3
  },
  {
    char: "沽",
    spell: "gū",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "沽",
    sex: "",
    tone: 1
  },
  {
    char: "沾",
    spell: "zhān",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄢ",
    tradition: "沾",
    sex: "",
    tone: 1
  },
  {
    char: "沿",
    spell: "yán",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "沿",
    sex: "",
    tone: 2
  },
  {
    char: "泄",
    spell: "xiè",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "泄",
    sex: "",
    tone: 4
  },
  {
    char: "泉",
    spell: "quán",
    stroke: "9",
    radical: "白",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄑㄩㄢˊ",
    tradition: "泉",
    sex: "",
    tone: 2
  },
  {
    char: "泊",
    spell: "bó",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "泊",
    sex: "",
    tone: 2
  },
  {
    char: "泌",
    spell: "mì",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "泌",
    sex: "",
    tone: 4
  },
  {
    char: "法",
    spell: "fǎ",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄚˇ",
    tradition: "法",
    sex: "",
    tone: 3
  },
  {
    char: "泛",
    spell: "fàn",
    stroke: "7",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˋ",
    tradition: "泛",
    sex: "",
    tone: 4
  },
  {
    char: "泞",
    spell: "nìng",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄧㄥˋ",
    tradition: "濘",
    sex: "",
    tone: 4
  },
  {
    char: "泡",
    spell: "pào",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄠˋ",
    tradition: "泡",
    sex: "",
    tone: 4
  },
  {
    char: "波",
    spell: "bō",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛ",
    tradition: "波",
    sex: "男",
    tone: 1
  },
  {
    char: "泣",
    spell: "qì",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧˋ",
    tradition: "泣",
    sex: "",
    tone: 4
  },
  {
    char: "泥",
    spell: "ní",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄧˊ",
    tradition: "泥",
    sex: "",
    tone: 2
  },
  {
    char: "注",
    spell: "zhù",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "注",
    sex: "",
    tone: 4
  },
  {
    char: "泪",
    spell: "lèi",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄌㄟˋ",
    tradition: "泪",
    sex: "",
    tone: 4
  },
  {
    char: "泰",
    spell: "tài",
    stroke: "10",
    radical: "氺",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄞˋ",
    tradition: "泰",
    sex: "男",
    tone: 4
  },
  {
    char: "泳",
    spell: "yǒng",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩㄥˇ",
    tradition: "泳",
    sex: "",
    tone: 3
  },
  {
    char: "泵",
    spell: "bèng",
    stroke: "9",
    radical: "石",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄥˋ",
    tradition: "泵",
    sex: "",
    tone: 4
  },
  {
    char: "泻",
    spell: "xiè",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "瀉",
    sex: "",
    tone: 4
  },
  {
    char: "泼",
    spell: "pō",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄛ",
    tradition: "潑",
    sex: "",
    tone: 1
  },
  {
    char: "泽",
    spell: "zé",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄗㄜˊ",
    tradition: "澤",
    sex: "男",
    tone: 2
  },
  {
    char: "洁",
    spell: "jié",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "潔",
    sex: "女",
    tone: 2
  },
  {
    char: "洋",
    spell: "yáng",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄤˊ",
    tradition: "洋",
    sex: "",
    tone: 2
  },
  {
    char: "洒",
    spell: "sǎ",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄚˇ",
    tradition: "灑",
    sex: "",
    tone: 3
  },
  {
    char: "洗",
    spell: "xǐ",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧˇ",
    tradition: "洗",
    sex: "",
    tone: 3
  },
  {
    char: "洛",
    spell: "luò",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄨㄛˋ",
    tradition: "洛",
    sex: "",
    tone: 4
  },
  {
    char: "洞",
    spell: "dòng",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄨㄥˋ",
    tradition: "洞",
    sex: "",
    tone: 4
  },
  {
    char: "津",
    spell: "jīn",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄐㄧㄣ",
    tradition: "津",
    sex: "",
    tone: 1
  },
  {
    char: "洪",
    spell: "hóng",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄥˊ",
    tradition: "洪",
    sex: "",
    tone: 2
  },
  {
    char: "洲",
    spell: "zhōu",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄡ",
    tradition: "洲",
    sex: "",
    tone: 1
  },
  {
    char: "活",
    spell: "huó",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄛˊ",
    tradition: "活",
    sex: "",
    tone: 2
  },
  {
    char: "洼",
    spell: "wā",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄚ",
    tradition: "窪",
    sex: "",
    tone: 1
  },
  {
    char: "洽",
    spell: "qià",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧㄚˋ",
    tradition: "洽",
    sex: "",
    tone: 4
  },
  {
    char: "派",
    spell: "pài",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄚ",
    tradition: "派",
    sex: "",
    tone: 4
  },
  {
    char: "流",
    spell: "liú",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "流",
    sex: "",
    tone: 2
  },
  {
    char: "浅",
    spell: "qiǎn",
    stroke: "8",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄢ",
    tradition: "淺",
    sex: "",
    tone: 3
  },
  {
    char: "浆",
    spell: "jiāng",
    stroke: "10",
    radical: "水",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "漿",
    sex: "",
    tone: 1
  },
  {
    char: "浇",
    spell: "jiāo",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "澆",
    sex: "",
    tone: 1
  },
  {
    char: "浊",
    spell: "zhuó",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄓㄨㄛˊ",
    tradition: "濁",
    sex: "",
    tone: 2
  },
  {
    char: "测",
    spell: "cè",
    stroke: "9",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄘㄜˋ",
    tradition: "測",
    sex: "",
    tone: 4
  },
  {
    char: "济",
    spell: "jì",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "濟",
    sex: "",
    tone: 4
  },
  {
    char: "浑",
    spell: "hún",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄣˊ",
    tradition: "渾",
    sex: "",
    tone: 2
  },
  {
    char: "浓",
    spell: "nóng",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄨㄥˊ",
    tradition: "濃",
    sex: "",
    tone: 2
  },
  {
    char: "浙",
    spell: "zhè",
    stroke: "10",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄜˋ",
    tradition: "浙",
    sex: "",
    tone: 4
  },
  {
    char: "浦",
    spell: "pǔ",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄨˇ",
    tradition: "浦",
    sex: "",
    tone: 3
  },
  {
    char: "浩",
    spell: "hào",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄠˋ",
    tradition: "浩",
    sex: "男",
    tone: 4
  },
  {
    char: "浪",
    spell: "làng",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄤˋ",
    tradition: "浪",
    sex: "",
    tone: 4
  },
  {
    char: "浮",
    spell: "fú",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "浮",
    sex: "",
    tone: 2
  },
  {
    char: "浴",
    spell: "yù",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "浴",
    sex: "",
    tone: 4
  },
  {
    char: "海",
    spell: "hǎi",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄞˇ",
    tradition: "海",
    sex: "男",
    tone: 3
  },
  {
    char: "浸",
    spell: "jìn",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄣˋ",
    tradition: "浸",
    sex: "",
    tone: 4
  },
  {
    char: "涂",
    spell: "tú",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄨˊ",
    tradition: "塗",
    sex: "",
    tone: 2
  },
  {
    char: "消",
    spell: "xiāo",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "消",
    sex: "",
    tone: 1
  },
  {
    char: "涉",
    spell: "shè",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄕㄜˋ",
    tradition: "涉",
    sex: "",
    tone: 4
  },
  {
    char: "涌",
    spell: "yǒng",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄨㄥ",
    tradition: "湧",
    sex: "",
    tone: 3
  },
  {
    char: "涎",
    spell: "xián",
    stroke: "9",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄢˊ",
    tradition: "涎",
    sex: "",
    tone: 2
  },
  {
    char: "涕",
    spell: "tì",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄧˋ",
    tradition: "涕",
    sex: "",
    tone: 4
  },
  {
    char: "涛",
    spell: "tāo",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄠ",
    tradition: "濤",
    sex: "男",
    tone: 1
  },
  {
    char: "涝",
    spell: "lào",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄠˊ",
    tradition: "澇",
    sex: "",
    tone: 4
  },
  {
    char: "涡",
    spell: "wō",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄛ",
    tradition: "渦",
    sex: "",
    tone: 1
  },
  {
    char: "涣",
    spell: "huàn",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "涣",
    sex: "",
    tone: 4
  },
  {
    char: "涤",
    spell: "dí",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "滌",
    sex: "",
    tone: 2
  },
  {
    char: "润",
    spell: "rùn",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄨㄣˋ",
    tradition: "潤",
    sex: "",
    tone: 4
  },
  {
    char: "涧",
    spell: "jiàn",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "澗",
    sex: "",
    tone: 4
  },
  {
    char: "涨",
    spell: "zhǎng",
    stroke: "10",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "漲",
    sex: "",
    tone: 3
  },
  {
    char: "涩",
    spell: "sè",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄜˋ",
    tradition: "澀",
    sex: "",
    tone: 4
  },
  {
    char: "涮",
    spell: "shuàn",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄨㄢˋ",
    tradition: "涮",
    sex: "",
    tone: 4
  },
  {
    char: "涯",
    spell: "yá",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄚˊ",
    tradition: "涯",
    sex: "",
    tone: 2
  },
  {
    char: "液",
    spell: "yè",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄝˋ",
    tradition: "液",
    sex: "",
    tone: 4
  },
  {
    char: "涵",
    spell: "hán",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˊ",
    tradition: "涵",
    sex: "",
    tone: 2
  },
  {
    char: "淀",
    spell: "diàn",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "澱",
    sex: "",
    tone: 4
  },
  {
    char: "淆",
    spell: "xiáo",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄠˊ",
    tradition: "淆",
    sex: "",
    tone: 2
  },
  {
    char: "淋",
    spell: "lín",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄣˊ",
    tradition: "淋",
    sex: "",
    tone: 2
  },
  {
    char: "淌",
    spell: "tǎng",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄤˇ",
    tradition: "淌",
    sex: "",
    tone: 3
  },
  {
    char: "淑",
    spell: "shū",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "淑",
    sex: "女",
    tone: 1
  },
  {
    char: "淘",
    spell: "táo",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄠˊ",
    tradition: "淘",
    sex: "",
    tone: 2
  },
  {
    char: "淡",
    spell: "dàn",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄢˋ",
    tradition: "淡",
    sex: "",
    tone: 4
  },
  {
    char: "淤",
    spell: "yū",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄩ",
    tradition: "淤",
    sex: "",
    tone: 1
  },
  {
    char: "淫",
    spell: "yín",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "",
    mark: "",
    tradition: "淫",
    sex: "",
    tone: 2
  },
  {
    char: "淮",
    spell: "huái",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄞˊ",
    tradition: "淮",
    sex: "",
    tone: 2
  },
  {
    char: "深",
    spell: "shēn",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄣ",
    tradition: "深",
    sex: "",
    tone: 1
  },
  {
    char: "淳",
    spell: "chún",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄨㄣˊ",
    tradition: "淳",
    sex: "",
    tone: 2
  },
  {
    char: "混",
    spell: "hùn",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄣˊ",
    tradition: "混",
    sex: "",
    tone: 4
  },
  {
    char: "淹",
    spell: "yān",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄢ",
    tradition: "淹",
    sex: "",
    tone: 1
  },
  {
    char: "添",
    spell: "tiān",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄧㄢ",
    tradition: "添",
    sex: "",
    tone: 1
  },
  {
    char: "清",
    spell: "qīng",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧㄥ",
    tradition: "清",
    sex: "男",
    tone: 1
  },
  {
    char: "渊",
    spell: "yuān",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄩㄢ",
    tradition: "淵",
    sex: "",
    tone: 1
  },
  {
    char: "渐",
    spell: "jiàn",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "漸",
    sex: "",
    tone: 4
  },
  {
    char: "渔",
    spell: "yú",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "漁",
    sex: "",
    tone: 2
  },
  {
    char: "渗",
    spell: "shèn",
    stroke: "11",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄣˋ",
    tradition: "滲",
    sex: "",
    tone: 4
  },
  {
    char: "渠",
    spell: "qú",
    stroke: "11",
    radical: "木",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄩˊ",
    tradition: "渠",
    sex: "",
    tone: 2
  },
  {
    char: "渡",
    spell: "dù",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "渡",
    sex: "",
    tone: 4
  },
  {
    char: "渣",
    spell: "zhā",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄚ",
    tradition: "渣",
    sex: "",
    tone: 1
  },
  {
    char: "渤",
    spell: "bó",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "渤",
    sex: "",
    tone: 2
  },
  {
    char: "温",
    spell: "wēn",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄣ",
    tradition: "温",
    sex: "",
    tone: 1
  },
  {
    char: "港",
    spell: "gǎng",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄤˇ",
    tradition: "港",
    sex: "",
    tone: 3
  },
  {
    char: "渴",
    spell: "kě",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄎㄜˇ",
    tradition: "渴",
    sex: "",
    tone: 3
  },
  {
    char: "游",
    spell: "yóu",
    stroke: "12",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄡˊ",
    tradition: "游",
    sex: "",
    tone: 2
  },
  {
    char: "渺",
    spell: "miǎo",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄠˇ",
    tradition: "渺",
    sex: "",
    tone: 3
  },
  {
    char: "湃",
    spell: "pài",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞˋ",
    tradition: "湃",
    sex: "",
    tone: 4
  },
  {
    char: "湖",
    spell: "hú",
    stroke: "12",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "湖",
    sex: "",
    tone: 2
  },
  {
    char: "湘",
    spell: "xiāng",
    stroke: "12",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄤ",
    tradition: "湘",
    sex: "",
    tone: 1
  },
  {
    char: "湾",
    spell: "wān",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄢ",
    tradition: "灣",
    sex: "",
    tone: 1
  },
  {
    char: "湿",
    spell: "shī",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕ",
    tradition: "濕",
    sex: "",
    tone: 1
  },
  {
    char: "溃",
    spell: "kuì",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄎㄨㄟˋ",
    tradition: "潰",
    sex: "",
    tone: 4
  },
  {
    char: "溅",
    spell: "jiàn",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "濺",
    sex: "",
    tone: 4
  },
  {
    char: "溉",
    spell: "gài",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄞˋ",
    tradition: "溉",
    sex: "",
    tone: 4
  },
  {
    char: "源",
    spell: "yuán",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "源",
    sex: "",
    tone: 2
  },
  {
    char: "溜",
    spell: "liū",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄡˋ",
    tradition: "溜",
    sex: "",
    tone: 1
  },
  {
    char: "溢",
    spell: "yì",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "溢",
    sex: "",
    tone: 4
  },
  {
    char: "溪",
    spell: "xī",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "溪",
    sex: "",
    tone: 1
  },
  {
    char: "溯",
    spell: "sù",
    stroke: "13",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "溯",
    sex: "",
    tone: 4
  },
  {
    char: "溶",
    spell: "róng",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "溶",
    sex: "",
    tone: 2
  },
  {
    char: "溺",
    spell: "nì",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄋㄧˋ",
    tradition: "溺",
    sex: "",
    tone: 4
  },
  {
    char: "滋",
    spell: "zī",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄗ",
    tradition: "滋",
    sex: "",
    tone: 1
  },
  {
    char: "滑",
    spell: "huá",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄚˊ",
    tradition: "滑",
    sex: "",
    tone: 2
  },
  {
    char: "滓",
    spell: "zǐ",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄗˇ",
    tradition: "滓",
    sex: "",
    tone: 3
  },
  {
    char: "滔",
    spell: "tāo",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄠ",
    tradition: "滔",
    sex: "",
    tone: 1
  },
  {
    char: "滚",
    spell: "gǔn",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄣˇ",
    tradition: "滚",
    sex: "",
    tone: 3
  },
  {
    char: "滞",
    spell: "zhì",
    stroke: "12",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "滯",
    sex: "",
    tone: 4
  },
  {
    char: "满",
    spell: "mǎn",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˇ",
    tradition: "滿",
    sex: "",
    tone: 3
  },
  {
    char: "滤",
    spell: "lǜ",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "",
    method: "-",
    mark: "ㄌㄩˋ",
    tradition: "濾",
    sex: "",
    tone: 4
  },
  {
    char: "滥",
    spell: "làn",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄢˋ",
    tradition: "濫",
    sex: "",
    tone: 4
  },
  {
    char: "滨",
    spell: "bīn",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄣ",
    tradition: "濱",
    sex: "",
    tone: 1
  },
  {
    char: "滩",
    spell: "tān",
    stroke: "13",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄢ",
    tradition: "灘",
    sex: "",
    tone: 1
  },
  {
    char: "滴",
    spell: "dī",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄧ",
    tradition: "滴",
    sex: "",
    tone: 1
  },
  {
    char: "漂",
    spell: "piāo",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄠˋ",
    tradition: "漂",
    sex: "",
    tone: 1
  },
  {
    char: "漆",
    spell: "qī",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧ",
    tradition: "漆",
    sex: "",
    tone: 1
  },
  {
    char: "漏",
    spell: "lòu",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄡˋ",
    tradition: "漏",
    sex: "",
    tone: 4
  },
  {
    char: "漓",
    spell: "lí",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "灕",
    sex: "",
    tone: 2
  },
  {
    char: "演",
    spell: "yǎn",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄢˇ",
    tradition: "演",
    sex: "",
    tone: 3
  },
  {
    char: "漠",
    spell: "mò",
    stroke: "13",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "漠",
    sex: "",
    tone: 4
  },
  {
    char: "漩",
    spell: "xuán",
    stroke: "14",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄢˊ",
    tradition: "漩",
    sex: "",
    tone: 2
  },
  {
    char: "漫",
    spell: "màn",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˋ",
    tradition: "漫",
    sex: "",
    tone: 4
  },
  {
    char: "漱",
    spell: "shù",
    stroke: "14",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "漱",
    sex: "",
    tone: 4
  },
  {
    char: "漾",
    spell: "yàng",
    stroke: "14",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄧㄤˋ",
    tradition: "漾",
    sex: "",
    tone: 4
  },
  {
    char: "潘",
    spell: "pān",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄢ",
    tradition: "潘",
    sex: "",
    tone: 1
  },
  {
    char: "潜",
    spell: "qián",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧㄢˊ",
    tradition: "潜",
    sex: "",
    tone: 2
  },
  {
    char: "潦",
    spell: "liáo",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄠˊ",
    tradition: "潦",
    sex: "",
    tone: 2
  },
  {
    char: "潭",
    spell: "tán",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "潭",
    sex: "",
    tone: 2
  },
  {
    char: "潮",
    spell: "cháo",
    stroke: "15",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄠˊ",
    tradition: "潮",
    sex: "",
    tone: 2
  },
  {
    char: "澄",
    spell: "chéng",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "澄",
    sex: "男",
    tone: 2
  },
  {
    char: "澈",
    spell: "chè",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄜˋ",
    tradition: "澈",
    sex: "",
    tone: 4
  },
  {
    char: "澎",
    spell: "péng",
    stroke: "15",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "澎",
    sex: "",
    tone: 2
  },
  {
    char: "澜",
    spell: "lán",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄢˊ",
    tradition: "瀾",
    sex: "女",
    tone: 2
  },
  {
    char: "澡",
    spell: "zǎo",
    stroke: "16",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄗㄠˇ",
    tradition: "澡",
    sex: "",
    tone: 3
  },
  {
    char: "澳",
    spell: "ào",
    stroke: "15",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄠˋ",
    tradition: "澳",
    sex: "",
    tone: 4
  },
  {
    char: "激",
    spell: "jī",
    stroke: "16",
    radical: "氵",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "激",
    sex: "",
    tone: 1
  },
  {
    char: "濒",
    spell: "bīn",
    stroke: "16",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄣ",
    tradition: "瀕",
    sex: "",
    tone: 1
  },
  {
    char: "瀑",
    spell: "bào",
    stroke: "18",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˋ",
    tradition: "瀑",
    sex: "",
    tone: 4
  },
  {
    char: "灌",
    spell: "guàn",
    stroke: "20",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄢˋ",
    tradition: "灌",
    sex: "",
    tone: 4
  },
  {
    char: "火",
    spell: "huǒ",
    stroke: "4",
    radical: "火",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄏㄨㄛˇ",
    tradition: "火",
    sex: "",
    tone: 3
  },
  {
    char: "灭",
    spell: "miè",
    stroke: "5",
    radical: "一",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄝˋ",
    tradition: "滅",
    sex: "",
    tone: 4
  },
  {
    char: "灯",
    spell: "dēng",
    stroke: "6",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄥ",
    tradition: "燈",
    sex: "",
    tone: 1
  },
  {
    char: "灰",
    spell: "huī",
    stroke: "6",
    radical: "火",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄏㄨㄟ",
    tradition: "灰",
    sex: "",
    tone: 1
  },
  {
    char: "灵",
    spell: "líng",
    stroke: "7",
    radical: "彐",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "靈",
    sex: "女",
    tone: 2
  },
  {
    char: "灶",
    spell: "zào",
    stroke: "7",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄗㄠˋ",
    tradition: "竈",
    sex: "",
    tone: 4
  },
  {
    char: "灸",
    spell: "jiǔ",
    stroke: "7",
    radical: "火",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄡˇ",
    tradition: "灸",
    sex: "",
    tone: 3
  },
  {
    char: "灼",
    spell: "zhuó",
    stroke: "7",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄛˊ",
    tradition: "灼",
    sex: "",
    tone: 2
  },
  {
    char: "灾",
    spell: "zāi",
    stroke: "7",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄗㄞ",
    tradition: "灾",
    sex: "",
    tone: 1
  },
  {
    char: "灿",
    spell: "càn",
    stroke: "7",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄢˋ",
    tradition: "燦",
    sex: "",
    tone: 4
  },
  {
    char: "炉",
    spell: "lú",
    stroke: "8",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˊ",
    tradition: "爐",
    sex: "",
    tone: 2
  },
  {
    char: "炊",
    spell: "chuī",
    stroke: "8",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄨㄟ",
    tradition: "炊",
    sex: "",
    tone: 1
  },
  {
    char: "炎",
    spell: "yán",
    stroke: "8",
    radical: "火",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄧㄢˊ",
    tradition: "炎",
    sex: "男",
    tone: 2
  },
  {
    char: "炒",
    spell: "chǎo",
    stroke: "8",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄠˇ",
    tradition: "炒",
    sex: "",
    tone: 3
  },
  {
    char: "炕",
    spell: "kàng",
    stroke: "8",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄤ",
    tradition: "炕",
    sex: "",
    tone: 4
  },
  {
    char: "炫",
    spell: "xuàn",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄩㄢˋ",
    tradition: "炫",
    sex: "",
    tone: 4
  },
  {
    char: "炬",
    spell: "jù",
    stroke: "8",
    radical: "火",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "炬",
    sex: "",
    tone: 4
  },
  {
    char: "炭",
    spell: "tàn",
    stroke: "9",
    radical: "山",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˋ",
    tradition: "炭",
    sex: "",
    tone: 4
  },
  {
    char: "炮",
    spell: "pào",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "",
    mark: "",
    tradition: "炮",
    sex: "",
    tone: 4
  },
  {
    char: "炸",
    spell: "zhà",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "",
    mark: "",
    tradition: "炸",
    sex: "",
    tone: 4
  },
  {
    char: "点",
    spell: "diǎn",
    stroke: "9",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄧㄢˇ",
    tradition: "點",
    sex: "",
    tone: 3
  },
  {
    char: "炼",
    spell: "liàn",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄢˋ",
    tradition: "煉",
    sex: "",
    tone: 4
  },
  {
    char: "烁",
    spell: "shuò",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄨㄛˋ",
    tradition: "爍",
    sex: "",
    tone: 4
  },
  {
    char: "烂",
    spell: "làn",
    stroke: "9",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄢˋ",
    tradition: "爛",
    sex: "",
    tone: 4
  },
  {
    char: "烈",
    spell: "liè",
    stroke: "10",
    radical: "灬",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄝˋ",
    tradition: "烈",
    sex: "",
    tone: 4
  },
  {
    char: "烘",
    spell: "hōng",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄥ",
    tradition: "烘",
    sex: "",
    tone: 1
  },
  {
    char: "烙",
    spell: "lào",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄠˋ",
    tradition: "烙",
    sex: "",
    tone: 4
  },
  {
    char: "烛",
    spell: "zhú",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨˊ",
    tradition: "燭",
    sex: "",
    tone: 2
  },
  {
    char: "烟",
    spell: "yān",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄢ",
    tradition: "烟",
    sex: "女",
    tone: 1
  },
  {
    char: "烤",
    spell: "kǎo",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄎㄠˇ",
    tradition: "烤",
    sex: "",
    tone: 3
  },
  {
    char: "烦",
    spell: "fán",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄈㄢˊ",
    tradition: "煩",
    sex: "",
    tone: 2
  },
  {
    char: "烧",
    spell: "shāo",
    stroke: "10",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄠ",
    tradition: "燒",
    sex: "",
    tone: 1
  },
  {
    char: "烫",
    spell: "tàng",
    stroke: "10",
    radical: "火",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄊㄤˋ",
    tradition: "燙",
    sex: "",
    tone: 4
  },
  {
    char: "热",
    spell: "rè",
    stroke: "10",
    radical: "灬",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄖㄜˋ",
    tradition: "熱",
    sex: "",
    tone: 4
  },
  {
    char: "烹",
    spell: "pēng",
    stroke: "11",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄥ",
    tradition: "烹",
    sex: "",
    tone: 1
  },
  {
    char: "焊",
    spell: "hàn",
    stroke: "11",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "焊",
    sex: "",
    tone: 4
  },
  {
    char: "焕",
    spell: "huàn",
    stroke: "11",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "焕",
    sex: "",
    tone: 4
  },
  {
    char: "焙",
    spell: "bèi",
    stroke: "12",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "焙",
    sex: "",
    tone: 4
  },
  {
    char: "焚",
    spell: "fén",
    stroke: "12",
    radical: "火",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄈㄣˊ",
    tradition: "焚",
    sex: "",
    tone: 2
  },
  {
    char: "焦",
    spell: "jiāo",
    stroke: "12",
    radical: "隹",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧㄠ",
    tradition: "焦",
    sex: "",
    tone: 1
  },
  {
    char: "焰",
    spell: "yàn",
    stroke: "12",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "焰",
    sex: "",
    tone: 4
  },
  {
    char: "然",
    spell: "rán",
    stroke: "12",
    radical: "灬",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄢˊ",
    tradition: "然",
    sex: "",
    tone: 2
  },
  {
    char: "煌",
    spell: "huáng",
    stroke: "13",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄤˊ",
    tradition: "煌",
    sex: "",
    tone: 2
  },
  {
    char: "煎",
    spell: "jiān",
    stroke: "13",
    radical: "灬",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄢ",
    tradition: "煎",
    sex: "",
    tone: 1
  },
  {
    char: "煞",
    spell: "shà",
    stroke: "13",
    radical: "灬",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄚˋ",
    tradition: "煞",
    sex: "",
    tone: 4
  },
  {
    char: "煤",
    spell: "méi",
    stroke: "13",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "煤",
    sex: "",
    tone: 2
  },
  {
    char: "照",
    spell: "zhào",
    stroke: "13",
    radical: "灬",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠˋ",
    tradition: "照",
    sex: "",
    tone: 4
  },
  {
    char: "煮",
    spell: "zhǔ",
    stroke: "12",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄨˇ",
    tradition: "煮",
    sex: "",
    tone: 3
  },
  {
    char: "熄",
    spell: "xī",
    stroke: "14",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "熄",
    sex: "",
    tone: 1
  },
  {
    char: "熊",
    spell: "xióng",
    stroke: "14",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄥˊ",
    tradition: "熊",
    sex: "",
    tone: 2
  },
  {
    char: "熏",
    spell: "xūn",
    stroke: "14",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄩㄣˋ",
    tradition: "熏",
    sex: "",
    tone: 1
  },
  {
    char: "熔",
    spell: "róng",
    stroke: "14",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "熔",
    sex: "",
    tone: 2
  },
  {
    char: "熙",
    spell: "xī",
    stroke: "14",
    radical: "灬",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "熙",
    sex: "",
    tone: 1
  },
  {
    char: "熟",
    spell: "shú",
    stroke: "15",
    radical: "灬",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄡˊ",
    tradition: "熟",
    sex: "",
    tone: 2
  },
  {
    char: "熬",
    spell: "áo",
    stroke: "14",
    radical: "灬",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄠˊ",
    tradition: "熬",
    sex: "",
    tone: 2
  },
  {
    char: "燃",
    spell: "rán",
    stroke: "16",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄖㄢˊ",
    tradition: "燃",
    sex: "",
    tone: 2
  },
  {
    char: "燎",
    spell: "liáo",
    stroke: "16",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "燎",
    sex: "",
    tone: 2
  },
  {
    char: "燕",
    spell: "yàn",
    stroke: "16",
    radical: "灬",
    struct: "上中下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄢˋ",
    tradition: "燕",
    sex: "女",
    tone: 4
  },
  {
    char: "燥",
    spell: "zào",
    stroke: "17",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄙㄠˋ",
    tradition: "燥",
    sex: "",
    tone: 4
  },
  {
    char: "爆",
    spell: "bào",
    stroke: "19",
    radical: "火",
    struct: "左右结构",
    five: "火",
    method: "",
    mark: "",
    tradition: "爆",
    sex: "",
    tone: 4
  },
  {
    char: "爪",
    spell: "zhǎo",
    stroke: "4",
    radical: "爪",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄓㄠˇ",
    tradition: "爪",
    sex: "",
    tone: 3
  },
  {
    char: "爬",
    spell: "pá",
    stroke: "8",
    radical: "爪",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄚˊ",
    tradition: "爬",
    sex: "",
    tone: 2
  },
  {
    char: "爱",
    spell: "ài",
    stroke: "10",
    radical: "爫",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄞˋ",
    tradition: "愛",
    sex: "女",
    tone: 4
  },
  {
    char: "爵",
    spell: "jué",
    stroke: "17",
    radical: "爫",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄩㄝˊ",
    tradition: "爵",
    sex: "",
    tone: 2
  },
  {
    char: "父",
    spell: "fù",
    stroke: "4",
    radical: "父",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄨˋ",
    tradition: "父",
    sex: "",
    tone: 4
  },
  {
    char: "爷",
    spell: "yé",
    stroke: "6",
    radical: "父",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄝˊ",
    tradition: "爺",
    sex: "",
    tone: 2
  },
  {
    char: "爸",
    spell: "bà",
    stroke: "8",
    radical: "父",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "爸",
    sex: "",
    tone: 4
  },
  {
    char: "爹",
    spell: "diē",
    stroke: "10",
    radical: "父",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄝ",
    tradition: "爹",
    sex: "",
    tone: 1
  },
  {
    char: "爽",
    spell: "shuǎng",
    stroke: "11",
    radical: "大",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄤ",
    tradition: "爽",
    sex: "女",
    tone: 3
  },
  {
    char: "片",
    spell: "piàn",
    stroke: "4",
    radical: "片",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄆㄧㄢˋ",
    tradition: "片",
    sex: "",
    tone: 4
  },
  {
    char: "版",
    spell: "bǎn",
    stroke: "8",
    radical: "片",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˇ",
    tradition: "版",
    sex: "",
    tone: 3
  },
  {
    char: "牌",
    spell: "pái",
    stroke: "12",
    radical: "片",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞˊ",
    tradition: "牌",
    sex: "",
    tone: 2
  },
  {
    char: "牍",
    spell: "dú",
    stroke: "12",
    radical: "片",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˊ",
    tradition: "牘",
    sex: "",
    tone: 2
  },
  {
    char: "牙",
    spell: "yá",
    stroke: "4",
    radical: "牙",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄧㄚˊ",
    tradition: "牙",
    sex: "",
    tone: 2
  },
  {
    char: "牛",
    spell: "niú",
    stroke: "4",
    radical: "牛",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄋㄧㄡˊ",
    tradition: "牛",
    sex: "",
    tone: 2
  },
  {
    char: "牡",
    spell: "mǔ",
    stroke: "7",
    radical: "牜",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄇㄨˇ",
    tradition: "牡",
    sex: "",
    tone: 3
  },
  {
    char: "牢",
    spell: "láo",
    stroke: "7",
    radical: "宀",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄠˊ",
    tradition: "牢",
    sex: "",
    tone: 2
  },
  {
    char: "牧",
    spell: "mù",
    stroke: "8",
    radical: "牜",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄨˋ",
    tradition: "牧",
    sex: "",
    tone: 4
  },
  {
    char: "物",
    spell: "wù",
    stroke: "8",
    radical: "牜",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "物",
    sex: "",
    tone: 4
  },
  {
    char: "牲",
    spell: "shēng",
    stroke: "9",
    radical: "牜",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥ",
    tradition: "牲",
    sex: "",
    tone: 1
  },
  {
    char: "牵",
    spell: "qiān",
    stroke: "9",
    radical: "大",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "牽",
    sex: "",
    tone: 1
  },
  {
    char: "特",
    spell: "tè",
    stroke: "10",
    radical: "牜",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄜˋ",
    tradition: "特",
    sex: "",
    tone: 4
  },
  {
    char: "牺",
    spell: "xī",
    stroke: "10",
    radical: "牜",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "犧",
    sex: "",
    tone: 1
  },
  {
    char: "犀",
    spell: "xī",
    stroke: "12",
    radical: "尸",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧ",
    tradition: "犀",
    sex: "",
    tone: 1
  },
  {
    char: "犁",
    spell: "lí",
    stroke: "11",
    radical: "牛",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "犁",
    sex: "",
    tone: 2
  },
  {
    char: "犬",
    spell: "quǎn",
    stroke: "4",
    radical: "犬",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩㄢˇ",
    tradition: "犬",
    sex: "",
    tone: 3
  },
  {
    char: "犯",
    spell: "fàn",
    stroke: "5",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˋ",
    tradition: "犯",
    sex: "",
    tone: 4
  },
  {
    char: "状",
    spell: "zhuàng",
    stroke: "7",
    radical: "丬",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄨㄤˋ",
    tradition: "狀",
    sex: "",
    tone: 4
  },
  {
    char: "犹",
    spell: "yóu",
    stroke: "7",
    radical: "犭",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡˊ",
    tradition: "猶",
    sex: "",
    tone: 2
  },
  {
    char: "狂",
    spell: "kuáng",
    stroke: "7",
    radical: "犭",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄤˊ",
    tradition: "狂",
    sex: "",
    tone: 2
  },
  {
    char: "狈",
    spell: "bèi",
    stroke: "7",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "狽",
    sex: "",
    tone: 4
  },
  {
    char: "狐",
    spell: "hú",
    stroke: "8",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "狐",
    sex: "",
    tone: 2
  },
  {
    char: "狗",
    spell: "gǒu",
    stroke: "8",
    radical: "犭",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄡˇ",
    tradition: "狗",
    sex: "",
    tone: 3
  },
  {
    char: "狞",
    spell: "níng",
    stroke: "8",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄥˊ",
    tradition: "獰",
    sex: "",
    tone: 2
  },
  {
    char: "狠",
    spell: "hěn",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄣˇ",
    tradition: "狠",
    sex: "",
    tone: 3
  },
  {
    char: "狡",
    spell: "jiǎo",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "狡",
    sex: "",
    tone: 3
  },
  {
    char: "独",
    spell: "dú",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˊ",
    tradition: "獨",
    sex: "",
    tone: 2
  },
  {
    char: "狭",
    spell: "xiá",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "狹",
    sex: "",
    tone: 2
  },
  {
    char: "狮",
    spell: "shī",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕ",
    tradition: "狮",
    sex: "",
    tone: 1
  },
  {
    char: "狰",
    spell: "zhēng",
    stroke: "9",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥ",
    tradition: "狰",
    sex: "",
    tone: 1
  },
  {
    char: "狱",
    spell: "yù",
    stroke: "9",
    radical: "犭",
    struct: "左中右结构",
    five: "木",
    method: "会意",
    mark: "ㄩˋ",
    tradition: "獄",
    sex: "",
    tone: 4
  },
  {
    char: "狸",
    spell: "lí",
    stroke: "10",
    radical: "犭",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "狸",
    sex: "",
    tone: 2
  },
  {
    char: "狼",
    spell: "láng",
    stroke: "10",
    radical: "犭",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄤˊ",
    tradition: "狼",
    sex: "",
    tone: 2
  },
  {
    char: "猎",
    spell: "liè",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄝˋ",
    tradition: "獵",
    sex: "",
    tone: 4
  },
  {
    char: "猖",
    spell: "chāng",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤ",
    tradition: "猖",
    sex: "",
    tone: 1
  },
  {
    char: "猛",
    spell: "měng",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄥˇ",
    tradition: "猛",
    sex: "",
    tone: 3
  },
  {
    char: "猜",
    spell: "cāi",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞ",
    tradition: "猜",
    sex: "",
    tone: 1
  },
  {
    char: "猩",
    spell: "xīng",
    stroke: "12",
    radical: "犭",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄥ",
    tradition: "猩",
    sex: "",
    tone: 1
  },
  {
    char: "猪",
    spell: "zhū",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨ",
    tradition: "猪",
    sex: "",
    tone: 1
  },
  {
    char: "猫",
    spell: "māo",
    stroke: "11",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄠˊ",
    tradition: "猫",
    sex: "",
    tone: 1
  },
  {
    char: "猬",
    spell: "wèi",
    stroke: "12",
    radical: "犭",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "猬",
    sex: "",
    tone: 4
  },
  {
    char: "献",
    spell: "xiàn",
    stroke: "13",
    radical: "犬",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄒㄧㄢˋ",
    tradition: "獻",
    sex: "",
    tone: 4
  },
  {
    char: "猴",
    spell: "hóu",
    stroke: "12",
    radical: "犭",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄡˊ",
    tradition: "猴",
    sex: "",
    tone: 2
  },
  {
    char: "猾",
    spell: "huá",
    stroke: "12",
    radical: "犭",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄚˊ",
    tradition: "猾",
    sex: "",
    tone: 2
  },
  {
    char: "猿",
    spell: "yuán",
    stroke: "13",
    radical: "犭",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "猿",
    sex: "",
    tone: 2
  },
  {
    char: "玄",
    spell: "xuán",
    stroke: "5",
    radical: "亠",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄒㄩㄢˊ",
    tradition: "玄",
    sex: "",
    tone: 2
  },
  {
    char: "率",
    spell: "lǜ",
    stroke: "11",
    radical: "亠",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ˋ",
    tradition: "率",
    sex: "",
    tone: 4
  },
  {
    char: "玉",
    spell: "yù",
    stroke: "5",
    radical: "玉",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄩˋ",
    tradition: "玉",
    sex: "男",
    tone: 4
  },
  {
    char: "王",
    spell: "wáng",
    stroke: "4",
    radical: "王",
    struct: "独体结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄤˊ",
    tradition: "王",
    sex: "",
    tone: 2
  },
  {
    char: "玖",
    spell: "jiǔ",
    stroke: "7",
    radical: "王",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡˇ",
    tradition: "玖",
    sex: "",
    tone: 3
  },
  {
    char: "玛",
    spell: "mǎ",
    stroke: "7",
    radical: "王",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚˇ",
    tradition: "瑪",
    sex: "",
    tone: 3
  },
  {
    char: "玩",
    spell: "wán",
    stroke: "8",
    radical: "王",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄢˊ",
    tradition: "玩",
    sex: "",
    tone: 2
  },
  {
    char: "玫",
    spell: "méi",
    stroke: "8",
    radical: "王",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "玫",
    sex: "",
    tone: 2
  },
  {
    char: "环",
    spell: "huán",
    stroke: "8",
    radical: "王",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄏㄨㄢˊ",
    tradition: "環",
    sex: "女",
    tone: 2
  },
  {
    char: "现",
    spell: "xiàn",
    stroke: "8",
    radical: "王",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "現",
    sex: "",
    tone: 4
  },
  {
    char: "玲",
    spell: "líng",
    stroke: "9",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "玲",
    sex: "女",
    tone: 2
  },
  {
    char: "玷",
    spell: "diàn",
    stroke: "9",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "玷",
    sex: "",
    tone: 4
  },
  {
    char: "玻",
    spell: "bō",
    stroke: "9",
    radical: "王",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛ",
    tradition: "玻",
    sex: "",
    tone: 1
  },
  {
    char: "珊",
    spell: "shān",
    stroke: "9",
    radical: "王",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢ",
    tradition: "珊",
    sex: "女",
    tone: 1
  },
  {
    char: "珍",
    spell: "zhēn",
    stroke: "9",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄣ",
    tradition: "珍",
    sex: "女",
    tone: 1
  },
  {
    char: "珠",
    spell: "zhū",
    stroke: "10",
    radical: "王",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨ",
    tradition: "珠",
    sex: "女",
    tone: 1
  },
  {
    char: "班",
    spell: "bān",
    stroke: "10",
    radical: "王",
    struct: "左中右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄢ",
    tradition: "班",
    sex: "",
    tone: 1
  },
  {
    char: "球",
    spell: "qiú",
    stroke: "11",
    radical: "王",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄡˊ",
    tradition: "球",
    sex: "",
    tone: 2
  },
  {
    char: "琅",
    spell: "láng",
    stroke: "11",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄤˊ",
    tradition: "琅",
    sex: "",
    tone: 2
  },
  {
    char: "理",
    spell: "lǐ",
    stroke: "11",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˇ",
    tradition: "理",
    sex: "",
    tone: 3
  },
  {
    char: "琉",
    spell: "liú",
    stroke: "11",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "琉",
    sex: "",
    tone: 2
  },
  {
    char: "琐",
    spell: "suǒ",
    stroke: "11",
    radical: "王",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄛˇ",
    tradition: "瑣",
    sex: "",
    tone: 3
  },
  {
    char: "琢",
    spell: "zhuó",
    stroke: "12",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗㄨㄛˊ",
    tradition: "琢",
    sex: "",
    tone: 2
  },
  {
    char: "琳",
    spell: "lín",
    stroke: "12",
    radical: "王",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄣˊ",
    tradition: "琳",
    sex: "女",
    tone: 2
  },
  {
    char: "琴",
    spell: "qín",
    stroke: "12",
    radical: "王",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧㄣˊ",
    tradition: "琴",
    sex: "女",
    tone: 2
  },
  {
    char: "琼",
    spell: "qióng",
    stroke: "12",
    radical: "王",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄥˊ",
    tradition: "瓊",
    sex: "女",
    tone: 2
  },
  {
    char: "瑞",
    spell: "ruì",
    stroke: "13",
    radical: "王",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨㄟˋ",
    tradition: "瑞",
    sex: "女",
    tone: 4
  },
  {
    char: "瑟",
    spell: "sè",
    stroke: "13",
    radical: "王",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄙㄜˋ",
    tradition: "瑟",
    sex: "",
    tone: 4
  },
  {
    char: "瑰",
    spell: "guī",
    stroke: "13",
    radical: "王",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟ",
    tradition: "瑰",
    sex: "",
    tone: 1
  },
  {
    char: "璃",
    spell: "lí",
    stroke: "14",
    radical: "王",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "璃",
    sex: "",
    tone: 2
  },
  {
    char: "璧",
    spell: "bì",
    stroke: "18",
    radical: "玉",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "璧",
    sex: "女",
    tone: 4
  },
  {
    char: "瓜",
    spell: "guā",
    stroke: "5",
    radical: "瓜",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄚ",
    tradition: "瓜",
    sex: "",
    tone: 1
  },
  {
    char: "瓢",
    spell: "piáo",
    stroke: "16",
    radical: "瓜",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄠˊ",
    tradition: "瓢",
    sex: "",
    tone: 2
  },
  {
    char: "瓣",
    spell: "bàn",
    stroke: "19",
    radical: "辛",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "瓣",
    sex: "",
    tone: 4
  },
  {
    char: "瓤",
    spell: "ráng",
    stroke: "22",
    radical: "瓜",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄖㄤˊ",
    tradition: "瓤",
    sex: "",
    tone: 2
  },
  {
    char: "瓦",
    spell: "wǎ",
    stroke: "4",
    radical: "瓦",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄨㄚˋ",
    tradition: "瓦",
    sex: "",
    tone: 3
  },
  {
    char: "瓮",
    spell: "wèng",
    stroke: "8",
    radical: "瓦",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄥˋ",
    tradition: "瓮",
    sex: "",
    tone: 4
  },
  {
    char: "瓶",
    spell: "píng",
    stroke: "10",
    radical: "瓦",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄥˊ",
    tradition: "瓶",
    sex: "",
    tone: 2
  },
  {
    char: "瓷",
    spell: "cí",
    stroke: "10",
    radical: "瓦",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "瓷",
    sex: "",
    tone: 2
  },
  {
    char: "甘",
    spell: "gān",
    stroke: "5",
    radical: "甘",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄢ",
    tradition: "甘",
    sex: "",
    tone: 1
  },
  {
    char: "甚",
    spell: "shèn",
    stroke: "9",
    radical: "一",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄣˊ",
    tradition: "甚",
    sex: "",
    tone: 4
  },
  {
    char: "甜",
    spell: "tián",
    stroke: "11",
    radical: "舌",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄧㄢˊ",
    tradition: "甜",
    sex: "",
    tone: 2
  },
  {
    char: "生",
    spell: "shēng",
    stroke: "5",
    radical: "生",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄥ",
    tradition: "生",
    sex: "男",
    tone: 1
  },
  {
    char: "甥",
    spell: "shēng",
    stroke: "12",
    radical: "生",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥ",
    tradition: "甥",
    sex: "",
    tone: 1
  },
  {
    char: "用",
    spell: "yòng",
    stroke: "5",
    radical: "冂",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄩㄥˋ",
    tradition: "用",
    sex: "",
    tone: 4
  },
  {
    char: "甩",
    spell: "shuǎi",
    stroke: "5",
    radical: "用",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄞˇ",
    tradition: "甩",
    sex: "",
    tone: 3
  },
  {
    char: "甫",
    spell: "fǔ",
    stroke: "7",
    radical: "一",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄨˇ",
    tradition: "甫",
    sex: "",
    tone: 3
  },
  {
    char: "田",
    spell: "tián",
    stroke: "5",
    radical: "田",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄊㄧㄢˊ",
    tradition: "田",
    sex: "",
    tone: 2
  },
  {
    char: "由",
    spell: "yóu",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧㄡˊ",
    tradition: "由",
    sex: "",
    tone: 2
  },
  {
    char: "甲",
    spell: "jiǎ",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄚˊ",
    tradition: "甲",
    sex: "",
    tone: 3
  },
  {
    char: "申",
    spell: "shēn",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄣ",
    tradition: "申",
    sex: "",
    tone: 1
  },
  {
    char: "电",
    spell: "diàn",
    stroke: "5",
    radical: "丨",
    struct: "独体结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "電",
    sex: "",
    tone: 4
  },
  {
    char: "男",
    spell: "nán",
    stroke: "7",
    radical: "田",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄢˊ",
    tradition: "男",
    sex: "",
    tone: 2
  },
  {
    char: "甸",
    spell: "diàn",
    stroke: "7",
    radical: "勹",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄢˋ",
    tradition: "甸",
    sex: "",
    tone: 4
  },
  {
    char: "画",
    spell: "huà",
    stroke: "8",
    radical: "一",
    struct: "半包围结构",
    five: "土",
    method: "-",
    mark: "ㄏㄨㄚˋ",
    tradition: "畫",
    sex: "",
    tone: 4
  },
  {
    char: "畅",
    spell: "chàng",
    stroke: "8",
    radical: "丨",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄤˋ",
    tradition: "暢",
    sex: "",
    tone: 4
  },
  {
    char: "界",
    spell: "jiè",
    stroke: "9",
    radical: "田",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝˋ",
    tradition: "界",
    sex: "",
    tone: 4
  },
  {
    char: "畏",
    spell: "wèi",
    stroke: "9",
    radical: "田",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄨㄟˋ",
    tradition: "畏",
    sex: "",
    tone: 4
  },
  {
    char: "畔",
    spell: "pàn",
    stroke: "10",
    radical: "田",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄢˋ",
    tradition: "畔",
    sex: "",
    tone: 4
  },
  {
    char: "留",
    spell: "liú",
    stroke: "10",
    radical: "田",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "留",
    sex: "",
    tone: 2
  },
  {
    char: "畜",
    spell: "chù",
    stroke: "10",
    radical: "田",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄔㄨˋ",
    tradition: "畜",
    sex: "",
    tone: 4
  },
  {
    char: "略",
    spell: "lüè",
    stroke: "11",
    radical: "田",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩㄝˋ",
    tradition: "略",
    sex: "",
    tone: 4
  },
  {
    char: "畦",
    spell: "qí",
    stroke: "11",
    radical: "田",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "畦",
    sex: "",
    tone: 2
  },
  {
    char: "番",
    spell: "fān",
    stroke: "12",
    radical: "釆",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄈㄢ",
    tradition: "番",
    sex: "",
    tone: 1
  },
  {
    char: "畴",
    spell: "chóu",
    stroke: "12",
    radical: "田",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "疇",
    sex: "",
    tone: 2
  },
  {
    char: "畸",
    spell: "jī",
    stroke: "13",
    radical: "田",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "畸",
    sex: "",
    tone: 1
  },
  {
    char: "疆",
    spell: "jiāng",
    stroke: "19",
    radical: "弓",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "疆",
    sex: "",
    tone: 1
  },
  {
    char: "疏",
    spell: "shū",
    stroke: "12",
    radical: "⺪",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "疏",
    sex: "",
    tone: 1
  },
  {
    char: "疑",
    spell: "yí",
    stroke: "14",
    radical: "匕",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˊ",
    tradition: "疑",
    sex: "",
    tone: 2
  },
  {
    char: "疗",
    spell: "liáo",
    stroke: "7",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "療",
    sex: "",
    tone: 2
  },
  {
    char: "疙",
    spell: "gē",
    stroke: "8",
    radical: "疒",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜ",
    tradition: "疙",
    sex: "",
    tone: 1
  },
  {
    char: "疚",
    spell: "jiù",
    stroke: "8",
    radical: "疒",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡˋ",
    tradition: "疚",
    sex: "",
    tone: 4
  },
  {
    char: "疟",
    spell: "nüè",
    stroke: "8",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ˋ",
    tradition: "瘧",
    sex: "",
    tone: 4
  },
  {
    char: "疤",
    spell: "bā",
    stroke: "9",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚ",
    tradition: "疤",
    sex: "",
    tone: 1
  },
  {
    char: "疫",
    spell: "yì",
    stroke: "9",
    radical: "疒",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "疫",
    sex: "",
    tone: 4
  },
  {
    char: "疮",
    spell: "chuāng",
    stroke: "9",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄤ",
    tradition: "瘡",
    sex: "",
    tone: 1
  },
  {
    char: "疯",
    spell: "fēng",
    stroke: "9",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥ",
    tradition: "瘋",
    sex: "",
    tone: 1
  },
  {
    char: "疲",
    spell: "pí",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧˊ",
    tradition: "疲",
    sex: "",
    tone: 2
  },
  {
    char: "疹",
    spell: "zhěn",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄣˇ",
    tradition: "疹",
    sex: "",
    tone: 3
  },
  {
    char: "疼",
    spell: "téng",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄥˊ",
    tradition: "疼",
    sex: "",
    tone: 2
  },
  {
    char: "疾",
    spell: "jí",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "疾",
    sex: "",
    tone: 2
  },
  {
    char: "病",
    spell: "bìng",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄥˋ",
    tradition: "病",
    sex: "",
    tone: 4
  },
  {
    char: "症",
    spell: "zhèng",
    stroke: "10",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "癥",
    sex: "",
    tone: 4
  },
  {
    char: "痊",
    spell: "quán",
    stroke: "11",
    radical: "疒",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄢˊ",
    tradition: "痊",
    sex: "",
    tone: 2
  },
  {
    char: "痒",
    spell: "yǎng",
    stroke: "11",
    radical: "疒",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄤˇ",
    tradition: "癢",
    sex: "",
    tone: 3
  },
  {
    char: "痕",
    spell: "hén",
    stroke: "11",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄣˊ",
    tradition: "痕",
    sex: "",
    tone: 2
  },
  {
    char: "痘",
    spell: "dòu",
    stroke: "12",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˋ",
    tradition: "痘",
    sex: "",
    tone: 4
  },
  {
    char: "痛",
    spell: "tòng",
    stroke: "12",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄥˋ",
    tradition: "痛",
    sex: "",
    tone: 4
  },
  {
    char: "痢",
    spell: "lì",
    stroke: "12",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "痢",
    sex: "",
    tone: 4
  },
  {
    char: "痪",
    spell: "huàn",
    stroke: "12",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄢˋ",
    tradition: "痪",
    sex: "",
    tone: 4
  },
  {
    char: "痰",
    spell: "tán",
    stroke: "13",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "痰",
    sex: "",
    tone: 2
  },
  {
    char: "痴",
    spell: "chī",
    stroke: "13",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄔ",
    tradition: "痴",
    sex: "",
    tone: 1
  },
  {
    char: "痹",
    spell: "bì",
    stroke: "13",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "痹",
    sex: "",
    tone: 4
  },
  {
    char: "瘟",
    spell: "wēn",
    stroke: "14",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄣ",
    tradition: "瘟",
    sex: "",
    tone: 1
  },
  {
    char: "瘤",
    spell: "liú",
    stroke: "15",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "瘤",
    sex: "",
    tone: 2
  },
  {
    char: "瘦",
    spell: "shòu",
    stroke: "14",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄡˋ",
    tradition: "瘦",
    sex: "",
    tone: 4
  },
  {
    char: "瘩",
    spell: "da",
    stroke: "14",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄚˊ",
    tradition: "瘩",
    sex: "",
    tone: 0
  },
  {
    char: "瘪",
    spell: "biě",
    stroke: "15",
    radical: "疒",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄝˇ",
    tradition: "癟",
    sex: "",
    tone: 3
  },
  {
    char: "瘫",
    spell: "tān",
    stroke: "15",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢ",
    tradition: "癱",
    sex: "",
    tone: 1
  },
  {
    char: "瘸",
    spell: "qué",
    stroke: "16",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄩㄝˊ",
    tradition: "瘸",
    sex: "",
    tone: 2
  },
  {
    char: "瘾",
    spell: "yǐn",
    stroke: "16",
    radical: "疒",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄣˇ",
    tradition: "癮",
    sex: "",
    tone: 3
  },
  {
    char: "癌",
    spell: "ái",
    stroke: "17",
    radical: "疒",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄞˊ",
    tradition: "癌",
    sex: "",
    tone: 2
  },
  {
    char: "癞",
    spell: "lài",
    stroke: "18",
    radical: "疒",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˋ",
    tradition: "癩",
    sex: "",
    tone: 4
  },
  {
    char: "癣",
    spell: "xuǎn",
    stroke: "19",
    radical: "疒",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄢˇ",
    tradition: "癬",
    sex: "",
    tone: 3
  },
  {
    char: "登",
    spell: "dēng",
    stroke: "12",
    radical: "癶",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄥ",
    tradition: "登",
    sex: "",
    tone: 1
  },
  {
    char: "白",
    spell: "bái",
    stroke: "5",
    radical: "白",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄞˊ",
    tradition: "白",
    sex: "",
    tone: 2
  },
  {
    char: "百",
    spell: "bǎi",
    stroke: "6",
    radical: "一",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄞˇ",
    tradition: "百",
    sex: "",
    tone: 3
  },
  {
    char: "皂",
    spell: "zào",
    stroke: "7",
    radical: "白",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄠˋ",
    tradition: "皂",
    sex: "",
    tone: 4
  },
  {
    char: "的",
    spell: "de",
    stroke: "8",
    radical: "白",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "的",
    sex: "",
    tone: 0
  },
  {
    char: "皆",
    spell: "jiē",
    stroke: "9",
    radical: "比",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄝ",
    tradition: "皆",
    sex: "",
    tone: 1
  },
  {
    char: "皇",
    spell: "huáng",
    stroke: "9",
    radical: "白",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨㄤˊ",
    tradition: "皇",
    sex: "",
    tone: 2
  },
  {
    char: "皮",
    spell: "pí",
    stroke: "5",
    radical: "皮",
    struct: "独体结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧˊ",
    tradition: "皮",
    sex: "",
    tone: 2
  },
  {
    char: "皱",
    spell: "zhòu",
    stroke: "10",
    radical: "皮",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄡˋ",
    tradition: "皺",
    sex: "",
    tone: 4
  },
  {
    char: "皿",
    spell: "mǐn",
    stroke: "5",
    radical: "皿",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧㄣˇ",
    tradition: "皿",
    sex: "",
    tone: 3
  },
  {
    char: "盅",
    spell: "zhōng",
    stroke: "9",
    radical: "皿",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄥ",
    tradition: "盅",
    sex: "",
    tone: 1
  },
  {
    char: "盆",
    spell: "pén",
    stroke: "9",
    radical: "八",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄣˊ",
    tradition: "盆",
    sex: "",
    tone: 2
  },
  {
    char: "盈",
    spell: "yíng",
    stroke: "9",
    radical: "皿",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄧㄥˊ",
    tradition: "盈",
    sex: "",
    tone: 2
  },
  {
    char: "益",
    spell: "yì",
    stroke: "10",
    radical: "皿",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "益",
    sex: "",
    tone: 4
  },
  {
    char: "盏",
    spell: "zhǎn",
    stroke: "10",
    radical: "皿",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄢˇ",
    tradition: "盞",
    sex: "",
    tone: 3
  },
  {
    char: "盐",
    spell: "yán",
    stroke: "10",
    radical: "皿",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "鹽",
    sex: "",
    tone: 2
  },
  {
    char: "监",
    spell: "jiān",
    stroke: "10",
    radical: "皿",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "監",
    sex: "",
    tone: 1
  },
  {
    char: "盒",
    spell: "hé",
    stroke: "11",
    radical: "人",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "盒",
    sex: "",
    tone: 2
  },
  {
    char: "盔",
    spell: "kuī",
    stroke: "11",
    radical: "皿",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟ",
    tradition: "盔",
    sex: "",
    tone: 1
  },
  {
    char: "盖",
    spell: "gài",
    stroke: "11",
    radical: "⺷",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄞˋ",
    tradition: "蓋",
    sex: "",
    tone: 4
  },
  {
    char: "盗",
    spell: "dào",
    stroke: "11",
    radical: "皿",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄠˋ",
    tradition: "盗",
    sex: "",
    tone: 4
  },
  {
    char: "盘",
    spell: "pán",
    stroke: "11",
    radical: "皿",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄆㄢˊ",
    tradition: "盤",
    sex: "",
    tone: 2
  },
  {
    char: "盛",
    spell: "shèng",
    stroke: "11",
    radical: "皿",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄔㄥˊ",
    tradition: "盛",
    sex: "男",
    tone: 4
  },
  {
    char: "盟",
    spell: "méng",
    stroke: "13",
    radical: "皿",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄥˊ",
    tradition: "盟",
    sex: "",
    tone: 2
  },
  {
    char: "目",
    spell: "mù",
    stroke: "5",
    radical: "目",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄨˋ",
    tradition: "目",
    sex: "",
    tone: 4
  },
  {
    char: "盯",
    spell: "dīng",
    stroke: "7",
    radical: "目",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄥ",
    tradition: "盯",
    sex: "",
    tone: 1
  },
  {
    char: "盲",
    spell: "máng",
    stroke: "8",
    radical: "目",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄤˊ",
    tradition: "盲",
    sex: "",
    tone: 2
  },
  {
    char: "直",
    spell: "zhí",
    stroke: "8",
    radical: "十",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓˊ",
    tradition: "直",
    sex: "",
    tone: 2
  },
  {
    char: "相",
    spell: "xiāng",
    stroke: "9",
    radical: "木",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄒㄧㄤˋ",
    tradition: "相",
    sex: "",
    tone: 1
  },
  {
    char: "盹",
    spell: "dǔn",
    stroke: "9",
    radical: "目",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄣˇ",
    tradition: "盹",
    sex: "",
    tone: 3
  },
  {
    char: "盼",
    spell: "pàn",
    stroke: "9",
    radical: "目",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄢˋ",
    tradition: "盼",
    sex: "",
    tone: 4
  },
  {
    char: "盾",
    spell: "dùn",
    stroke: "9",
    radical: "⺁",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄉㄨㄣˋ",
    tradition: "盾",
    sex: "",
    tone: 4
  },
  {
    char: "省",
    spell: "shěng",
    stroke: "9",
    radical: "目",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄥˇ",
    tradition: "省",
    sex: "",
    tone: 3
  },
  {
    char: "眉",
    spell: "méi",
    stroke: "9",
    radical: "目",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄇㄟˊ",
    tradition: "眉",
    sex: "女",
    tone: 2
  },
  {
    char: "看",
    spell: "kàn",
    stroke: "9",
    radical: "手、目",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄢˋ",
    tradition: "看",
    sex: "",
    tone: 4
  },
  {
    char: "真",
    spell: "zhēn",
    stroke: "10",
    radical: "十",
    struct: "上中下结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄣ",
    tradition: "真",
    sex: "女",
    tone: 1
  },
  {
    char: "眠",
    spell: "mián",
    stroke: "10",
    radical: "目",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄢˊ",
    tradition: "眠",
    sex: "",
    tone: 2
  },
  {
    char: "眨",
    spell: "zhǎ",
    stroke: "9",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄚˇ",
    tradition: "眨",
    sex: "",
    tone: 3
  },
  {
    char: "眯",
    spell: "mī",
    stroke: "11",
    radical: "目",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˊ",
    tradition: "眯",
    sex: "",
    tone: 1
  },
  {
    char: "眶",
    spell: "kuàng",
    stroke: "11",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄤˋ",
    tradition: "眶",
    sex: "",
    tone: 4
  },
  {
    char: "眷",
    spell: "juàn",
    stroke: "11",
    radical: "目",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢˋ",
    tradition: "眷",
    sex: "",
    tone: 4
  },
  {
    char: "眼",
    spell: "yǎn",
    stroke: "11",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˇ",
    tradition: "眼",
    sex: "",
    tone: 3
  },
  {
    char: "着",
    spell: "zhe",
    stroke: "11",
    radical: "⺶",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄠˊ",
    tradition: "着",
    sex: "",
    tone: 0
  },
  {
    char: "睁",
    spell: "zhēng",
    stroke: "11",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄥ",
    tradition: "睁",
    sex: "",
    tone: 1
  },
  {
    char: "睛",
    spell: "jīng",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥ",
    tradition: "睛",
    sex: "",
    tone: 1
  },
  {
    char: "睡",
    spell: "shuì",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄟˋ",
    tradition: "睡",
    sex: "",
    tone: 4
  },
  {
    char: "督",
    spell: "dū",
    stroke: "13",
    radical: "目",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨ",
    tradition: "督",
    sex: "",
    tone: 1
  },
  {
    char: "睦",
    spell: "mù",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "睦",
    sex: "",
    tone: 4
  },
  {
    char: "睬",
    spell: "cǎi",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞˇ",
    tradition: "睬",
    sex: "",
    tone: 3
  },
  {
    char: "睹",
    spell: "dǔ",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˇ",
    tradition: "睹",
    sex: "",
    tone: 3
  },
  {
    char: "瞄",
    spell: "miáo",
    stroke: "13",
    radical: "目",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄠˊ",
    tradition: "瞄",
    sex: "",
    tone: 2
  },
  {
    char: "瞎",
    spell: "xiā",
    stroke: "15",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚ",
    tradition: "瞎",
    sex: "",
    tone: 1
  },
  {
    char: "瞒",
    spell: "mán",
    stroke: "15",
    radical: "目",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˊ",
    tradition: "瞞",
    sex: "",
    tone: 2
  },
  {
    char: "瞧",
    spell: "qiáo",
    stroke: "17",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "瞧",
    sex: "",
    tone: 2
  },
  {
    char: "瞪",
    spell: "dèng",
    stroke: "17",
    radical: "目",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄉㄥˋ",
    tradition: "瞪",
    sex: "",
    tone: 4
  },
  {
    char: "瞬",
    spell: "shùn",
    stroke: "17",
    radical: "目",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄣˋ",
    tradition: "瞬",
    sex: "",
    tone: 4
  },
  {
    char: "瞭",
    spell: "liǎo",
    stroke: "17",
    radical: "目",
    struct: "左右结构",
    five: "",
    method: "-",
    mark: "ㄌㄧㄠˋ",
    tradition: "",
    sex: "",
    tone: 4
  },
  {
    char: "瞳",
    spell: "tóng",
    stroke: "17",
    radical: "目",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄥˊ",
    tradition: "瞳",
    sex: "",
    tone: 2
  },
  {
    char: "瞻",
    spell: "zhān",
    stroke: "18",
    radical: "目",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄢ",
    tradition: "瞻",
    sex: "",
    tone: 1
  },
  {
    char: "矗",
    spell: "chù",
    stroke: "24",
    radical: "十",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄨˋ",
    tradition: "矗",
    sex: "",
    tone: 4
  },
  {
    char: "矛",
    spell: "máo",
    stroke: "5",
    radical: "矛",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄠˊ",
    tradition: "矛",
    sex: "",
    tone: 2
  },
  {
    char: "矢",
    spell: "shǐ",
    stroke: "5",
    radical: "矢",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕˇ",
    tradition: "矢",
    sex: "",
    tone: 3
  },
  {
    char: "知",
    spell: "zhī",
    stroke: "8",
    radical: "矢",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓ",
    tradition: "知",
    sex: "",
    tone: 1
  },
  {
    char: "矩",
    spell: "jǔ",
    stroke: "9",
    radical: "矢",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˇ",
    tradition: "矩",
    sex: "",
    tone: 3
  },
  {
    char: "矫",
    spell: "jiǎo",
    stroke: "11",
    radical: "矢",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˊ",
    tradition: "矯",
    sex: "",
    tone: 3
  },
  {
    char: "短",
    spell: "duǎn",
    stroke: "12",
    radical: "矢",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄢˇ",
    tradition: "短",
    sex: "",
    tone: 3
  },
  {
    char: "矮",
    spell: "ǎi",
    stroke: "13",
    radical: "矢",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞˇ",
    tradition: "矮",
    sex: "",
    tone: 3
  },
  {
    char: "石",
    spell: "shí",
    stroke: "5",
    radical: "石",
    struct: "半包围结构",
    five: "金",
    method: "-",
    mark: "ㄉㄢˋ",
    tradition: "石",
    sex: "",
    tone: 2
  },
  {
    char: "矾",
    spell: "fán",
    stroke: "8",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄢˊ",
    tradition: "礬",
    sex: "",
    tone: 2
  },
  {
    char: "矿",
    spell: "kuàng",
    stroke: "8",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄨㄤˋ",
    tradition: "礦",
    sex: "",
    tone: 4
  },
  {
    char: "码",
    spell: "mǎ",
    stroke: "8",
    radical: "石",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚˇ",
    tradition: "碼",
    sex: "",
    tone: 3
  },
  {
    char: "砂",
    spell: "shā",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄚ",
    tradition: "砂",
    sex: "",
    tone: 1
  },
  {
    char: "砌",
    spell: "qì",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧˋ",
    tradition: "砌",
    sex: "",
    tone: 4
  },
  {
    char: "砍",
    spell: "kǎn",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄢˇ",
    tradition: "砍",
    sex: "",
    tone: 3
  },
  {
    char: "研",
    spell: "yán",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "研",
    sex: "",
    tone: 2
  },
  {
    char: "砖",
    spell: "zhuān",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄓㄨㄢ",
    tradition: "磚",
    sex: "",
    tone: 1
  },
  {
    char: "砚",
    spell: "yàn",
    stroke: "9",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "硯",
    sex: "",
    tone: 4
  },
  {
    char: "砰",
    spell: "pēng",
    stroke: "10",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄥ",
    tradition: "砰",
    sex: "",
    tone: 1
  },
  {
    char: "破",
    spell: "pò",
    stroke: "10",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄛˋ",
    tradition: "破",
    sex: "",
    tone: 4
  },
  {
    char: "砸",
    spell: "zá",
    stroke: "10",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄗㄚˊ",
    tradition: "砸",
    sex: "",
    tone: 2
  },
  {
    char: "砾",
    spell: "lì",
    stroke: "10",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "礫",
    sex: "",
    tone: 4
  },
  {
    char: "础",
    spell: "chǔ",
    stroke: "10",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄨˇ",
    tradition: "礎",
    sex: "",
    tone: 3
  },
  {
    char: "硅",
    spell: "guī",
    stroke: "11",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄨㄟ",
    tradition: "硅",
    sex: "",
    tone: 1
  },
  {
    char: "硕",
    spell: "shuò",
    stroke: "11",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄕㄨㄛˋ",
    tradition: "碩",
    sex: "",
    tone: 4
  },
  {
    char: "硝",
    spell: "xiāo",
    stroke: "12",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "",
    mark: "",
    tradition: "硝",
    sex: "",
    tone: 1
  },
  {
    char: "硫",
    spell: "liú",
    stroke: "12",
    radical: "石",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "硫",
    sex: "",
    tone: 2
  },
  {
    char: "硬",
    spell: "yìng",
    stroke: "12",
    radical: "石",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˋ",
    tradition: "硬",
    sex: "",
    tone: 4
  },
  {
    char: "确",
    spell: "què",
    stroke: "12",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄩㄝˋ",
    tradition: "確",
    sex: "",
    tone: 4
  },
  {
    char: "硼",
    spell: "péng",
    stroke: "13",
    radical: "石",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "硼",
    sex: "",
    tone: 2
  },
  {
    char: "碉",
    spell: "diāo",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧㄠ",
    tradition: "碉",
    sex: "",
    tone: 1
  },
  {
    char: "碌",
    spell: "lù",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄌㄧㄡˋ",
    tradition: "碌",
    sex: "",
    tone: 4
  },
  {
    char: "碍",
    spell: "ài",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞˋ",
    tradition: "礙",
    sex: "",
    tone: 4
  },
  {
    char: "碎",
    spell: "suì",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄙㄨㄟˋ",
    tradition: "碎",
    sex: "",
    tone: 4
  },
  {
    char: "碑",
    spell: "bēi",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄟ",
    tradition: "碑",
    sex: "",
    tone: 1
  },
  {
    char: "碗",
    spell: "wǎn",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄢˇ",
    tradition: "碗",
    sex: "",
    tone: 3
  },
  {
    char: "碘",
    spell: "diǎn",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧㄢˇ",
    tradition: "碘",
    sex: "",
    tone: 3
  },
  {
    char: "碟",
    spell: "dié",
    stroke: "14",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄧㄝˊ",
    tradition: "碟",
    sex: "",
    tone: 2
  },
  {
    char: "碧",
    spell: "bì",
    stroke: "14",
    radical: "石",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "碧",
    sex: "",
    tone: 4
  },
  {
    char: "碰",
    spell: "pèng",
    stroke: "13",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄥˋ",
    tradition: "碰",
    sex: "",
    tone: 4
  },
  {
    char: "碱",
    spell: "jiǎn",
    stroke: "14",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "碱",
    sex: "",
    tone: 3
  },
  {
    char: "碳",
    spell: "tàn",
    stroke: "14",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄊㄢˋ",
    tradition: "碳",
    sex: "",
    tone: 4
  },
  {
    char: "碴",
    spell: "chá",
    stroke: "14",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄚˊ",
    tradition: "碴",
    sex: "",
    tone: 2
  },
  {
    char: "碾",
    spell: "niǎn",
    stroke: "15",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄋㄧㄢˇ",
    tradition: "碾",
    sex: "",
    tone: 3
  },
  {
    char: "磁",
    spell: "cí",
    stroke: "14",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "磁",
    sex: "",
    tone: 2
  },
  {
    char: "磅",
    spell: "bàng",
    stroke: "15",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "磅",
    sex: "",
    tone: 4
  },
  {
    char: "磕",
    spell: "kē",
    stroke: "15",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄎㄜ",
    tradition: "磕",
    sex: "",
    tone: 1
  },
  {
    char: "磨",
    spell: "mó",
    stroke: "16",
    radical: "麻",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "磨",
    sex: "",
    tone: 2
  },
  {
    char: "磷",
    spell: "lín",
    stroke: "17",
    radical: "石",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˊ",
    tradition: "磷",
    sex: "",
    tone: 2
  },
  {
    char: "磺",
    spell: "huáng",
    stroke: "16",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨㄤˊ",
    tradition: "磺",
    sex: "",
    tone: 2
  },
  {
    char: "礁",
    spell: "jiāo",
    stroke: "17",
    radical: "石",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "礁",
    sex: "",
    tone: 1
  },
  {
    char: "示",
    spell: "shì",
    stroke: "5",
    radical: "示",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄕˋ",
    tradition: "示",
    sex: "",
    tone: 4
  },
  {
    char: "礼",
    spell: "lǐ",
    stroke: "5",
    radical: "礻",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˇ",
    tradition: "禮",
    sex: "",
    tone: 3
  },
  {
    char: "社",
    spell: "shè",
    stroke: "7",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄜˋ",
    tradition: "社",
    sex: "",
    tone: 4
  },
  {
    char: "祈",
    spell: "qí",
    stroke: "8",
    radical: "礻",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "祈",
    sex: "",
    tone: 2
  },
  {
    char: "祖",
    spell: "zǔ",
    stroke: "9",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨˇ",
    tradition: "祖",
    sex: "",
    tone: 3
  },
  {
    char: "祝",
    spell: "zhù",
    stroke: "9",
    radical: "礻",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄡˋ",
    tradition: "祝",
    sex: "",
    tone: 4
  },
  {
    char: "神",
    spell: "shén",
    stroke: "9",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣˊ",
    tradition: "神",
    sex: "",
    tone: 2
  },
  {
    char: "祟",
    spell: "suì",
    stroke: "10",
    radical: "示",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨㄟˋ",
    tradition: "祟",
    sex: "",
    tone: 4
  },
  {
    char: "祠",
    spell: "cí",
    stroke: "9",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "祠",
    sex: "",
    tone: 2
  },
  {
    char: "祥",
    spell: "xiáng",
    stroke: "10",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄤˊ",
    tradition: "祥",
    sex: "男",
    tone: 2
  },
  {
    char: "票",
    spell: "piào",
    stroke: "11",
    radical: "示",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧㄠˋ",
    tradition: "票",
    sex: "",
    tone: 4
  },
  {
    char: "祭",
    spell: "jì",
    stroke: "11",
    radical: "示",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "祭",
    sex: "",
    tone: 4
  },
  {
    char: "祷",
    spell: "dǎo",
    stroke: "11",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄠˇ",
    tradition: "禱",
    sex: "",
    tone: 3
  },
  {
    char: "祸",
    spell: "huò",
    stroke: "11",
    radical: "礻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄛˋ",
    tradition: "禍",
    sex: "",
    tone: 4
  },
  {
    char: "禀",
    spell: "bǐng",
    stroke: "13",
    radical: "示",
    struct: "上中下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄥˇ",
    tradition: "禀",
    sex: "",
    tone: 3
  },
  {
    char: "禁",
    spell: "jìn",
    stroke: "13",
    radical: "示",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄣˋ",
    tradition: "禁",
    sex: "",
    tone: 4
  },
  {
    char: "福",
    spell: "fú",
    stroke: "13",
    radical: "礻",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "福",
    sex: "男",
    tone: 2
  },
  {
    char: "离",
    spell: "lí",
    stroke: "10",
    radical: "亠",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "離",
    sex: "",
    tone: 2
  },
  {
    char: "禽",
    spell: "qín",
    stroke: "12",
    radical: "人",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄑㄧㄣˊ",
    tradition: "禽",
    sex: "",
    tone: 2
  },
  {
    char: "禾",
    spell: "hé",
    stroke: "5",
    radical: "禾",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄏㄜˊ",
    tradition: "禾",
    sex: "",
    tone: 2
  },
  {
    char: "秀",
    spell: "xiù",
    stroke: "7",
    radical: "禾",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄡˋ",
    tradition: "秀",
    sex: "女",
    tone: 4
  },
  {
    char: "私",
    spell: "sī",
    stroke: "7",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙ",
    tradition: "私",
    sex: "",
    tone: 1
  },
  {
    char: "秃",
    spell: "tū",
    stroke: "7",
    radical: "禾",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄊㄨ",
    tradition: "秃",
    sex: "",
    tone: 1
  },
  {
    char: "秆",
    spell: "gǎn",
    stroke: "8",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄍㄢˇ",
    tradition: "秆",
    sex: "",
    tone: 3
  },
  {
    char: "秉",
    spell: "bǐng",
    stroke: "8",
    radical: "丿",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄧㄥˇ",
    tradition: "秉",
    sex: "",
    tone: 3
  },
  {
    char: "秋",
    spell: "qiū",
    stroke: "9",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄑㄧㄡ",
    tradition: "秋、鞦",
    sex: "女",
    tone: 1
  },
  {
    char: "种",
    spell: "zhǒng",
    stroke: "9",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄔㄨㄥˊ",
    tradition: "種",
    sex: "",
    tone: 3
  },
  {
    char: "科",
    spell: "kē",
    stroke: "9",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄜ",
    tradition: "科",
    sex: "",
    tone: 1
  },
  {
    char: "秒",
    spell: "miǎo",
    stroke: "9",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄠˇ",
    tradition: "秒",
    sex: "",
    tone: 3
  },
  {
    char: "秕",
    spell: "bǐ",
    stroke: "9",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˇ",
    tradition: "秕",
    sex: "",
    tone: 3
  },
  {
    char: "秘",
    spell: "mì",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "秘",
    sex: "",
    tone: 4
  },
  {
    char: "租",
    spell: "zū",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨ",
    tradition: "租",
    sex: "",
    tone: 1
  },
  {
    char: "秤",
    spell: "chèng",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄔㄥˋ",
    tradition: "秤",
    sex: "",
    tone: 4
  },
  {
    char: "秦",
    spell: "qín",
    stroke: "10",
    radical: "禾",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄑㄧㄣˊ",
    tradition: "秦",
    sex: "",
    tone: 2
  },
  {
    char: "秧",
    spell: "yāng",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄤ",
    tradition: "秧",
    sex: "",
    tone: 1
  },
  {
    char: "秩",
    spell: "zhì",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "秩",
    sex: "",
    tone: 4
  },
  {
    char: "秫",
    spell: "shú",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨˊ",
    tradition: "秫",
    sex: "",
    tone: 2
  },
  {
    char: "积",
    spell: "jī",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "積",
    sex: "",
    tone: 1
  },
  {
    char: "称",
    spell: "chēng",
    stroke: "10",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄔㄣˋ",
    tradition: "稱",
    sex: "",
    tone: 1
  },
  {
    char: "秸",
    spell: "jiē",
    stroke: "11",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝ",
    tradition: "秸",
    sex: "",
    tone: 1
  },
  {
    char: "移",
    spell: "yí",
    stroke: "11",
    radical: "禾",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˊ",
    tradition: "移",
    sex: "",
    tone: 2
  },
  {
    char: "秽",
    spell: "huì",
    stroke: "11",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "穢",
    sex: "",
    tone: 4
  },
  {
    char: "稀",
    spell: "xī",
    stroke: "12",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "稀",
    sex: "",
    tone: 1
  },
  {
    char: "程",
    spell: "chéng",
    stroke: "12",
    radical: "禾",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "程",
    sex: "男",
    tone: 2
  },
  {
    char: "稍",
    spell: "shāo",
    stroke: "12",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄠˋ",
    tradition: "稍",
    sex: "",
    tone: 1
  },
  {
    char: "税",
    spell: "shuì",
    stroke: "12",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄟˋ",
    tradition: "税",
    sex: "",
    tone: 4
  },
  {
    char: "稚",
    spell: "zhì",
    stroke: "13",
    radical: "禾",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "稚",
    sex: "",
    tone: 4
  },
  {
    char: "稠",
    spell: "chóu",
    stroke: "13",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "稠",
    sex: "",
    tone: 2
  },
  {
    char: "稳",
    spell: "wěn",
    stroke: "14",
    radical: "禾",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄣˇ",
    tradition: "穩",
    sex: "",
    tone: 3
  },
  {
    char: "稻",
    spell: "dào",
    stroke: "15",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄠˋ",
    tradition: "稻",
    sex: "",
    tone: 4
  },
  {
    char: "稼",
    spell: "jià",
    stroke: "15",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "稼",
    sex: "",
    tone: 4
  },
  {
    char: "稽",
    spell: "jī",
    stroke: "15",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "稽",
    sex: "",
    tone: 1
  },
  {
    char: "稿",
    spell: "gǎo",
    stroke: "15",
    radical: "禾",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄠˇ",
    tradition: "稿",
    sex: "",
    tone: 3
  },
  {
    char: "穆",
    spell: "mù",
    stroke: "16",
    radical: "禾",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄇㄨˋ",
    tradition: "穆",
    sex: "",
    tone: 4
  },
  {
    char: "穗",
    spell: "suì",
    stroke: "17",
    radical: "禾",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄨㄟˋ",
    tradition: "穗",
    sex: "",
    tone: 4
  },
  {
    char: "穴",
    spell: "xué",
    stroke: "5",
    radical: "穴",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄒㄩㄝˊ",
    tradition: "穴",
    sex: "",
    tone: 2
  },
  {
    char: "究",
    spell: "jiū",
    stroke: "7",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡ",
    tradition: "究",
    sex: "",
    tone: 1
  },
  {
    char: "穷",
    spell: "qióng",
    stroke: "7",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄑㄩㄥˊ",
    tradition: "窮",
    sex: "",
    tone: 2
  },
  {
    char: "空",
    spell: "kōng",
    stroke: "8",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄥˋ",
    tradition: "空",
    sex: "",
    tone: 1
  },
  {
    char: "穿",
    spell: "chuān",
    stroke: "9",
    radical: "穴",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄔㄨㄢ",
    tradition: "穿",
    sex: "",
    tone: 1
  },
  {
    char: "突",
    spell: "tū",
    stroke: "9",
    radical: "穴",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨ",
    tradition: "突",
    sex: "",
    tone: 1
  },
  {
    char: "窃",
    spell: "qiè",
    stroke: "9",
    radical: "穴",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄑㄧㄝˋ",
    tradition: "竊",
    sex: "",
    tone: 4
  },
  {
    char: "窄",
    spell: "zhǎi",
    stroke: "10",
    radical: "穴",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄞˇ",
    tradition: "窄",
    sex: "",
    tone: 3
  },
  {
    char: "窍",
    spell: "qiào",
    stroke: "10",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˋ",
    tradition: "竅",
    sex: "",
    tone: 4
  },
  {
    char: "窑",
    spell: "yáo",
    stroke: "11",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄧㄠˊ",
    tradition: "窑",
    sex: "",
    tone: 2
  },
  {
    char: "窒",
    spell: "zhì",
    stroke: "11",
    radical: "穴",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "窒",
    sex: "",
    tone: 4
  },
  {
    char: "窖",
    spell: "jiào",
    stroke: "12",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "窖",
    sex: "",
    tone: 4
  },
  {
    char: "窗",
    spell: "chuāng",
    stroke: "12",
    radical: "穴",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄤ",
    tradition: "窗",
    sex: "",
    tone: 1
  },
  {
    char: "窘",
    spell: "jiǒng",
    stroke: "12",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄥˇ",
    tradition: "窘",
    sex: "",
    tone: 3
  },
  {
    char: "窜",
    spell: "cuàn",
    stroke: "12",
    radical: "穴",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄢˋ",
    tradition: "竄",
    sex: "",
    tone: 4
  },
  {
    char: "窝",
    spell: "wō",
    stroke: "12",
    radical: "穴",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄛ",
    tradition: "窩",
    sex: "",
    tone: 1
  },
  {
    char: "窟",
    spell: "kū",
    stroke: "13",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨ",
    tradition: "窟",
    sex: "",
    tone: 1
  },
  {
    char: "窥",
    spell: "kuī",
    stroke: "13",
    radical: "穴",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟ",
    tradition: "窺",
    sex: "",
    tone: 1
  },
  {
    char: "窿",
    spell: "lóng",
    stroke: "16",
    radical: "穴",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄥˊ",
    tradition: "窿",
    sex: "",
    tone: 2
  },
  {
    char: "立",
    spell: "lì",
    stroke: "5",
    radical: "立",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧˋ",
    tradition: "立",
    sex: "",
    tone: 4
  },
  {
    char: "竖",
    spell: "shù",
    stroke: "9",
    radical: "立",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "竪",
    sex: "",
    tone: 4
  },
  {
    char: "站",
    spell: "zhàn",
    stroke: "10",
    radical: "立",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄢˋ",
    tradition: "站",
    sex: "",
    tone: 4
  },
  {
    char: "竞",
    spell: "jìng",
    stroke: "10",
    radical: "立",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄥˋ",
    tradition: "競",
    sex: "",
    tone: 4
  },
  {
    char: "竟",
    spell: "jìng",
    stroke: "11",
    radical: "音",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄥˋ",
    tradition: "竟",
    sex: "",
    tone: 4
  },
  {
    char: "章",
    spell: "zhāng",
    stroke: "11",
    radical: "立、音",
    struct: "上中下结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄤ",
    tradition: "章",
    sex: "",
    tone: 1
  },
  {
    char: "竣",
    spell: "jùn",
    stroke: "12",
    radical: "立",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩㄣˋ",
    tradition: "竣",
    sex: "",
    tone: 4
  },
  {
    char: "童",
    spell: "tóng",
    stroke: "12",
    radical: "立",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄥˊ",
    tradition: "童",
    sex: "",
    tone: 2
  },
  {
    char: "竭",
    spell: "jié",
    stroke: "14",
    radical: "立",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "竭",
    sex: "",
    tone: 2
  },
  {
    char: "端",
    spell: "duān",
    stroke: "14",
    radical: "立",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄢ",
    tradition: "端",
    sex: "",
    tone: 1
  },
  {
    char: "竹",
    spell: "zhú",
    stroke: "6",
    radical: "竹",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄓㄨˊ",
    tradition: "竹",
    sex: "女",
    tone: 2
  },
  {
    char: "竿",
    spell: "gān",
    stroke: "9",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢ",
    tradition: "竿",
    sex: "",
    tone: 1
  },
  {
    char: "笆",
    spell: "bā",
    stroke: "10",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄚ",
    tradition: "笆",
    sex: "",
    tone: 1
  },
  {
    char: "笋",
    spell: "sǔn",
    stroke: "10",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄨㄣˇ",
    tradition: "笋",
    sex: "",
    tone: 3
  },
  {
    char: "笑",
    spell: "xiào",
    stroke: "10",
    radical: "竹",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄠˋ",
    tradition: "笑",
    sex: "",
    tone: 4
  },
  {
    char: "笔",
    spell: "bǐ",
    stroke: "10",
    radical: "⺮",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄅㄧˇ",
    tradition: "筆",
    sex: "",
    tone: 3
  },
  {
    char: "笙",
    spell: "shēng",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄥ",
    tradition: "笙",
    sex: "",
    tone: 1
  },
  {
    char: "笛",
    spell: "dí",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄧˊ",
    tradition: "笛",
    sex: "",
    tone: 2
  },
  {
    char: "笤",
    spell: "tiáo",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄧㄠˊ",
    tradition: "笤",
    sex: "",
    tone: 2
  },
  {
    char: "符",
    spell: "fú",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "符",
    sex: "",
    tone: 2
  },
  {
    char: "笨",
    spell: "bèn",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄣˋ",
    tradition: "笨",
    sex: "",
    tone: 4
  },
  {
    char: "第",
    spell: "dì",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄉㄧˋ",
    tradition: "第",
    sex: "",
    tone: 4
  },
  {
    char: "笼",
    spell: "lóng",
    stroke: "11",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄨㄥˊ",
    tradition: "籠",
    sex: "",
    tone: 2
  },
  {
    char: "等",
    spell: "děng",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄥˇ",
    tradition: "等",
    sex: "",
    tone: 3
  },
  {
    char: "筋",
    spell: "jīn",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄣ",
    tradition: "筋",
    sex: "",
    tone: 1
  },
  {
    char: "筏",
    spell: "fá",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄚˊ",
    tradition: "筏",
    sex: "",
    tone: 2
  },
  {
    char: "筐",
    spell: "kuāng",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄤ",
    tradition: "筐",
    sex: "",
    tone: 1
  },
  {
    char: "筑",
    spell: "zhù",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "築",
    sex: "",
    tone: 4
  },
  {
    char: "筒",
    spell: "tǒng",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄨㄥˇ",
    tradition: "筒",
    sex: "",
    tone: 3
  },
  {
    char: "答",
    spell: "dá",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄚˊ",
    tradition: "答",
    sex: "",
    tone: 2
  },
  {
    char: "策",
    spell: "cè",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄜˋ",
    tradition: "策",
    sex: "男",
    tone: 4
  },
  {
    char: "筛",
    spell: "shāi",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄞ",
    tradition: "篩",
    sex: "",
    tone: 1
  },
  {
    char: "筝",
    spell: "zhēng",
    stroke: "12",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄥ",
    tradition: "筝",
    sex: "",
    tone: 1
  },
  {
    char: "筷",
    spell: "kuài",
    stroke: "13",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄞˋ",
    tradition: "筷",
    sex: "",
    tone: 4
  },
  {
    char: "筹",
    spell: "chóu",
    stroke: "13",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "籌",
    sex: "",
    tone: 2
  },
  {
    char: "签",
    spell: "qiān",
    stroke: "13",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "簽、籤",
    sex: "",
    tone: 1
  },
  {
    char: "简",
    spell: "jiǎn",
    stroke: "13",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˇ",
    tradition: "簡",
    sex: "",
    tone: 3
  },
  {
    char: "箍",
    spell: "gū",
    stroke: "14",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "箍",
    sex: "",
    tone: 1
  },
  {
    char: "箕",
    spell: "jī",
    stroke: "14",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "箕",
    sex: "",
    tone: 1
  },
  {
    char: "算",
    spell: "suàn",
    stroke: "14",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄙㄨㄢˋ",
    tradition: "算",
    sex: "",
    tone: 4
  },
  {
    char: "管",
    spell: "guǎn",
    stroke: "14",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄢˇ",
    tradition: "管",
    sex: "",
    tone: 3
  },
  {
    char: "箩",
    spell: "luó",
    stroke: "14",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "籮",
    sex: "",
    tone: 2
  },
  {
    char: "箫",
    spell: "xiāo",
    stroke: "14",
    radical: "⺮",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "簫",
    sex: "",
    tone: 1
  },
  {
    char: "箭",
    spell: "jiàn",
    stroke: "15",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "",
    mark: "",
    tradition: "箭",
    sex: "",
    tone: 4
  },
  {
    char: "箱",
    spell: "xiāng",
    stroke: "15",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄤ",
    tradition: "箱",
    sex: "",
    tone: 1
  },
  {
    char: "篇",
    spell: "piān",
    stroke: "15",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄧㄢ",
    tradition: "篇",
    sex: "",
    tone: 1
  },
  {
    char: "篓",
    spell: "lǒu",
    stroke: "15",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄡˇ",
    tradition: "簍",
    sex: "",
    tone: 3
  },
  {
    char: "篙",
    spell: "gāo",
    stroke: "16",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄠ",
    tradition: "篙",
    sex: "",
    tone: 1
  },
  {
    char: "篡",
    spell: "cuàn",
    stroke: "16",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄨㄢˋ",
    tradition: "篡",
    sex: "",
    tone: 4
  },
  {
    char: "篮",
    spell: "lán",
    stroke: "16",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄢˊ",
    tradition: "籃",
    sex: "",
    tone: 2
  },
  {
    char: "篱",
    spell: "lí",
    stroke: "16",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "籬",
    sex: "",
    tone: 2
  },
  {
    char: "篷",
    spell: "péng",
    stroke: "16",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "篷",
    sex: "",
    tone: 2
  },
  {
    char: "簇",
    spell: "cù",
    stroke: "17",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄨˋ",
    tradition: "簇",
    sex: "",
    tone: 4
  },
  {
    char: "簸",
    spell: "bò",
    stroke: "19",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄛˋ",
    tradition: "簸",
    sex: "",
    tone: 4
  },
  {
    char: "簿",
    spell: "bù",
    stroke: "19",
    radical: "竹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˋ",
    tradition: "簿",
    sex: "",
    tone: 2
  },
  {
    char: "籍",
    spell: "jí",
    stroke: "20",
    radical: "竹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˊ",
    tradition: "籍",
    sex: "",
    tone: 2
  },
  {
    char: "米",
    spell: "mǐ",
    stroke: "6",
    radical: "米",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧˇ",
    tradition: "米",
    sex: "",
    tone: 3
  },
  {
    char: "类",
    spell: "lèi",
    stroke: "9",
    radical: "米",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄟˋ",
    tradition: "類",
    sex: "",
    tone: 4
  },
  {
    char: "籽",
    spell: "zǐ",
    stroke: "9",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗˇ",
    tradition: "籽",
    sex: "",
    tone: 3
  },
  {
    char: "粉",
    spell: "fěn",
    stroke: "10",
    radical: "米",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄣˇ",
    tradition: "粉",
    sex: "",
    tone: 3
  },
  {
    char: "粒",
    spell: "lì",
    stroke: "11",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "粒",
    sex: "",
    tone: 4
  },
  {
    char: "粗",
    spell: "cū",
    stroke: "11",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨ",
    tradition: "粗",
    sex: "",
    tone: 1
  },
  {
    char: "粘",
    spell: "nián",
    stroke: "11",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄢˊ",
    tradition: "粘",
    sex: "",
    tone: 2
  },
  {
    char: "粟",
    spell: "sù",
    stroke: "12",
    radical: "米",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨˋ",
    tradition: "粟",
    sex: "",
    tone: 4
  },
  {
    char: "粤",
    spell: "yuè",
    stroke: "12",
    radical: "米",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄩㄝˋ",
    tradition: "粤",
    sex: "",
    tone: 4
  },
  {
    char: "粥",
    spell: "zhōu",
    stroke: "12",
    radical: "米",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "粥",
    sex: "",
    tone: 1
  },
  {
    char: "粪",
    spell: "fèn",
    stroke: "12",
    radical: "米",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄣˋ",
    tradition: "糞",
    sex: "",
    tone: 4
  },
  {
    char: "粮",
    spell: "liáng",
    stroke: "13",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˊ",
    tradition: "糧",
    sex: "",
    tone: 2
  },
  {
    char: "粱",
    spell: "liáng",
    stroke: "13",
    radical: "米",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄧㄤˊ",
    tradition: "粱",
    sex: "",
    tone: 2
  },
  {
    char: "粹",
    spell: "cuì",
    stroke: "14",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟˋ",
    tradition: "粹",
    sex: "",
    tone: 4
  },
  {
    char: "精",
    spell: "jīng",
    stroke: "14",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄥ",
    tradition: "精",
    sex: "",
    tone: 1
  },
  {
    char: "糊",
    spell: "hú",
    stroke: "15",
    radical: "米",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "糊",
    sex: "",
    tone: 2
  },
  {
    char: "糕",
    spell: "gāo",
    stroke: "16",
    radical: "米",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄠ",
    tradition: "糕",
    sex: "",
    tone: 1
  },
  {
    char: "糖",
    spell: "táng",
    stroke: "16",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "糖",
    sex: "",
    tone: 2
  },
  {
    char: "糙",
    spell: "cāo",
    stroke: "16",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄠ",
    tradition: "糙",
    sex: "",
    tone: 1
  },
  {
    char: "糜",
    spell: "mí",
    stroke: "17",
    radical: "米",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "糜",
    sex: "",
    tone: 2
  },
  {
    char: "糟",
    spell: "zāo",
    stroke: "17",
    radical: "米",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠ",
    tradition: "糟",
    sex: "",
    tone: 1
  },
  {
    char: "糠",
    spell: "kāng",
    stroke: "17",
    radical: "米",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄤ",
    tradition: "糠",
    sex: "",
    tone: 1
  },
  {
    char: "糯",
    spell: "nuò",
    stroke: "20",
    radical: "米",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄨㄛˋ",
    tradition: "糯",
    sex: "",
    tone: 4
  },
  {
    char: "系",
    spell: "xì",
    stroke: "7",
    radical: "丿",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "係、繋",
    sex: "",
    tone: 4
  },
  {
    char: "紊",
    spell: "wěn",
    stroke: "10",
    radical: "糸",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄨㄣˇ",
    tradition: "紊",
    sex: "",
    tone: 3
  },
  {
    char: "素",
    spell: "sù",
    stroke: "10",
    radical: "糸",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨˋ",
    tradition: "素",
    sex: "女",
    tone: 4
  },
  {
    char: "索",
    spell: "suǒ",
    stroke: "10",
    radical: "糸",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨㄛˇ",
    tradition: "索",
    sex: "",
    tone: 3
  },
  {
    char: "紧",
    spell: "jǐn",
    stroke: "10",
    radical: "糸",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄣˇ",
    tradition: "緊",
    sex: "",
    tone: 3
  },
  {
    char: "紫",
    spell: "zǐ",
    stroke: "12",
    radical: "糸",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗˇ",
    tradition: "紫",
    sex: "",
    tone: 3
  },
  {
    char: "累",
    spell: "lèi",
    stroke: "11",
    radical: "糸",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄟˊ",
    tradition: "纍",
    sex: "",
    tone: 4
  },
  {
    char: "絮",
    spell: "xù",
    stroke: "12",
    radical: "糸",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "絮",
    sex: "",
    tone: 4
  },
  {
    char: "繁",
    spell: "fán",
    stroke: "17",
    radical: "糸",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˊ",
    tradition: "繁",
    sex: "",
    tone: 2
  },
  {
    char: "纠",
    spell: "jiū",
    stroke: "5",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡ",
    tradition: "糾",
    sex: "",
    tone: 1
  },
  {
    char: "红",
    spell: "hóng",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "紅",
    sex: "女",
    tone: 2
  },
  {
    char: "纤",
    spell: "xiān",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢˋ",
    tradition: "縴、纖",
    sex: "",
    tone: 1
  },
  {
    char: "约",
    spell: "yuē",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄠ",
    tradition: "約",
    sex: "",
    tone: 1
  },
  {
    char: "级",
    spell: "jí",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˊ",
    tradition: "級",
    sex: "",
    tone: 2
  },
  {
    char: "纪",
    spell: "jì",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "紀",
    sex: "",
    tone: 4
  },
  {
    char: "纫",
    spell: "rèn",
    stroke: "6",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄣˋ",
    tradition: "紉",
    sex: "",
    tone: 4
  },
  {
    char: "纬",
    spell: "wěi",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˇ",
    tradition: "緯",
    sex: "",
    tone: 3
  },
  {
    char: "纯",
    spell: "chún",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄣˊ",
    tradition: "純",
    sex: "女",
    tone: 2
  },
  {
    char: "纱",
    spell: "shā",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄚ",
    tradition: "紗",
    sex: "",
    tone: 1
  },
  {
    char: "纲",
    spell: "gāng",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄤ",
    tradition: "綱",
    sex: "",
    tone: 1
  },
  {
    char: "纳",
    spell: "nà",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "納",
    sex: "",
    tone: 4
  },
  {
    char: "纵",
    spell: "zòng",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗㄨㄥˋ",
    tradition: "縱",
    sex: "",
    tone: 4
  },
  {
    char: "纷",
    spell: "fēn",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄣ",
    tradition: "紛",
    sex: "",
    tone: 1
  },
  {
    char: "纸",
    spell: "zhǐ",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˇ",
    tradition: "紙",
    sex: "",
    tone: 3
  },
  {
    char: "纹",
    spell: "wén",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄣˊ",
    tradition: "紋",
    sex: "",
    tone: 2
  },
  {
    char: "纺",
    spell: "fǎng",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˇ",
    tradition: "紡",
    sex: "",
    tone: 3
  },
  {
    char: "纽",
    spell: "niǔ",
    stroke: "7",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄋㄧㄡˇ",
    tradition: "紐",
    sex: "",
    tone: 3
  },
  {
    char: "线",
    spell: "xiàn",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "綫",
    sex: "",
    tone: 4
  },
  {
    char: "练",
    spell: "liàn",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄢˋ",
    tradition: "練",
    sex: "",
    tone: 4
  },
  {
    char: "组",
    spell: "zǔ",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨˇ",
    tradition: "組",
    sex: "",
    tone: 3
  },
  {
    char: "绅",
    spell: "shēn",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄣ",
    tradition: "紳",
    sex: "",
    tone: 1
  },
  {
    char: "细",
    spell: "xì",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧˋ",
    tradition: "細",
    sex: "",
    tone: 4
  },
  {
    char: "织",
    spell: "zhī",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "織",
    sex: "",
    tone: 1
  },
  {
    char: "终",
    spell: "zhōng",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄥ",
    tradition: "終",
    sex: "",
    tone: 1
  },
  {
    char: "绊",
    spell: "bàn",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢˋ",
    tradition: "絆",
    sex: "",
    tone: 4
  },
  {
    char: "绍",
    spell: "shào",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄠˋ",
    tradition: "紹",
    sex: "男",
    tone: 4
  },
  {
    char: "绎",
    spell: "yì",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "繹",
    sex: "",
    tone: 4
  },
  {
    char: "经",
    spell: "jīng",
    stroke: "8",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "經",
    sex: "",
    tone: 1
  },
  {
    char: "绑",
    spell: "bǎng",
    stroke: "9",
    radical: "纟",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˇ",
    tradition: "綁",
    sex: "",
    tone: 3
  },
  {
    char: "绒",
    spell: "róng",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "絨",
    sex: "",
    tone: 2
  },
  {
    char: "结",
    spell: "jié",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "結",
    sex: "",
    tone: 2
  },
  {
    char: "绕",
    spell: "rào",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄠˋ",
    tradition: "繞",
    sex: "",
    tone: 4
  },
  {
    char: "绘",
    spell: "huì",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "繪",
    sex: "",
    tone: 4
  },
  {
    char: "给",
    spell: "gěi",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄟˇ",
    tradition: "給",
    sex: "",
    tone: 3
  },
  {
    char: "络",
    spell: "luò",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄠˋ",
    tradition: "絡",
    sex: "",
    tone: 4
  },
  {
    char: "绝",
    spell: "jué",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄩㄝˊ",
    tradition: "絶",
    sex: "",
    tone: 2
  },
  {
    char: "绞",
    spell: "jiǎo",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "絞",
    sex: "",
    tone: 3
  },
  {
    char: "统",
    spell: "tǒng",
    stroke: "9",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄨㄥˇ",
    tradition: "統",
    sex: "",
    tone: 3
  },
  {
    char: "绢",
    spell: "juàn",
    stroke: "10",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄢˋ",
    tradition: "絹",
    sex: "",
    tone: 4
  },
  {
    char: "绣",
    spell: "xiù",
    stroke: "10",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄡˋ",
    tradition: "綉",
    sex: "",
    tone: 4
  },
  {
    char: "继",
    spell: "jì",
    stroke: "10",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "繼",
    sex: "",
    tone: 4
  },
  {
    char: "绩",
    spell: "jì",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "績",
    sex: "",
    tone: 4
  },
  {
    char: "绪",
    spell: "xù",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "緒",
    sex: "",
    tone: 4
  },
  {
    char: "续",
    spell: "xù",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "續",
    sex: "",
    tone: 4
  },
  {
    char: "绰",
    spell: "chuò",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄔㄠ",
    tradition: "綽",
    sex: "",
    tone: 4
  },
  {
    char: "绳",
    spell: "shéng",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥˊ",
    tradition: "繩",
    sex: "",
    tone: 2
  },
  {
    char: "维",
    spell: "wéi",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˊ",
    tradition: "維",
    sex: "男",
    tone: 2
  },
  {
    char: "绵",
    spell: "mián",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧㄢˊ",
    tradition: "綿",
    sex: "",
    tone: 2
  },
  {
    char: "绷",
    spell: "bēng",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄥˋ",
    tradition: "綳",
    sex: "",
    tone: 1
  },
  {
    char: "绸",
    spell: "chóu",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "綢",
    sex: "",
    tone: 2
  },
  {
    char: "综",
    spell: "zōng",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄥˋ",
    tradition: "綜",
    sex: "",
    tone: 1
  },
  {
    char: "绽",
    spell: "zhàn",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄢˋ",
    tradition: "綻",
    sex: "",
    tone: 4
  },
  {
    char: "绿",
    spell: "lǜ",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˋ",
    tradition: "緑",
    sex: "",
    tone: 4
  },
  {
    char: "缀",
    spell: "zhuì",
    stroke: "11",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄟˋ",
    tradition: "綴",
    sex: "",
    tone: 4
  },
  {
    char: "缅",
    spell: "miǎn",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄢˇ",
    tradition: "緬",
    sex: "",
    tone: 3
  },
  {
    char: "缆",
    spell: "lǎn",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄢˇ",
    tradition: "纜",
    sex: "",
    tone: 3
  },
  {
    char: "缎",
    spell: "duàn",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄢˋ",
    tradition: "緞",
    sex: "",
    tone: 4
  },
  {
    char: "缓",
    spell: "huǎn",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄏㄨㄢˇ",
    tradition: "緩",
    sex: "",
    tone: 3
  },
  {
    char: "缔",
    spell: "dì",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˋ",
    tradition: "締",
    sex: "",
    tone: 4
  },
  {
    char: "缕",
    spell: "lǚ",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "縷",
    sex: "",
    tone: 3
  },
  {
    char: "编",
    spell: "biān",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢ",
    tradition: "編",
    sex: "",
    tone: 1
  },
  {
    char: "缘",
    spell: "yuán",
    stroke: "12",
    radical: "纟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "緣",
    sex: "",
    tone: 2
  },
  {
    char: "缚",
    spell: "fù",
    stroke: "13",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "縛",
    sex: "",
    tone: 4
  },
  {
    char: "缝",
    spell: "fèng",
    stroke: "13",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥˊ",
    tradition: "縫",
    sex: "",
    tone: 4
  },
  {
    char: "缠",
    spell: "chán",
    stroke: "13",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄢˊ",
    tradition: "纏",
    sex: "",
    tone: 2
  },
  {
    char: "缤",
    spell: "bīn",
    stroke: "13",
    radical: "纟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄣ",
    tradition: "繽",
    sex: "",
    tone: 1
  },
  {
    char: "缨",
    spell: "yīng",
    stroke: "14",
    radical: "纟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "纓",
    sex: "",
    tone: 1
  },
  {
    char: "缩",
    spell: "suō",
    stroke: "14",
    radical: "纟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "縮",
    sex: "",
    tone: 1
  },
  {
    char: "缭",
    spell: "liáo",
    stroke: "15",
    radical: "纟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "繚",
    sex: "",
    tone: 2
  },
  {
    char: "缰",
    spell: "jiāng",
    stroke: "16",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤ",
    tradition: "繮",
    sex: "",
    tone: 1
  },
  {
    char: "缴",
    spell: "jiǎo",
    stroke: "16",
    radical: "纟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "繳",
    sex: "",
    tone: 3
  },
  {
    char: "缸",
    spell: "gāng",
    stroke: "9",
    radical: "缶",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄤ",
    tradition: "缸",
    sex: "",
    tone: 1
  },
  {
    char: "缺",
    spell: "quē",
    stroke: "10",
    radical: "缶",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄝ",
    tradition: "缺",
    sex: "",
    tone: 1
  },
  {
    char: "罐",
    spell: "guàn",
    stroke: "23",
    radical: "缶",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄨㄢˋ",
    tradition: "罐",
    sex: "",
    tone: 4
  },
  {
    char: "网",
    spell: "wǎng",
    stroke: "6",
    radical: "冂",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄨㄤˇ",
    tradition: "網",
    sex: "",
    tone: 3
  },
  {
    char: "罕",
    spell: "hǎn",
    stroke: "7",
    radical: "干",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˇ",
    tradition: "罕",
    sex: "",
    tone: 3
  },
  {
    char: "罗",
    spell: "luó",
    stroke: "8",
    radical: "罒",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄛˊ",
    tradition: "羅",
    sex: "",
    tone: 2
  },
  {
    char: "罚",
    spell: "fá",
    stroke: "9",
    radical: "罒",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄈㄚˊ",
    tradition: "罰",
    sex: "",
    tone: 2
  },
  {
    char: "罢",
    spell: "bà",
    stroke: "10",
    radical: "罒",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄚˋ",
    tradition: "罷",
    sex: "",
    tone: 4
  },
  {
    char: "罩",
    spell: "zhào",
    stroke: "13",
    radical: "罒",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠˋ",
    tradition: "罩",
    sex: "",
    tone: 4
  },
  {
    char: "罪",
    spell: "zuì",
    stroke: "13",
    radical: "罒",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄗㄨㄟˋ",
    tradition: "罪",
    sex: "",
    tone: 4
  },
  {
    char: "置",
    spell: "zhì",
    stroke: "13",
    radical: "罒",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "置",
    sex: "",
    tone: 4
  },
  {
    char: "署",
    spell: "shǔ",
    stroke: "13",
    radical: "罒",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "署",
    sex: "",
    tone: 3
  },
  {
    char: "羊",
    spell: "yáng",
    stroke: "6",
    radical: "羊",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧㄤˊ",
    tradition: "羊",
    sex: "",
    tone: 2
  },
  {
    char: "美",
    spell: "měi",
    stroke: "9",
    radical: "大",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄟˇ",
    tradition: "美",
    sex: "女",
    tone: 3
  },
  {
    char: "羔",
    spell: "gāo",
    stroke: "10",
    radical: "⺷、灬",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄠ",
    tradition: "羔",
    sex: "",
    tone: 1
  },
  {
    char: "羞",
    spell: "xiū",
    stroke: "10",
    radical: "⺶",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄡ",
    tradition: "羞",
    sex: "",
    tone: 1
  },
  {
    char: "羡",
    spell: "xiàn",
    stroke: "12",
    radical: "羊",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄢˋ",
    tradition: "羡",
    sex: "",
    tone: 4
  },
  {
    char: "群",
    spell: "qún",
    stroke: "13",
    radical: "羊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄣˊ",
    tradition: "群",
    sex: "男",
    tone: 2
  },
  {
    char: "羹",
    spell: "gēng",
    stroke: "19",
    radical: "羊",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄍㄥ",
    tradition: "羹",
    sex: "",
    tone: 1
  },
  {
    char: "羽",
    spell: "yǔ",
    stroke: "6",
    radical: "羽",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄩˇ",
    tradition: "羽",
    sex: "女",
    tone: 3
  },
  {
    char: "翁",
    spell: "wēng",
    stroke: "10",
    radical: "羽",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄥ",
    tradition: "翁",
    sex: "",
    tone: 1
  },
  {
    char: "翅",
    spell: "chì",
    stroke: "10",
    radical: "支",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔˋ",
    tradition: "翅",
    sex: "",
    tone: 4
  },
  {
    char: "翎",
    spell: "líng",
    stroke: "11",
    radical: "羽",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "翎",
    sex: "",
    tone: 2
  },
  {
    char: "翔",
    spell: "xiáng",
    stroke: "12",
    radical: "⺶",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄒㄧㄤˊ",
    tradition: "翔",
    sex: "男",
    tone: 2
  },
  {
    char: "翘",
    spell: "qiào",
    stroke: "12",
    radical: "羽",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "翹",
    sex: "",
    tone: 4
  },
  {
    char: "翠",
    spell: "cuì",
    stroke: "14",
    radical: "羽",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟˋ",
    tradition: "翠",
    sex: "女",
    tone: 4
  },
  {
    char: "翩",
    spell: "piān",
    stroke: "15",
    radical: "羽",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄢ",
    tradition: "翩",
    sex: "",
    tone: 1
  },
  {
    char: "翰",
    spell: "hàn",
    stroke: "16",
    radical: "龺、羽",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˋ",
    tradition: "翰",
    sex: "男",
    tone: 4
  },
  {
    char: "翻",
    spell: "fān",
    stroke: "18",
    radical: "羽",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢ",
    tradition: "翻",
    sex: "",
    tone: 1
  },
  {
    char: "翼",
    spell: "yì",
    stroke: "17",
    radical: "羽",
    struct: "上中下结构",
    five: "金",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "翼",
    sex: "",
    tone: 4
  },
  {
    char: "耀",
    spell: "yào",
    stroke: "20",
    radical: "羽",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠˋ",
    tradition: "耀",
    sex: "",
    tone: 4
  },
  {
    char: "老",
    spell: "lǎo",
    stroke: "6",
    radical: "老",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄌㄠˇ",
    tradition: "老",
    sex: "",
    tone: 3
  },
  {
    char: "考",
    spell: "kǎo",
    stroke: "6",
    radical: "耂",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄠˇ",
    tradition: "考",
    sex: "",
    tone: 3
  },
  {
    char: "者",
    spell: "zhě",
    stroke: "8",
    radical: "耂",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄜˇ",
    tradition: "者",
    sex: "",
    tone: 3
  },
  {
    char: "而",
    spell: "ér",
    stroke: "6",
    radical: "而",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄦˊ",
    tradition: "而",
    sex: "",
    tone: 2
  },
  {
    char: "耍",
    spell: "shuǎ",
    stroke: "9",
    radical: "而",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄚˇ",
    tradition: "耍",
    sex: "",
    tone: 3
  },
  {
    char: "耐",
    spell: "nài",
    stroke: "9",
    radical: "而",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄞˋ",
    tradition: "耐",
    sex: "",
    tone: 4
  },
  {
    char: "耕",
    spell: "gēng",
    stroke: "10",
    radical: "耒",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄥ",
    tradition: "耕",
    sex: "",
    tone: 1
  },
  {
    char: "耗",
    spell: "hào",
    stroke: "10",
    radical: "耒",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄠˋ",
    tradition: "耗",
    sex: "",
    tone: 4
  },
  {
    char: "耘",
    spell: "yún",
    stroke: "10",
    radical: "耒",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩㄣˊ",
    tradition: "耘",
    sex: "",
    tone: 2
  },
  {
    char: "耙",
    spell: "pá",
    stroke: "10",
    radical: "耒",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "耙",
    sex: "",
    tone: 2
  },
  {
    char: "耳",
    spell: "ěr",
    stroke: "6",
    radical: "耳",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄦˇ",
    tradition: "耳",
    sex: "",
    tone: 3
  },
  {
    char: "耸",
    spell: "sǒng",
    stroke: "10",
    radical: "耳",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄥˇ",
    tradition: "聳",
    sex: "",
    tone: 3
  },
  {
    char: "耻",
    spell: "chǐ",
    stroke: "10",
    radical: "耳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔˇ",
    tradition: "耻",
    sex: "",
    tone: 3
  },
  {
    char: "耽",
    spell: "dān",
    stroke: "10",
    radical: "耳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄢ",
    tradition: "耽",
    sex: "",
    tone: 1
  },
  {
    char: "耿",
    spell: "gěng",
    stroke: "10",
    radical: "耳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄍㄥˇ",
    tradition: "耿",
    sex: "",
    tone: 3
  },
  {
    char: "聂",
    spell: "niè",
    stroke: "10",
    radical: "耳",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄋㄧㄝˋ",
    tradition: "聶",
    sex: "",
    tone: 4
  },
  {
    char: "聊",
    spell: "liáo",
    stroke: "11",
    radical: "耳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "聊",
    sex: "",
    tone: 2
  },
  {
    char: "聋",
    spell: "lóng",
    stroke: "11",
    radical: "龙",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄥˊ",
    tradition: "聾",
    sex: "",
    tone: 2
  },
  {
    char: "职",
    spell: "zhí",
    stroke: "11",
    radical: "耳",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓˊ",
    tradition: "職",
    sex: "",
    tone: 2
  },
  {
    char: "联",
    spell: "lián",
    stroke: "12",
    radical: "耳",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄢˊ",
    tradition: "聯",
    sex: "",
    tone: 2
  },
  {
    char: "聘",
    spell: "pìn",
    stroke: "13",
    radical: "耳",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄣˋ",
    tradition: "聘",
    sex: "",
    tone: 4
  },
  {
    char: "聚",
    spell: "jù",
    stroke: "14",
    radical: "耳",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "聚",
    sex: "",
    tone: 4
  },
  {
    char: "聪",
    spell: "cōng",
    stroke: "15",
    radical: "耳",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄥ",
    tradition: "聰",
    sex: "女",
    tone: 1
  },
  {
    char: "肃",
    spell: "sù",
    stroke: "8",
    radical: "肀",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨˋ",
    tradition: "肅",
    sex: "",
    tone: 4
  },
  {
    char: "肄",
    spell: "yì",
    stroke: "13",
    radical: "聿",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "肄",
    sex: "",
    tone: 4
  },
  {
    char: "肆",
    spell: "sì",
    stroke: "13",
    radical: "镸",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙˋ",
    tradition: "肆",
    sex: "",
    tone: 4
  },
  {
    char: "肉",
    spell: "ròu",
    stroke: "6",
    radical: "肉",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄖㄡˋ",
    tradition: "肉",
    sex: "",
    tone: 4
  },
  {
    char: "肋",
    spell: "lèi",
    stroke: "6",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄜ",
    tradition: "肋",
    sex: "",
    tone: 4
  },
  {
    char: "肌",
    spell: "jī",
    stroke: "6",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "肌",
    sex: "",
    tone: 1
  },
  {
    char: "肖",
    spell: "xiào",
    stroke: "7",
    radical: "⺌",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄠˋ",
    tradition: "肖",
    sex: "",
    tone: 4
  },
  {
    char: "肘",
    spell: "zhǒu",
    stroke: "7",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄡˇ",
    tradition: "肘",
    sex: "",
    tone: 3
  },
  {
    char: "肚",
    spell: "dù",
    stroke: "7",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "肚",
    sex: "",
    tone: 4
  },
  {
    char: "肛",
    spell: "gāng",
    stroke: "7",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄤ",
    tradition: "肛",
    sex: "",
    tone: 1
  },
  {
    char: "肝",
    spell: "gān",
    stroke: "7",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢ",
    tradition: "肝",
    sex: "",
    tone: 1
  },
  {
    char: "肠",
    spell: "cháng",
    stroke: "7",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "腸",
    sex: "",
    tone: 2
  },
  {
    char: "股",
    spell: "gǔ",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˇ",
    tradition: "股",
    sex: "",
    tone: 3
  },
  {
    char: "肢",
    spell: "zhī",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓ",
    tradition: "肢",
    sex: "",
    tone: 1
  },
  {
    char: "肤",
    spell: "fū",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨ",
    tradition: "膚",
    sex: "",
    tone: 1
  },
  {
    char: "肥",
    spell: "féi",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄟˊ",
    tradition: "肥",
    sex: "",
    tone: 2
  },
  {
    char: "肩",
    spell: "jiān",
    stroke: "8",
    radical: "户",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢ",
    tradition: "肩",
    sex: "",
    tone: 1
  },
  {
    char: "肪",
    spell: "fáng",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄈㄤˊ",
    tradition: "肪",
    sex: "",
    tone: 2
  },
  {
    char: "肮",
    spell: "āng",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄤ",
    tradition: "骯",
    sex: "",
    tone: 1
  },
  {
    char: "肯",
    spell: "kěn",
    stroke: "8",
    radical: "止",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄎㄣˇ",
    tradition: "肯",
    sex: "",
    tone: 3
  },
  {
    char: "育",
    spell: "yù",
    stroke: "8",
    radical: "月",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "",
    tradition: "育",
    sex: "女",
    tone: 4
  },
  {
    char: "肴",
    spell: "yáo",
    stroke: "8",
    radical: "月",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄠˊ",
    tradition: "肴",
    sex: "",
    tone: 2
  },
  {
    char: "肺",
    spell: "fèi",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄟˋ",
    tradition: "肺",
    sex: "",
    tone: 4
  },
  {
    char: "肾",
    spell: "shèn",
    stroke: "8",
    radical: "月",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄣˋ",
    tradition: "腎",
    sex: "",
    tone: 4
  },
  {
    char: "肿",
    spell: "zhǒng",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓㄨㄥˇ",
    tradition: "腫",
    sex: "",
    tone: 3
  },
  {
    char: "胀",
    spell: "zhàng",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓㄤˋ",
    tradition: "脹",
    sex: "",
    tone: 4
  },
  {
    char: "胁",
    spell: "xié",
    stroke: "8",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "脅",
    sex: "",
    tone: 2
  },
  {
    char: "胃",
    spell: "wèi",
    stroke: "9",
    radical: "田",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄨㄟˋ",
    tradition: "胃",
    sex: "",
    tone: 4
  },
  {
    char: "胆",
    spell: "dǎn",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄉㄢˇ",
    tradition: "膽",
    sex: "",
    tone: 3
  },
  {
    char: "背",
    spell: "bèi",
    stroke: "9",
    radical: "",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "背",
    sex: "",
    tone: 4
  },
  {
    char: "胎",
    spell: "tāi",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄞ",
    tradition: "胎",
    sex: "",
    tone: 1
  },
  {
    char: "胖",
    spell: "pàng",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄢˊ",
    tradition: "胖",
    sex: "",
    tone: 4
  },
  {
    char: "胚",
    spell: "pēi",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄟ",
    tradition: "胚",
    sex: "",
    tone: 1
  },
  {
    char: "胜",
    spell: "shèng",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄥˋ",
    tradition: "勝",
    sex: "男",
    tone: 4
  },
  {
    char: "胞",
    spell: "bāo",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠ",
    tradition: "胞",
    sex: "",
    tone: 1
  },
  {
    char: "胡",
    spell: "hú",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "鬍",
    sex: "",
    tone: 2
  },
  {
    char: "胧",
    spell: "lóng",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄥˊ",
    tradition: "朧",
    sex: "",
    tone: 2
  },
  {
    char: "胯",
    spell: "kuà",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄚˋ",
    tradition: "胯",
    sex: "",
    tone: 4
  },
  {
    char: "胰",
    spell: "yí",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧˊ",
    tradition: "胰",
    sex: "",
    tone: 2
  },
  {
    char: "胳",
    spell: "gē",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "胳",
    sex: "",
    tone: 1
  },
  {
    char: "胶",
    spell: "jiāo",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄠ",
    tradition: "膠",
    sex: "",
    tone: 1
  },
  {
    char: "胸",
    spell: "xiōng",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄥ",
    tradition: "胸",
    sex: "",
    tone: 1
  },
  {
    char: "能",
    spell: "néng",
    stroke: "10",
    radical: "厶",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄋㄥˊ",
    tradition: "能",
    sex: "",
    tone: 2
  },
  {
    char: "脂",
    spell: "zhī",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓ",
    tradition: "脂",
    sex: "",
    tone: 1
  },
  {
    char: "脆",
    spell: "cuì",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄟˋ",
    tradition: "脆",
    sex: "",
    tone: 4
  },
  {
    char: "脉",
    spell: "mài",
    stroke: "9",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄞˋ",
    tradition: "脉",
    sex: "",
    tone: 4
  },
  {
    char: "脊",
    spell: "jǐ",
    stroke: "10",
    radical: "月",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˇ",
    tradition: "脊",
    sex: "",
    tone: 3
  },
  {
    char: "脏",
    spell: "zāng",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄤˋ",
    tradition: "臟、髒",
    sex: "",
    tone: 1
  },
  {
    char: "脐",
    spell: "qí",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄑㄧˊ",
    tradition: "臍",
    sex: "",
    tone: 2
  },
  {
    char: "脑",
    spell: "nǎo",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄠˇ",
    tradition: "腦",
    sex: "",
    tone: 3
  },
  {
    char: "脓",
    spell: "nóng",
    stroke: "10",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄋㄨㄥˊ",
    tradition: "膿",
    sex: "",
    tone: 2
  },
  {
    char: "脖",
    spell: "bó",
    stroke: "11",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "脖",
    sex: "",
    tone: 2
  },
  {
    char: "脚",
    spell: "jiǎo",
    stroke: "11",
    radical: "月",
    struct: "左中右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄠˇ",
    tradition: "腳",
    sex: "",
    tone: 3
  },
  {
    char: "脯",
    spell: "pú",
    stroke: "11",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "脯",
    sex: "",
    tone: 2
  },
  {
    char: "脱",
    spell: "tuō",
    stroke: "11",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛ",
    tradition: "脱",
    sex: "",
    tone: 1
  },
  {
    char: "脸",
    spell: "liǎn",
    stroke: "11",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄢˇ",
    tradition: "臉",
    sex: "",
    tone: 3
  },
  {
    char: "脾",
    spell: "pí",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧˊ",
    tradition: "脾",
    sex: "",
    tone: 2
  },
  {
    char: "腊",
    spell: "là",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˋ",
    tradition: "臘",
    sex: "",
    tone: 4
  },
  {
    char: "腋",
    spell: "yè",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄝˋ",
    tradition: "腋",
    sex: "",
    tone: 4
  },
  {
    char: "腌",
    spell: "yān",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄚ",
    tradition: "腌",
    sex: "",
    tone: 1
  },
  {
    char: "腐",
    spell: "fǔ",
    stroke: "14",
    radical: "广",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "腐",
    sex: "",
    tone: 3
  },
  {
    char: "腔",
    spell: "qiāng",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄑㄧㄤ",
    tradition: "腔",
    sex: "",
    tone: 1
  },
  {
    char: "腕",
    spell: "wàn",
    stroke: "12",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄢˋ",
    tradition: "腕",
    sex: "",
    tone: 4
  },
  {
    char: "腥",
    spell: "xīng",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄥ",
    tradition: "腥",
    sex: "",
    tone: 1
  },
  {
    char: "腮",
    spell: "sāi",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄞ",
    tradition: "腮",
    sex: "",
    tone: 1
  },
  {
    char: "腰",
    spell: "yāo",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠ",
    tradition: "腰",
    sex: "",
    tone: 1
  },
  {
    char: "腹",
    spell: "fù",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "腹",
    sex: "",
    tone: 4
  },
  {
    char: "腺",
    spell: "xiàn",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "腺",
    sex: "",
    tone: 4
  },
  {
    char: "腻",
    spell: "nì",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄋㄧˋ",
    tradition: "膩",
    sex: "",
    tone: 4
  },
  {
    char: "腾",
    spell: "téng",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄥˊ",
    tradition: "騰",
    sex: "男",
    tone: 2
  },
  {
    char: "腿",
    spell: "tuǐ",
    stroke: "13",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄟˇ",
    tradition: "腿",
    sex: "",
    tone: 3
  },
  {
    char: "膀",
    spell: "bǎng",
    stroke: "14",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "膀",
    sex: "",
    tone: 2
  },
  {
    char: "膊",
    spell: "bó",
    stroke: "14",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "膊",
    sex: "",
    tone: 2
  },
  {
    char: "膏",
    spell: "gāo",
    stroke: "14",
    radical: "月",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄠˋ",
    tradition: "膏",
    sex: "",
    tone: 1
  },
  {
    char: "膘",
    spell: "biāo",
    stroke: "15",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄠ",
    tradition: "膘",
    sex: "",
    tone: 1
  },
  {
    char: "膛",
    spell: "táng",
    stroke: "15",
    radical: "月",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˊ",
    tradition: "膛",
    sex: "",
    tone: 2
  },
  {
    char: "膜",
    spell: "mó",
    stroke: "14",
    radical: "月",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "膜",
    sex: "",
    tone: 2
  },
  {
    char: "膝",
    spell: "xī",
    stroke: "15",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "膝",
    sex: "",
    tone: 1
  },
  {
    char: "膨",
    spell: "péng",
    stroke: "16",
    radical: "月",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "膨",
    sex: "",
    tone: 2
  },
  {
    char: "膳",
    spell: "shàn",
    stroke: "16",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢˋ",
    tradition: "膳",
    sex: "",
    tone: 4
  },
  {
    char: "臀",
    spell: "tún",
    stroke: "17",
    radical: "月",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄨㄣˊ",
    tradition: "臀",
    sex: "",
    tone: 2
  },
  {
    char: "臂",
    spell: "bì",
    stroke: "17",
    radical: "月",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "臂",
    sex: "",
    tone: 4
  },
  {
    char: "臊",
    spell: "sào",
    stroke: "17",
    radical: "月",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄠˋ",
    tradition: "臊",
    sex: "",
    tone: 4
  },
  {
    char: "臣",
    spell: "chén",
    stroke: "6",
    radical: "臣",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄣˊ",
    tradition: "臣",
    sex: "",
    tone: 2
  },
  {
    char: "自",
    spell: "zì",
    stroke: "6",
    radical: "自",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄗˋ",
    tradition: "自",
    sex: "女",
    tone: 4
  },
  {
    char: "臭",
    spell: "chòu",
    stroke: "10",
    radical: "自",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄡˋ",
    tradition: "臭",
    sex: "",
    tone: 4
  },
  {
    char: "至",
    spell: "zhì",
    stroke: "6",
    radical: "至",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓˋ",
    tradition: "至",
    sex: "",
    tone: 4
  },
  {
    char: "致",
    spell: "zhì",
    stroke: "10",
    radical: "至",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓˋ",
    tradition: "緻",
    sex: "男",
    tone: 4
  },
  {
    char: "臼",
    spell: "jiù",
    stroke: "6",
    radical: "臼",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄡˋ",
    tradition: "臼",
    sex: "",
    tone: 4
  },
  {
    char: "舀",
    spell: "yǎo",
    stroke: "10",
    radical: "爫",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄧㄠˇ",
    tradition: "舀",
    sex: "",
    tone: 3
  },
  {
    char: "舅",
    spell: "jiù",
    stroke: "13",
    radical: "臼",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄡˋ",
    tradition: "舅",
    sex: "",
    tone: 4
  },
  {
    char: "舆",
    spell: "yú",
    stroke: "14",
    radical: "八",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "輿",
    sex: "",
    tone: 2
  },
  {
    char: "舌",
    spell: "shé",
    stroke: "6",
    radical: "舌",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄜˊ",
    tradition: "舌",
    sex: "",
    tone: 2
  },
  {
    char: "舍",
    spell: "shè",
    stroke: "8",
    radical: "人",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄜˋ",
    tradition: "捨",
    sex: "",
    tone: 4
  },
  {
    char: "舒",
    spell: "shū",
    stroke: "12",
    radical: "人",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄕㄨ",
    tradition: "舒",
    sex: "女",
    tone: 1
  },
  {
    char: "舔",
    spell: "tiǎn",
    stroke: "14",
    radical: "舌",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄢˇ",
    tradition: "舔",
    sex: "",
    tone: 3
  },
  {
    char: "舞",
    spell: "wǔ",
    stroke: "14",
    radical: "夕",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄨˇ",
    tradition: "舞",
    sex: "",
    tone: 3
  },
  {
    char: "舟",
    spell: "zhōu",
    stroke: "6",
    radical: "舟",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄓㄡ",
    tradition: "舟",
    sex: "",
    tone: 1
  },
  {
    char: "航",
    spell: "háng",
    stroke: "10",
    radical: "舟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄤˊ",
    tradition: "航",
    sex: "男",
    tone: 2
  },
  {
    char: "般",
    spell: "bān",
    stroke: "10",
    radical: "舟",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄢ",
    tradition: "般",
    sex: "",
    tone: 1
  },
  {
    char: "舰",
    spell: "jiàn",
    stroke: "10",
    radical: "舟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "艦",
    sex: "",
    tone: 4
  },
  {
    char: "舱",
    spell: "cāng",
    stroke: "10",
    radical: "舟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄤ",
    tradition: "艙",
    sex: "",
    tone: 1
  },
  {
    char: "舵",
    spell: "duò",
    stroke: "11",
    radical: "舟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄛˇ",
    tradition: "舵",
    sex: "",
    tone: 4
  },
  {
    char: "舶",
    spell: "bó",
    stroke: "11",
    radical: "舟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "舶",
    sex: "",
    tone: 2
  },
  {
    char: "舷",
    spell: "xián",
    stroke: "11",
    radical: "舟",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄢˊ",
    tradition: "舷",
    sex: "",
    tone: 2
  },
  {
    char: "船",
    spell: "chuán",
    stroke: "11",
    radical: "舟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄢˊ",
    tradition: "船",
    sex: "",
    tone: 2
  },
  {
    char: "艇",
    spell: "tǐng",
    stroke: "12",
    radical: "舟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˇ",
    tradition: "艇",
    sex: "",
    tone: 3
  },
  {
    char: "艘",
    spell: "sōu",
    stroke: "15",
    radical: "舟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄡ",
    tradition: "艘",
    sex: "",
    tone: 1
  },
  {
    char: "良",
    spell: "liáng",
    stroke: "7",
    radical: "丶",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄤˊ",
    tradition: "良",
    sex: "男",
    tone: 2
  },
  {
    char: "艰",
    spell: "jiān",
    stroke: "8",
    radical: "又",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢ",
    tradition: "艱",
    sex: "",
    tone: 1
  },
  {
    char: "色",
    spell: "sè",
    stroke: "6",
    radical: "色",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄜˋ",
    tradition: "色",
    sex: "",
    tone: 4
  },
  {
    char: "艳",
    spell: "yàn",
    stroke: "10",
    radical: "色",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄢˋ",
    tradition: "艷",
    sex: "女",
    tone: 4
  },
  {
    char: "艺",
    spell: "yì",
    stroke: "4",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "藝",
    sex: "女",
    tone: 4
  },
  {
    char: "艾",
    spell: "ài",
    stroke: "",
    radical: "艹",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄞˋ",
    tradition: "艾",
    sex: "",
    tone: 4
  },
  {
    char: "节",
    spell: "jié",
    stroke: "5",
    radical: "艹",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄝˊ",
    tradition: "節",
    sex: "",
    tone: 2
  },
  {
    char: "芋",
    spell: "yù",
    stroke: "6",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "芋",
    sex: "",
    tone: 4
  },
  {
    char: "芍",
    spell: "sháo",
    stroke: "6",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄝˋ",
    tradition: "芍",
    sex: "",
    tone: 2
  },
  {
    char: "芒",
    spell: "máng",
    stroke: "6",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄤˊ",
    tradition: "芒",
    sex: "",
    tone: 2
  },
  {
    char: "芙",
    spell: "fú",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "芙",
    sex: "",
    tone: 2
  },
  {
    char: "芜",
    spell: "wú",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄨˊ",
    tradition: "蕪",
    sex: "",
    tone: 2
  },
  {
    char: "芝",
    spell: "zhī",
    stroke: "6",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓ",
    tradition: "芝",
    sex: "女",
    tone: 1
  },
  {
    char: "芥",
    spell: "jiè",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄞˋ",
    tradition: "芥",
    sex: "",
    tone: 4
  },
  {
    char: "芦",
    spell: "lú",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄩˊ",
    tradition: "蘆",
    sex: "",
    tone: 2
  },
  {
    char: "芬",
    spell: "fēn",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄣ",
    tradition: "芬",
    sex: "女",
    tone: 1
  },
  {
    char: "芭",
    spell: "bā",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄚ",
    tradition: "芭",
    sex: "",
    tone: 1
  },
  {
    char: "芯",
    spell: "xīn",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄣˋ",
    tradition: "芯",
    sex: "",
    tone: 1
  },
  {
    char: "花",
    spell: "huā",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄚ",
    tradition: "花",
    sex: "",
    tone: 1
  },
  {
    char: "芳",
    spell: "fāng",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄤ",
    tradition: "芳",
    sex: "女",
    tone: 1
  },
  {
    char: "芹",
    spell: "qín",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄣˊ",
    tradition: "芹",
    sex: "",
    tone: 2
  },
  {
    char: "芽",
    spell: "yá",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄚˊ",
    tradition: "芽",
    sex: "",
    tone: 2
  },
  {
    char: "苇",
    spell: "wěi",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˇ",
    tradition: "葦",
    sex: "",
    tone: 3
  },
  {
    char: "苍",
    spell: "cāng",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄤ",
    tradition: "蒼",
    sex: "",
    tone: 1
  },
  {
    char: "苏",
    spell: "sū",
    stroke: "7",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄙㄨ",
    tradition: "蘇、囌",
    sex: "",
    tone: 1
  },
  {
    char: "苔",
    spell: "tái",
    stroke: "8",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄞˊ",
    tradition: "苔",
    sex: "",
    tone: 2
  },
  {
    char: "苗",
    spell: "miáo",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧㄠˊ",
    tradition: "苗",
    sex: "",
    tone: 2
  },
  {
    char: "苛",
    spell: "kē",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜ",
    tradition: "苛",
    sex: "",
    tone: 1
  },
  {
    char: "苞",
    spell: "bāo",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄠ",
    tradition: "苞",
    sex: "",
    tone: 1
  },
  {
    char: "苟",
    spell: "gǒu",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄡˇ",
    tradition: "苟",
    sex: "",
    tone: 3
  },
  {
    char: "若",
    spell: "ruò",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄖㄜˇ",
    tradition: "若",
    sex: "男",
    tone: 4
  },
  {
    char: "苦",
    spell: "kǔ",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˇ",
    tradition: "苦",
    sex: "",
    tone: 3
  },
  {
    char: "苫",
    spell: "shān",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄢˋ",
    tradition: "苫",
    sex: "",
    tone: 1
  },
  {
    char: "英",
    spell: "yīng",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "英",
    sex: "女",
    tone: 1
  },
  {
    char: "苹",
    spell: "píng",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄧㄥˊ",
    tradition: "蘋",
    sex: "",
    tone: 2
  },
  {
    char: "茁",
    spell: "zhuó",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨㄛˊ",
    tradition: "茁",
    sex: "",
    tone: 2
  },
  {
    char: "茂",
    spell: "mào",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄠˋ",
    tradition: "茂",
    sex: "男",
    tone: 4
  },
  {
    char: "范",
    spell: "fàn",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˋ",
    tradition: "範",
    sex: "",
    tone: 4
  },
  {
    char: "茄",
    spell: "qié",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚ",
    tradition: "茄",
    sex: "",
    tone: 2
  },
  {
    char: "茅",
    spell: "máo",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄠˊ",
    tradition: "茅",
    sex: "",
    tone: 2
  },
  {
    char: "茉",
    spell: "mò",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "茉",
    sex: "",
    tone: 4
  },
  {
    char: "茎",
    spell: "jīng",
    stroke: "8",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥ",
    tradition: "莖",
    sex: "",
    tone: 1
  },
  {
    char: "茧",
    spell: "jiǎn",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˇ",
    tradition: "繭",
    sex: "",
    tone: 3
  },
  {
    char: "茫",
    spell: "máng",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄤˊ",
    tradition: "茫",
    sex: "",
    tone: 2
  },
  {
    char: "茬",
    spell: "chá",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄚˊ",
    tradition: "茬",
    sex: "",
    tone: 2
  },
  {
    char: "茴",
    spell: "huí",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄟˊ",
    tradition: "茴",
    sex: "",
    tone: 2
  },
  {
    char: "茵",
    spell: "yīn",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄣ",
    tradition: "茵",
    sex: "",
    tone: 1
  },
  {
    char: "茶",
    spell: "chá",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄔㄚˊ",
    tradition: "茶",
    sex: "",
    tone: 2
  },
  {
    char: "茸",
    spell: "róng",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "茸",
    sex: "",
    tone: 2
  },
  {
    char: "荆",
    spell: "jīng",
    stroke: "9",
    radical: "刂",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄥ",
    tradition: "荆",
    sex: "",
    tone: 1
  },
  {
    char: "草",
    spell: "cǎo",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄠˇ",
    tradition: "草",
    sex: "",
    tone: 3
  },
  {
    char: "荐",
    spell: "jiàn",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "薦",
    sex: "",
    tone: 4
  },
  {
    char: "荒",
    spell: "huāng",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄤ",
    tradition: "荒",
    sex: "",
    tone: 1
  },
  {
    char: "荔",
    spell: "lì",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "荔",
    sex: "女",
    tone: 4
  },
  {
    char: "荚",
    spell: "jiá",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˊ",
    tradition: "莢",
    sex: "",
    tone: 2
  },
  {
    char: "荞",
    spell: "qiáo",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠˊ",
    tradition: "蕎",
    sex: "",
    tone: 2
  },
  {
    char: "荠",
    spell: "qí",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "薺",
    sex: "",
    tone: 2
  },
  {
    char: "荡",
    spell: "dàng",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄉㄤˋ",
    tradition: "蕩",
    sex: "",
    tone: 4
  },
  {
    char: "荣",
    spell: "róng",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "榮",
    sex: "女",
    tone: 2
  },
  {
    char: "荤",
    spell: "hūn",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄣ",
    tradition: "葷",
    sex: "",
    tone: 1
  },
  {
    char: "荧",
    spell: "yíng",
    stroke: "9",
    radical: "艹",
    struct: "上中下结构",
    five: "火",
    method: "会意",
    mark: "ㄧㄥˊ",
    tradition: "熒",
    sex: "",
    tone: 2
  },
  {
    char: "药",
    spell: "yào",
    stroke: "9",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄠˋ",
    tradition: "藥",
    sex: "",
    tone: 4
  },
  {
    char: "荷",
    spell: "hé",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄜˊ",
    tradition: "荷",
    sex: "女",
    tone: 2
  },
  {
    char: "荸",
    spell: "bí",
    stroke: "10",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄧˊ",
    tradition: "荸",
    sex: "",
    tone: 2
  },
  {
    char: "莉",
    spell: "lì",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "莉",
    sex: "女",
    tone: 4
  },
  {
    char: "莫",
    spell: "mò",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄛˋ",
    tradition: "莫",
    sex: "",
    tone: 4
  },
  {
    char: "莱",
    spell: "lái",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄞ",
    tradition: "萊",
    sex: "",
    tone: 2
  },
  {
    char: "莲",
    spell: "lián",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄢˊ",
    tradition: "蓮",
    sex: "女",
    tone: 2
  },
  {
    char: "获",
    spell: "huò",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄏㄨㄛˋ",
    tradition: "獲、穫",
    sex: "",
    tone: 4
  },
  {
    char: "莹",
    spell: "yíng",
    stroke: "10",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "瑩",
    sex: "",
    tone: 2
  },
  {
    char: "莺",
    spell: "yīng",
    stroke: "10",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "鶯",
    sex: "女",
    tone: 1
  },
  {
    char: "莽",
    spell: "mǎng",
    stroke: "10",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄇㄤˇ",
    tradition: "莽",
    sex: "",
    tone: 3
  },
  {
    char: "菇",
    spell: "gū",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "菇",
    sex: "",
    tone: 1
  },
  {
    char: "菊",
    spell: "jú",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˊ",
    tradition: "菊",
    sex: "女",
    tone: 2
  },
  {
    char: "菌",
    spell: "jūn",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩㄣˋ",
    tradition: "菌",
    sex: "",
    tone: 1
  },
  {
    char: "菜",
    spell: "cài",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄞˋ",
    tradition: "菜",
    sex: "",
    tone: 4
  },
  {
    char: "菠",
    spell: "bō",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛ",
    tradition: "菠",
    sex: "",
    tone: 1
  },
  {
    char: "菩",
    spell: "pú",
    stroke: "11",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄨˊ",
    tradition: "菩",
    sex: "",
    tone: 2
  },
  {
    char: "菱",
    spell: "líng",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "菱",
    sex: "",
    tone: 2
  },
  {
    char: "菲",
    spell: "fēi",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄈㄟˇ",
    tradition: "菲",
    sex: "女",
    tone: 1
  },
  {
    char: "萄",
    spell: "táo",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄠˊ",
    tradition: "萄",
    sex: "",
    tone: 2
  },
  {
    char: "萌",
    spell: "méng",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄥˊ",
    tradition: "萌",
    sex: "",
    tone: 2
  },
  {
    char: "萍",
    spell: "píng",
    stroke: "11",
    radical: "艹",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄥˊ",
    tradition: "萍",
    sex: "女",
    tone: 2
  },
  {
    char: "萎",
    spell: "wěi",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˇ",
    tradition: "萎",
    sex: "",
    tone: 3
  },
  {
    char: "萝",
    spell: "luó",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "蘿",
    sex: "",
    tone: 2
  },
  {
    char: "萤",
    spell: "yíng",
    stroke: "11",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "螢",
    sex: "",
    tone: 2
  },
  {
    char: "营",
    spell: "yíng",
    stroke: "11",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "營",
    sex: "",
    tone: 2
  },
  {
    char: "萧",
    spell: "xiāo",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "蕭",
    sex: "",
    tone: 1
  },
  {
    char: "萨",
    spell: "sà",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄚˋ",
    tradition: "薩",
    sex: "",
    tone: 4
  },
  {
    char: "落",
    spell: "là",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄚˋ",
    tradition: "落",
    sex: "",
    tone: 4
  },
  {
    char: "著",
    spell: "zhù",
    stroke: "11",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "著",
    sex: "",
    tone: 4
  },
  {
    char: "葛",
    spell: "gě",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "葛",
    sex: "",
    tone: 3
  },
  {
    char: "葡",
    spell: "pú",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄨˊ",
    tradition: "葡",
    sex: "",
    tone: 2
  },
  {
    char: "董",
    spell: "dǒng",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄥˇ",
    tradition: "董",
    sex: "",
    tone: 3
  },
  {
    char: "葫",
    spell: "hú",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "葫",
    sex: "",
    tone: 2
  },
  {
    char: "葬",
    spell: "zàng",
    stroke: "12",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄗㄤˋ",
    tradition: "葬",
    sex: "",
    tone: 4
  },
  {
    char: "葱",
    spell: "cōng",
    stroke: "12",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄨㄥ",
    tradition: "葱",
    sex: "",
    tone: 1
  },
  {
    char: "葵",
    spell: "kuí",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟˊ",
    tradition: "葵",
    sex: "",
    tone: 2
  },
  {
    char: "蒂",
    spell: "dì",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄧˋ",
    tradition: "蒂",
    sex: "",
    tone: 4
  },
  {
    char: "蒋",
    spell: "jiǎng",
    stroke: "12",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤˇ",
    tradition: "蔣",
    sex: "",
    tone: 3
  },
  {
    char: "蒙",
    spell: "méng",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄥˊ",
    tradition: "濛、懞、矇",
    sex: "",
    tone: 2
  },
  {
    char: "蒜",
    spell: "suàn",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄨㄢˋ",
    tradition: "蒜",
    sex: "",
    tone: 4
  },
  {
    char: "蒲",
    spell: "pú",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄨˊ",
    tradition: "蒲",
    sex: "",
    tone: 2
  },
  {
    char: "蒸",
    spell: "zhēng",
    stroke: "13",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄥ",
    tradition: "蒸",
    sex: "",
    tone: 1
  },
  {
    char: "蒿",
    spell: "hāo",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄠ",
    tradition: "蒿",
    sex: "",
    tone: 1
  },
  {
    char: "蓄",
    spell: "xù",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "蓄",
    sex: "",
    tone: 4
  },
  {
    char: "蓉",
    spell: "róng",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "蓉",
    sex: "女",
    tone: 2
  },
  {
    char: "蓖",
    spell: "bì",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "蓖",
    sex: "",
    tone: 4
  },
  {
    char: "蓝",
    spell: "lán",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄢˊ",
    tradition: "藍",
    sex: "",
    tone: 2
  },
  {
    char: "蓬",
    spell: "péng",
    stroke: "13",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "蓬",
    sex: "",
    tone: 2
  },
  {
    char: "蔑",
    spell: "miè",
    stroke: "14",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "会意",
    mark: "ㄇㄧㄝˋ",
    tradition: "衊",
    sex: "",
    tone: 4
  },
  {
    char: "蔓",
    spell: "màn",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄢˊ",
    tradition: "蔓",
    sex: "",
    tone: 4
  },
  {
    char: "蔗",
    spell: "zhè",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄓㄜˋ",
    tradition: "蔗",
    sex: "",
    tone: 4
  },
  {
    char: "蔚",
    spell: "wèi",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "蔚",
    sex: "",
    tone: 4
  },
  {
    char: "蔫",
    spell: "niān",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧㄢ",
    tradition: "蔫",
    sex: "",
    tone: 1
  },
  {
    char: "蔬",
    spell: "shū",
    stroke: "15",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "蔬",
    sex: "",
    tone: 1
  },
  {
    char: "蔼",
    spell: "ǎi",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄞˇ",
    tradition: "藹",
    sex: "",
    tone: 3
  },
  {
    char: "蔽",
    spell: "bì",
    stroke: "14",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "蔽",
    sex: "",
    tone: 4
  },
  {
    char: "蕉",
    spell: "jiāo",
    stroke: "15",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "蕉",
    sex: "",
    tone: 1
  },
  {
    char: "蕊",
    spell: "ruǐ",
    stroke: "15",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄨㄟˇ",
    tradition: "蕊",
    sex: "女",
    tone: 3
  },
  {
    char: "蕴",
    spell: "yùn",
    stroke: "15",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄩㄣˋ",
    tradition: "蘊",
    sex: "",
    tone: 4
  },
  {
    char: "蕾",
    spell: "lěi",
    stroke: "16",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄌㄟˇ",
    tradition: "蕾",
    sex: "女",
    tone: 3
  },
  {
    char: "薄",
    spell: "báo",
    stroke: "16",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˊ",
    tradition: "薄",
    sex: "",
    tone: 2
  },
  {
    char: "薇",
    spell: "wēi",
    stroke: "16",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄨㄟ",
    tradition: "薇",
    sex: "女",
    tone: 1
  },
  {
    char: "薛",
    spell: "xuē",
    stroke: "16",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩㄝ",
    tradition: "薛",
    sex: "",
    tone: 1
  },
  {
    char: "薪",
    spell: "xīn",
    stroke: "16",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄣ",
    tradition: "薪",
    sex: "",
    tone: 1
  },
  {
    char: "薯",
    spell: "shǔ",
    stroke: "16",
    radical: "艹",
    struct: "上中下结构",
    five: "木",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "薯",
    sex: "",
    tone: 3
  },
  {
    char: "藏",
    spell: "cáng",
    stroke: "17",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄘㄤˊ",
    tradition: "藏",
    sex: "",
    tone: 2
  },
  {
    char: "藐",
    spell: "miǎo",
    stroke: "17",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄧㄠˇ",
    tradition: "藐",
    sex: "",
    tone: 3
  },
  {
    char: "藕",
    spell: "ǒu",
    stroke: "18",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄡˇ",
    tradition: "藕",
    sex: "",
    tone: 3
  },
  {
    char: "藤",
    spell: "téng",
    stroke: "18",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄊㄥˊ",
    tradition: "藤",
    sex: "",
    tone: 2
  },
  {
    char: "藻",
    spell: "zǎo",
    stroke: "19",
    radical: "艹",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄗㄠˇ",
    tradition: "藻",
    sex: "",
    tone: 3
  },
  {
    char: "蘑",
    spell: "mó",
    stroke: "19",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "蘑",
    sex: "",
    tone: 2
  },
  {
    char: "蘸",
    spell: "zhàn",
    stroke: "22",
    radical: "艹",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "",
    tradition: "蘸",
    sex: "",
    tone: 4
  },
  {
    char: "虎",
    spell: "hǔ",
    stroke: "8",
    radical: "虎",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄏㄨˋ",
    tradition: "虎",
    sex: "",
    tone: 3
  },
  {
    char: "虏",
    spell: "lǔ",
    stroke: "8",
    radical: "虍",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˇ",
    tradition: "虜",
    sex: "",
    tone: 3
  },
  {
    char: "虐",
    spell: "nüè",
    stroke: "9",
    radical: "虍",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄋㄩㄝˋ",
    tradition: "虐",
    sex: "",
    tone: 4
  },
  {
    char: "虑",
    spell: "lǜ",
    stroke: "10",
    radical: "虍",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˋ",
    tradition: "慮",
    sex: "",
    tone: 4
  },
  {
    char: "虚",
    spell: "xū",
    stroke: "11",
    radical: "虍",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩ",
    tradition: "虚",
    sex: "",
    tone: 1
  },
  {
    char: "虫",
    spell: "chóng",
    stroke: "6",
    radical: "虫",
    struct: "独体结构",
    five: "火",
    method: "会意",
    mark: "ㄔㄨㄥˊ",
    tradition: "蟲",
    sex: "",
    tone: 2
  },
  {
    char: "虱",
    spell: "shī",
    stroke: "8",
    radical: "虫",
    struct: "半包围结构",
    five: "",
    method: "会意",
    mark: "ㄕ",
    tradition: "虱",
    sex: "",
    tone: 1
  },
  {
    char: "虹",
    spell: "hóng",
    stroke: "9",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄥˊ",
    tradition: "虹",
    sex: "",
    tone: 2
  },
  {
    char: "虽",
    spell: "suī",
    stroke: "9",
    radical: "口",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄙㄨㄟ",
    tradition: "雖",
    sex: "",
    tone: 1
  },
  {
    char: "虾",
    spell: "xiā",
    stroke: "9",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄚˊ",
    tradition: "蝦",
    sex: "",
    tone: 1
  },
  {
    char: "蚀",
    spell: "shí",
    stroke: "9",
    radical: "饣",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕˊ",
    tradition: "蝕",
    sex: "",
    tone: 2
  },
  {
    char: "蚁",
    spell: "yǐ",
    stroke: "9",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˇ",
    tradition: "蟻",
    sex: "",
    tone: 3
  },
  {
    char: "蚂",
    spell: "mǎ",
    stroke: "9",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚˋ",
    tradition: "螞",
    sex: "",
    tone: 3
  },
  {
    char: "蚊",
    spell: "wén",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄣˊ",
    tradition: "蚊",
    sex: "",
    tone: 2
  },
  {
    char: "蚌",
    spell: "bàng",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "蚌",
    sex: "",
    tone: 4
  },
  {
    char: "蚓",
    spell: "yǐn",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄣˇ",
    tradition: "蚓",
    sex: "",
    tone: 3
  },
  {
    char: "蚕",
    spell: "cán",
    stroke: "10",
    radical: "虫",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢˊ",
    tradition: "蠶",
    sex: "",
    tone: 2
  },
  {
    char: "蚜",
    spell: "yá",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚˊ",
    tradition: "蚜",
    sex: "",
    tone: 2
  },
  {
    char: "蚣",
    spell: "gōng",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "蚣",
    sex: "",
    tone: 1
  },
  {
    char: "蚤",
    spell: "zǎo",
    stroke: "9",
    radical: "虫",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠˇ",
    tradition: "蚤",
    sex: "",
    tone: 3
  },
  {
    char: "蚪",
    spell: "dǒu",
    stroke: "10",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˇ",
    tradition: "蚪",
    sex: "",
    tone: 3
  },
  {
    char: "蚯",
    spell: "qiū",
    stroke: "11",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄡ",
    tradition: "蚯",
    sex: "",
    tone: 1
  },
  {
    char: "蛀",
    spell: "zhù",
    stroke: "11",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "蛀",
    sex: "",
    tone: 4
  },
  {
    char: "蛆",
    spell: "qū",
    stroke: "11",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩ",
    tradition: "蛆",
    sex: "",
    tone: 1
  },
  {
    char: "蛇",
    spell: "shé",
    stroke: "11",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄜˊ",
    tradition: "蛇",
    sex: "",
    tone: 2
  },
  {
    char: "蛉",
    spell: "líng",
    stroke: "11",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄥˊ",
    tradition: "蛉",
    sex: "",
    tone: 2
  },
  {
    char: "蛋",
    spell: "dàn",
    stroke: "11",
    radical: "疋",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄉㄢˋ",
    tradition: "蛋",
    sex: "",
    tone: 4
  },
  {
    char: "蛔",
    spell: "huí",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˊ",
    tradition: "蛔",
    sex: "",
    tone: 2
  },
  {
    char: "蛙",
    spell: "wā",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄚ",
    tradition: "蛙",
    sex: "",
    tone: 1
  },
  {
    char: "蛛",
    spell: "zhū",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨ",
    tradition: "蛛",
    sex: "",
    tone: 1
  },
  {
    char: "蛤",
    spell: "gé",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "蛤",
    sex: "",
    tone: 2
  },
  {
    char: "蛮",
    spell: "mán",
    stroke: "12",
    radical: "虫",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄇㄢˊ",
    tradition: "蠻",
    sex: "",
    tone: 2
  },
  {
    char: "蛹",
    spell: "yǒng",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥˇ",
    tradition: "蛹",
    sex: "",
    tone: 3
  },
  {
    char: "蛾",
    spell: "é",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "蛾",
    sex: "",
    tone: 2
  },
  {
    char: "蜀",
    spell: "shǔ",
    stroke: "13",
    radical: "虫",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "蜀",
    sex: "",
    tone: 3
  },
  {
    char: "蜂",
    spell: "fēng",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥ",
    tradition: "蜂",
    sex: "",
    tone: 1
  },
  {
    char: "蜈",
    spell: "wú",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˊ",
    tradition: "蜈",
    sex: "",
    tone: 2
  },
  {
    char: "蜒",
    spell: "yán",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "蜒",
    sex: "",
    tone: 2
  },
  {
    char: "蜓",
    spell: "tíng",
    stroke: "12",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄥˊ",
    tradition: "蜓",
    sex: "",
    tone: 2
  },
  {
    char: "蜕",
    spell: "tuì",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄟˋ",
    tradition: "蜕",
    sex: "",
    tone: 4
  },
  {
    char: "蜗",
    spell: "wō",
    stroke: "13",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄛ",
    tradition: "蝸",
    sex: "",
    tone: 1
  },
  {
    char: "蜘",
    spell: "zhī",
    stroke: "14",
    radical: "虫",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄓ",
    tradition: "蜘",
    sex: "",
    tone: 1
  },
  {
    char: "蜜",
    spell: "mì",
    stroke: "14",
    radical: "宀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˋ",
    tradition: "蜜",
    sex: "",
    tone: 4
  },
  {
    char: "蜡",
    spell: "là",
    stroke: "14",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˋ",
    tradition: "蠟",
    sex: "",
    tone: 4
  },
  {
    char: "蜻",
    spell: "qīng",
    stroke: "14",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄥ",
    tradition: "蜻",
    sex: "",
    tone: 1
  },
  {
    char: "蝇",
    spell: "yíng",
    stroke: "14",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "蠅",
    sex: "",
    tone: 2
  },
  {
    char: "蝉",
    spell: "chán",
    stroke: "14",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄢˊ",
    tradition: "蟬",
    sex: "",
    tone: 2
  },
  {
    char: "蝌",
    spell: "kē",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜ",
    tradition: "蝌",
    sex: "",
    tone: 1
  },
  {
    char: "蝎",
    spell: "xiē",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝ",
    tradition: "蝎",
    sex: "",
    tone: 1
  },
  {
    char: "蝗",
    spell: "huáng",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄤˊ",
    tradition: "蝗",
    sex: "",
    tone: 2
  },
  {
    char: "蝙",
    spell: "biān",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢ",
    tradition: "蝙",
    sex: "",
    tone: 1
  },
  {
    char: "蝠",
    spell: "fú",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "蝠",
    sex: "",
    tone: 2
  },
  {
    char: "蝴",
    spell: "hú",
    stroke: "15",
    radical: "虫",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨˊ",
    tradition: "蝴",
    sex: "",
    tone: 2
  },
  {
    char: "蝶",
    spell: "dié",
    stroke: "15",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄝˊ",
    tradition: "蝶",
    sex: "",
    tone: 2
  },
  {
    char: "螃",
    spell: "páng",
    stroke: "16",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄤˊ",
    tradition: "螃",
    sex: "",
    tone: 2
  },
  {
    char: "融",
    spell: "róng",
    stroke: "16",
    radical: "鬲",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄖㄨㄥˊ",
    tradition: "融",
    sex: "女",
    tone: 2
  },
  {
    char: "螟",
    spell: "míng",
    stroke: "16",
    radical: "虫",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧㄥˊ",
    tradition: "螟",
    sex: "",
    tone: 2
  },
  {
    char: "螺",
    spell: "luó",
    stroke: "17",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "螺",
    sex: "",
    tone: 2
  },
  {
    char: "蟀",
    spell: "shuài",
    stroke: "17",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄞˋ",
    tradition: "蟀",
    sex: "",
    tone: 4
  },
  {
    char: "蟆",
    spell: "má",
    stroke: "16",
    radical: "虫",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄇㄚˊ",
    tradition: "蟆",
    sex: "",
    tone: 2
  },
  {
    char: "蟋",
    spell: "xī",
    stroke: "17",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "蟋",
    sex: "",
    tone: 1
  },
  {
    char: "蟹",
    spell: "xiè",
    stroke: "19",
    radical: "虫",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "蟹",
    sex: "",
    tone: 4
  },
  {
    char: "蠕",
    spell: "rú",
    stroke: "20",
    radical: "虫",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨˊ",
    tradition: "蠕",
    sex: "",
    tone: 2
  },
  {
    char: "蠢",
    spell: "chǔn",
    stroke: "21",
    radical: "虫",
    struct: "品字结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄣˇ",
    tradition: "蠢",
    sex: "",
    tone: 3
  },
  {
    char: "血",
    spell: "xuè",
    stroke: "6",
    radical: "血",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄒㄧㄝˇ",
    tradition: "血",
    sex: "",
    tone: 4
  },
  {
    char: "衅",
    spell: "xìn",
    stroke: "11",
    radical: "血",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄣˋ",
    tradition: "釁",
    sex: "",
    tone: 4
  },
  {
    char: "行",
    spell: "háng",
    stroke: "6",
    radical: "彳",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄤˊ",
    tradition: "行",
    sex: "男",
    tone: 2
  },
  {
    char: "衍",
    spell: "yǎn",
    stroke: "9",
    radical: "彳",
    struct: "左中右结构",
    five: "水",
    method: "会意",
    mark: "ㄧㄢˇ",
    tradition: "衍",
    sex: "",
    tone: 3
  },
  {
    char: "衔",
    spell: "xián",
    stroke: "11",
    radical: "彳",
    struct: "左中右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄢˊ",
    tradition: "銜",
    sex: "",
    tone: 2
  },
  {
    char: "街",
    spell: "jiē",
    stroke: "12",
    radical: "彳",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝ",
    tradition: "街",
    sex: "",
    tone: 1
  },
  {
    char: "衙",
    spell: "yá",
    stroke: "13",
    radical: "彳",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚˊ",
    tradition: "衙",
    sex: "",
    tone: 2
  },
  {
    char: "衡",
    spell: "héng",
    stroke: "16",
    radical: "彳",
    struct: "左中右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄥˊ",
    tradition: "衡",
    sex: "",
    tone: 2
  },
  {
    char: "衣",
    spell: "yī",
    stroke: "6",
    radical: "衣",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄧ",
    tradition: "衣",
    sex: "",
    tone: 1
  },
  {
    char: "补",
    spell: "bǔ",
    stroke: "7",
    radical: "衤",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˇ",
    tradition: "補",
    sex: "",
    tone: 3
  },
  {
    char: "表",
    spell: "biǎo",
    stroke: "8",
    radical: "一",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧㄠˇ",
    tradition: "錶",
    sex: "",
    tone: 3
  },
  {
    char: "衩",
    spell: "chà",
    stroke: "8",
    radical: "衤",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄔㄚˋ",
    tradition: "衩",
    sex: "",
    tone: 4
  },
  {
    char: "衫",
    spell: "shān",
    stroke: "8",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢ",
    tradition: "衫",
    sex: "",
    tone: 1
  },
  {
    char: "衬",
    spell: "chèn",
    stroke: "8",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄣˋ",
    tradition: "襯",
    sex: "",
    tone: 4
  },
  {
    char: "衰",
    spell: "shuāi",
    stroke: "10",
    radical: "亠",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄞ",
    tradition: "衰",
    sex: "",
    tone: 1
  },
  {
    char: "衷",
    spell: "zhōng",
    stroke: "10",
    radical: "亠",
    struct: "上中下结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄥ",
    tradition: "衷",
    sex: "",
    tone: 1
  },
  {
    char: "袁",
    spell: "yuán",
    stroke: "10",
    radical: "土",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "袁",
    sex: "",
    tone: 2
  },
  {
    char: "袄",
    spell: "ǎo",
    stroke: "9",
    radical: "衤",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄠˇ",
    tradition: "襖",
    sex: "",
    tone: 3
  },
  {
    char: "袋",
    spell: "dài",
    stroke: "11",
    radical: "衣",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "袋",
    sex: "",
    tone: 4
  },
  {
    char: "袍",
    spell: "páo",
    stroke: "10",
    radical: "衤",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄠˊ",
    tradition: "袍",
    sex: "",
    tone: 2
  },
  {
    char: "袒",
    spell: "tǎn",
    stroke: "10",
    radical: "衤",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˇ",
    tradition: "袒",
    sex: "",
    tone: 3
  },
  {
    char: "袖",
    spell: "xiù",
    stroke: "10",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄡˋ",
    tradition: "袖",
    sex: "",
    tone: 4
  },
  {
    char: "袜",
    spell: "wà",
    stroke: "10",
    radical: "衤",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄇㄛˋ",
    tradition: "襪",
    sex: "",
    tone: 4
  },
  {
    char: "被",
    spell: "bèi",
    stroke: "10",
    radical: "衤",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "被",
    sex: "",
    tone: 4
  },
  {
    char: "袭",
    spell: "xí",
    stroke: "11",
    radical: "龙",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧˊ",
    tradition: "襲",
    sex: "",
    tone: 2
  },
  {
    char: "袱",
    spell: "fú",
    stroke: "11",
    radical: "衤",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "袱",
    sex: "",
    tone: 2
  },
  {
    char: "裁",
    spell: "cái",
    stroke: "12",
    radical: "衣",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞˊ",
    tradition: "裁",
    sex: "",
    tone: 2
  },
  {
    char: "裂",
    spell: "liè",
    stroke: "12",
    radical: "衣",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄝˇ",
    tradition: "裂",
    sex: "",
    tone: 4
  },
  {
    char: "装",
    spell: "zhuāng",
    stroke: "12",
    radical: "衣",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄤ",
    tradition: "裝",
    sex: "",
    tone: 1
  },
  {
    char: "裆",
    spell: "dāng",
    stroke: "11",
    radical: "衤",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄤ",
    tradition: "襠",
    sex: "",
    tone: 1
  },
  {
    char: "裕",
    spell: "yù",
    stroke: "12",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "裕",
    sex: "男",
    tone: 4
  },
  {
    char: "裙",
    spell: "qún",
    stroke: "12",
    radical: "衤",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩㄣˊ",
    tradition: "裙",
    sex: "",
    tone: 2
  },
  {
    char: "裤",
    spell: "kù",
    stroke: "12",
    radical: "衤",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨˋ",
    tradition: "褲",
    sex: "",
    tone: 4
  },
  {
    char: "裳",
    spell: "cháng",
    stroke: "14",
    radical: "衣",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄤˊ",
    tradition: "裳",
    sex: "",
    tone: 2
  },
  {
    char: "裸",
    spell: "luǒ",
    stroke: "13",
    radical: "衤",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄛˇ",
    tradition: "裸",
    sex: "",
    tone: 3
  },
  {
    char: "裹",
    spell: "guǒ",
    stroke: "14",
    radical: "亠",
    struct: "上中下结构",
    five: "火",
    method: "形声",
    mark: "ㄍㄨㄛˇ",
    tradition: "裹",
    sex: "",
    tone: 3
  },
  {
    char: "褂",
    spell: "guà",
    stroke: "13",
    radical: "衤",
    struct: "左中右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄚˋ",
    tradition: "褂",
    sex: "",
    tone: 4
  },
  {
    char: "褐",
    spell: "hè",
    stroke: "14",
    radical: "衤",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˋ",
    tradition: "褐",
    sex: "",
    tone: 4
  },
  {
    char: "褒",
    spell: "bāo",
    stroke: "15",
    radical: "亠",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠ",
    tradition: "褒",
    sex: "",
    tone: 1
  },
  {
    char: "褥",
    spell: "rù",
    stroke: "15",
    radical: "衤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨˋ",
    tradition: "褥",
    sex: "",
    tone: 4
  },
  {
    char: "褪",
    spell: "tùn",
    stroke: "14",
    radical: "衤",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄟˋ",
    tradition: "褪",
    sex: "",
    tone: 4
  },
  {
    char: "襟",
    spell: "jīn",
    stroke: "18",
    radical: "衤",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄣ",
    tradition: "襟",
    sex: "",
    tone: 1
  },
  {
    char: "西",
    spell: "xī",
    stroke: "6",
    radical: "覀",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧ",
    tradition: "西",
    sex: "",
    tone: 1
  },
  {
    char: "要",
    spell: "yào",
    stroke: "9",
    radical: "覀",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄠˋ",
    tradition: "要",
    sex: "",
    tone: 4
  },
  {
    char: "覆",
    spell: "fù",
    stroke: "18",
    radical: "覀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "覆",
    sex: "",
    tone: 4
  },
  {
    char: "见",
    spell: "jiàn",
    stroke: "4",
    radical: "见",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "見",
    sex: "",
    tone: 4
  },
  {
    char: "观",
    spell: "guān",
    stroke: "6",
    radical: "又",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄢˋ",
    tradition: "觀",
    sex: "",
    tone: 1
  },
  {
    char: "规",
    spell: "guī",
    stroke: "8",
    radical: "见",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄟ",
    tradition: "規",
    sex: "",
    tone: 1
  },
  {
    char: "觅",
    spell: "mì",
    stroke: "8",
    radical: "爫",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄧˋ",
    tradition: "覓",
    sex: "",
    tone: 4
  },
  {
    char: "视",
    spell: "shì",
    stroke: "8",
    radical: "礻",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄕˋ",
    tradition: "視",
    sex: "",
    tone: 4
  },
  {
    char: "览",
    spell: "lǎn",
    stroke: "9",
    radical: "见",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄢˇ",
    tradition: "覽",
    sex: "",
    tone: 3
  },
  {
    char: "觉",
    spell: "jué",
    stroke: "9",
    radical: "见",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "覺",
    sex: "",
    tone: 2
  },
  {
    char: "角",
    spell: "jiǎo",
    stroke: "7",
    radical: "角",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄠˇ",
    tradition: "角",
    sex: "",
    tone: 3
  },
  {
    char: "解",
    spell: "jiě",
    stroke: "13",
    radical: "角",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄝˋ",
    tradition: "解",
    sex: "",
    tone: 3
  },
  {
    char: "触",
    spell: "chù",
    stroke: "13",
    radical: "角",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˋ",
    tradition: "觸",
    sex: "",
    tone: 4
  },
  {
    char: "言",
    spell: "yán",
    stroke: "7",
    radical: "言",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄧㄢˊ",
    tradition: "言",
    sex: "男",
    tone: 2
  },
  {
    char: "誉",
    spell: "yù",
    stroke: "13",
    radical: "言",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "譽",
    sex: "",
    tone: 4
  },
  {
    char: "誊",
    spell: "téng",
    stroke: "13",
    radical: "言",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄊㄥˊ",
    tradition: "謄",
    sex: "",
    tone: 2
  },
  {
    char: "誓",
    spell: "shì",
    stroke: "14",
    radical: "言",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "誓",
    sex: "",
    tone: 4
  },
  {
    char: "警",
    spell: "jǐng",
    stroke: "19",
    radical: "言",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥˇ",
    tradition: "警",
    sex: "",
    tone: 3
  },
  {
    char: "譬",
    spell: "pì",
    stroke: "20",
    radical: "言",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧˋ",
    tradition: "譬",
    sex: "",
    tone: 4
  },
  {
    char: "计",
    spell: "jì",
    stroke: "4",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄐㄧˋ",
    tradition: "計",
    sex: "",
    tone: 4
  },
  {
    char: "订",
    spell: "dìng",
    stroke: "4",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄥˋ",
    tradition: "釘",
    sex: "",
    tone: 4
  },
  {
    char: "认",
    spell: "rèn",
    stroke: "4",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄣˋ",
    tradition: "認",
    sex: "",
    tone: 4
  },
  {
    char: "讥",
    spell: "jī",
    stroke: "4",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧ",
    tradition: "譏",
    sex: "",
    tone: 1
  },
  {
    char: "讨",
    spell: "tǎo",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄠˇ",
    tradition: "討",
    sex: "",
    tone: 3
  },
  {
    char: "让",
    spell: "ràng",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄖㄤˋ",
    tradition: "讓",
    sex: "",
    tone: 4
  },
  {
    char: "训",
    spell: "xùn",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄒㄩㄣˋ",
    tradition: "訓",
    sex: "",
    tone: 4
  },
  {
    char: "议",
    spell: "yì",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "議",
    sex: "",
    tone: 4
  },
  {
    char: "讯",
    spell: "xùn",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "訊",
    sex: "",
    tone: 4
  },
  {
    char: "记",
    spell: "jì",
    stroke: "5",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "記",
    sex: "",
    tone: 4
  },
  {
    char: "讲",
    spell: "jiǎng",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤˇ",
    tradition: "講",
    sex: "",
    tone: 3
  },
  {
    char: "讳",
    spell: "huì",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "諱",
    sex: "",
    tone: 4
  },
  {
    char: "讶",
    spell: "yà",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚˋ",
    tradition: "訝",
    sex: "",
    tone: 4
  },
  {
    char: "许",
    spell: "xǔ",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩˇ",
    tradition: "許",
    sex: "",
    tone: 3
  },
  {
    char: "讹",
    spell: "é",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "訛",
    sex: "",
    tone: 2
  },
  {
    char: "论",
    spell: "lùn",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩㄣˊ",
    tradition: "論",
    sex: "",
    tone: 4
  },
  {
    char: "讼",
    spell: "sòng",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄥˋ",
    tradition: "訟",
    sex: "",
    tone: 4
  },
  {
    char: "讽",
    spell: "fěng",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥˇ",
    tradition: "諷",
    sex: "",
    tone: 3
  },
  {
    char: "设",
    spell: "shè",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄜˋ",
    tradition: "設",
    sex: "",
    tone: 4
  },
  {
    char: "访",
    spell: "fǎng",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˇ",
    tradition: "訪",
    sex: "女",
    tone: 3
  },
  {
    char: "诀",
    spell: "jué",
    stroke: "6",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄩㄝˊ",
    tradition: "訣",
    sex: "",
    tone: 2
  },
  {
    char: "证",
    spell: "zhèng",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "證",
    sex: "",
    tone: 4
  },
  {
    char: "评",
    spell: "píng",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄥˊ",
    tradition: "評",
    sex: "",
    tone: 2
  },
  {
    char: "诅",
    spell: "zǔ",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨˇ",
    tradition: "詛",
    sex: "",
    tone: 3
  },
  {
    char: "识",
    spell: "shí",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˊ",
    tradition: "識",
    sex: "",
    tone: 2
  },
  {
    char: "诈",
    spell: "zhà",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄚˋ",
    tradition: "詐",
    sex: "",
    tone: 4
  },
  {
    char: "诉",
    spell: "sù",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "訴",
    sex: "",
    tone: 4
  },
  {
    char: "诊",
    spell: "zhěn",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄣˇ",
    tradition: "診",
    sex: "",
    tone: 3
  },
  {
    char: "词",
    spell: "cí",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "詞",
    sex: "",
    tone: 2
  },
  {
    char: "译",
    spell: "yì",
    stroke: "7",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄧˋ",
    tradition: "譯",
    sex: "",
    tone: 4
  },
  {
    char: "试",
    spell: "shì",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "試",
    sex: "",
    tone: 4
  },
  {
    char: "诗",
    spell: "shī",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕ",
    tradition: "詩",
    sex: "",
    tone: 1
  },
  {
    char: "诚",
    spell: "chéng",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄥˊ",
    tradition: "誠",
    sex: "男",
    tone: 2
  },
  {
    char: "话",
    spell: "huà",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄏㄨㄚˋ",
    tradition: "話",
    sex: "",
    tone: 4
  },
  {
    char: "诞",
    spell: "dàn",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄉㄢˋ",
    tradition: "誕",
    sex: "",
    tone: 4
  },
  {
    char: "诡",
    spell: "guǐ",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˇ",
    tradition: "詭",
    sex: "",
    tone: 3
  },
  {
    char: "询",
    spell: "xún",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄣˊ",
    tradition: "詢",
    sex: "",
    tone: 2
  },
  {
    char: "该",
    spell: "gāi",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄞ",
    tradition: "該",
    sex: "",
    tone: 1
  },
  {
    char: "详",
    spell: "xiáng",
    stroke: "8",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄤˊ",
    tradition: "詳",
    sex: "",
    tone: 2
  },
  {
    char: "诫",
    spell: "jiè",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝˋ",
    tradition: "誡",
    sex: "",
    tone: 4
  },
  {
    char: "诬",
    spell: "wū",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨ",
    tradition: "誣",
    sex: "",
    tone: 1
  },
  {
    char: "语",
    spell: "yǔ",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "語",
    sex: "",
    tone: 3
  },
  {
    char: "误",
    spell: "wù",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "誤",
    sex: "",
    tone: 4
  },
  {
    char: "诱",
    spell: "yòu",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡˋ",
    tradition: "誘",
    sex: "",
    tone: 4
  },
  {
    char: "诲",
    spell: "huì",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "誨",
    sex: "",
    tone: 4
  },
  {
    char: "说",
    spell: "shuō",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨㄟˋ",
    tradition: "説",
    sex: "",
    tone: 1
  },
  {
    char: "诵",
    spell: "sòng",
    stroke: "9",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄥˋ",
    tradition: "誦",
    sex: "",
    tone: 4
  },
  {
    char: "请",
    spell: "qǐng",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄥˇ",
    tradition: "請",
    sex: "",
    tone: 3
  },
  {
    char: "诸",
    spell: "zhū",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨ",
    tradition: "諸",
    sex: "",
    tone: 1
  },
  {
    char: "诺",
    spell: "nuò",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄨㄛˋ",
    tradition: "諾",
    sex: "",
    tone: 4
  },
  {
    char: "读",
    spell: "dú",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˋ",
    tradition: "讀",
    sex: "",
    tone: 2
  },
  {
    char: "诽",
    spell: "fěi",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄟˇ",
    tradition: "誹",
    sex: "",
    tone: 3
  },
  {
    char: "课",
    spell: "kè",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜˋ",
    tradition: "課",
    sex: "",
    tone: 4
  },
  {
    char: "谁",
    spell: "shuí",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄟˊ",
    tradition: "誰",
    sex: "",
    tone: 2
  },
  {
    char: "调",
    spell: "diào",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄠˋ",
    tradition: "調",
    sex: "",
    tone: 2
  },
  {
    char: "谅",
    spell: "liàng",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˋ",
    tradition: "諒",
    sex: "",
    tone: 4
  },
  {
    char: "谆",
    spell: "zhūn",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄣ",
    tradition: "諄",
    sex: "",
    tone: 1
  },
  {
    char: "谈",
    spell: "tán",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "談",
    sex: "",
    tone: 2
  },
  {
    char: "谊",
    spell: "yì",
    stroke: "10",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄧˋ",
    tradition: "誼",
    sex: "",
    tone: 4
  },
  {
    char: "谋",
    spell: "móu",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄡˊ",
    tradition: "謀",
    sex: "",
    tone: 2
  },
  {
    char: "谍",
    spell: "dié",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄝˊ",
    tradition: "諜",
    sex: "",
    tone: 2
  },
  {
    char: "谎",
    spell: "huǎng",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄤˇ",
    tradition: "謊",
    sex: "",
    tone: 3
  },
  {
    char: "谐",
    spell: "xié",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "諧",
    sex: "",
    tone: 2
  },
  {
    char: "谒",
    spell: "yè",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄧㄝˋ",
    tradition: "謁",
    sex: "",
    tone: 4
  },
  {
    char: "谓",
    spell: "wèi",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "謂",
    sex: "",
    tone: 4
  },
  {
    char: "谚",
    spell: "yàn",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "諺",
    sex: "",
    tone: 4
  },
  {
    char: "谜",
    spell: "mí",
    stroke: "11",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˋ",
    tradition: "謎",
    sex: "",
    tone: 2
  },
  {
    char: "谢",
    spell: "xiè",
    stroke: "12",
    radical: "讠",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄝˋ",
    tradition: "謝",
    sex: "",
    tone: 4
  },
  {
    char: "谣",
    spell: "yáo",
    stroke: "12",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠˊ",
    tradition: "謠",
    sex: "",
    tone: 2
  },
  {
    char: "谤",
    spell: "bàng",
    stroke: "12",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤˋ",
    tradition: "謗",
    sex: "",
    tone: 4
  },
  {
    char: "谦",
    spell: "qiān",
    stroke: "12",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "謙",
    sex: "男",
    tone: 1
  },
  {
    char: "谨",
    spell: "jǐn",
    stroke: "13",
    radical: "讠",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄣˇ",
    tradition: "謹",
    sex: "",
    tone: 3
  },
  {
    char: "谬",
    spell: "miù",
    stroke: "13",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄇㄧㄡˋ",
    tradition: "謬",
    sex: "",
    tone: 4
  },
  {
    char: "谭",
    spell: "tán",
    stroke: "14",
    radical: "讠",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢˊ",
    tradition: "譚",
    sex: "",
    tone: 2
  },
  {
    char: "谱",
    spell: "pǔ",
    stroke: "14",
    radical: "讠",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄨˇ",
    tradition: "譜",
    sex: "",
    tone: 3
  },
  {
    char: "谴",
    spell: "qiǎn",
    stroke: "15",
    radical: "讠",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢˇ",
    tradition: "譴",
    sex: "",
    tone: 3
  },
  {
    char: "谷",
    spell: "gǔ",
    stroke: "7",
    radical: "谷",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨˇ",
    tradition: "穀",
    sex: "",
    tone: 3
  },
  {
    char: "豁",
    spell: "huō",
    stroke: "17",
    radical: "谷",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄏㄨㄛˊ",
    tradition: "豁",
    sex: "",
    tone: 1
  },
  {
    char: "豆",
    spell: "dòu",
    stroke: "7",
    radical: "豆",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄉㄡˋ",
    tradition: "豆",
    sex: "",
    tone: 4
  },
  {
    char: "豌",
    spell: "wān",
    stroke: "15",
    radical: "豆",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄢ",
    tradition: "豌",
    sex: "",
    tone: 1
  },
  {
    char: "象",
    spell: "xiàng",
    stroke: "11",
    radical: "⺈",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄤˋ",
    tradition: "象",
    sex: "",
    tone: 4
  },
  {
    char: "豪",
    spell: "háo",
    stroke: "14",
    radical: "亠",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄠˊ",
    tradition: "豪",
    sex: "男",
    tone: 2
  },
  {
    char: "豫",
    spell: "yù",
    stroke: "15",
    radical: "⺈",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "豫",
    sex: "",
    tone: 4
  },
  {
    char: "豹",
    spell: "bào",
    stroke: "10",
    radical: "豸",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˋ",
    tradition: "豹",
    sex: "",
    tone: 4
  },
  {
    char: "豺",
    spell: "chái",
    stroke: "10",
    radical: "豸",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄞˊ",
    tradition: "豺",
    sex: "",
    tone: 2
  },
  {
    char: "貌",
    spell: "mào",
    stroke: "14",
    radical: "豸",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄠˋ",
    tradition: "貌",
    sex: "",
    tone: 4
  },
  {
    char: "贝",
    spell: "bèi",
    stroke: "4",
    radical: "贝",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄅㄟˋ",
    tradition: "貝",
    sex: "",
    tone: 4
  },
  {
    char: "贞",
    spell: "zhēn",
    stroke: "6",
    radical: "⺊",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄣ",
    tradition: "貞",
    sex: "女",
    tone: 1
  },
  {
    char: "负",
    spell: "fù",
    stroke: "6",
    radical: "贝",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄈㄨˋ",
    tradition: "負",
    sex: "",
    tone: 4
  },
  {
    char: "贡",
    spell: "gòng",
    stroke: "7",
    radical: "贝",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥˋ",
    tradition: "貢",
    sex: "",
    tone: 4
  },
  {
    char: "财",
    spell: "cái",
    stroke: "7",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞˊ",
    tradition: "財",
    sex: "",
    tone: 2
  },
  {
    char: "责",
    spell: "zé",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄜˊ",
    tradition: "責",
    sex: "",
    tone: 2
  },
  {
    char: "贤",
    spell: "xián",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄢˊ",
    tradition: "賢",
    sex: "",
    tone: 2
  },
  {
    char: "败",
    spell: "bài",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄞˋ",
    tradition: "敗",
    sex: "",
    tone: 4
  },
  {
    char: "账",
    spell: "zhàng",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄓㄤˋ",
    tradition: "賬",
    sex: "",
    tone: 4
  },
  {
    char: "货",
    spell: "huò",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄛˋ",
    tradition: "貨",
    sex: "",
    tone: 4
  },
  {
    char: "质",
    spell: "zhì",
    stroke: "8",
    radical: "⺁",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄓˋ",
    tradition: "質",
    sex: "",
    tone: 4
  },
  {
    char: "贩",
    spell: "fàn",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˋ",
    tradition: "販",
    sex: "",
    tone: 4
  },
  {
    char: "贪",
    spell: "tān",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄢ",
    tradition: "貪",
    sex: "",
    tone: 1
  },
  {
    char: "贫",
    spell: "pín",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄣˊ",
    tradition: "貧",
    sex: "",
    tone: 2
  },
  {
    char: "贬",
    spell: "biǎn",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˇ",
    tradition: "貶",
    sex: "",
    tone: 3
  },
  {
    char: "购",
    spell: "gòu",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄡˋ",
    tradition: "購",
    sex: "",
    tone: 4
  },
  {
    char: "贮",
    spell: "zhù",
    stroke: "8",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "貯",
    sex: "",
    tone: 4
  },
  {
    char: "贯",
    spell: "guàn",
    stroke: "8",
    radical: "贝",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨㄢˋ",
    tradition: "貫",
    sex: "",
    tone: 4
  },
  {
    char: "贰",
    spell: "èr",
    stroke: "9",
    radical: "贝",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄦˋ",
    tradition: "貳",
    sex: "",
    tone: 4
  },
  {
    char: "贱",
    spell: "jiàn",
    stroke: "9",
    radical: "贝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "賤",
    sex: "",
    tone: 4
  },
  {
    char: "贴",
    spell: "tiē",
    stroke: "9",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄝ",
    tradition: "貼",
    sex: "",
    tone: 1
  },
  {
    char: "贵",
    spell: "guì",
    stroke: "9",
    radical: "贝",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˋ",
    tradition: "貴",
    sex: "男",
    tone: 4
  },
  {
    char: "贷",
    spell: "dài",
    stroke: "9",
    radical: "贝",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "貸",
    sex: "",
    tone: 4
  },
  {
    char: "贸",
    spell: "mào",
    stroke: "9",
    radical: "贝",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄠˋ",
    tradition: "貿",
    sex: "",
    tone: 4
  },
  {
    char: "费",
    spell: "fèi",
    stroke: "9",
    radical: "贝",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄟˋ",
    tradition: "費",
    sex: "",
    tone: 4
  },
  {
    char: "贺",
    spell: "hè",
    stroke: "9",
    radical: "贝",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄜˋ",
    tradition: "賀",
    sex: "",
    tone: 4
  },
  {
    char: "贼",
    spell: "zéi",
    stroke: "10",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄟˊ",
    tradition: "賊",
    sex: "",
    tone: 2
  },
  {
    char: "贾",
    spell: "jiǎ",
    stroke: "10",
    radical: "覀",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄨˇ",
    tradition: "賈",
    sex: "",
    tone: 3
  },
  {
    char: "贿",
    spell: "huì",
    stroke: "10",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟˋ",
    tradition: "賄",
    sex: "",
    tone: 4
  },
  {
    char: "赁",
    spell: "lìn",
    stroke: "10",
    radical: "贝",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˋ",
    tradition: "賃",
    sex: "",
    tone: 4
  },
  {
    char: "赂",
    spell: "lù",
    stroke: "10",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˋ",
    tradition: "賂",
    sex: "",
    tone: 4
  },
  {
    char: "赃",
    spell: "zāng",
    stroke: "10",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄤ",
    tradition: "贜",
    sex: "",
    tone: 1
  },
  {
    char: "资",
    spell: "zī",
    stroke: "10",
    radical: "贝",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄗ",
    tradition: "資",
    sex: "",
    tone: 1
  },
  {
    char: "赊",
    spell: "shē",
    stroke: "11",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄜ",
    tradition: "賒",
    sex: "",
    tone: 1
  },
  {
    char: "赋",
    spell: "fù",
    stroke: "12",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "賦",
    sex: "",
    tone: 4
  },
  {
    char: "赌",
    spell: "dǔ",
    stroke: "12",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "",
    mark: "",
    tradition: "賭",
    sex: "",
    tone: 3
  },
  {
    char: "赎",
    spell: "shú",
    stroke: "12",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄨˊ",
    tradition: "贖",
    sex: "",
    tone: 2
  },
  {
    char: "赏",
    spell: "shǎng",
    stroke: "12",
    radical: "贝",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄤˇ",
    tradition: "賞",
    sex: "",
    tone: 3
  },
  {
    char: "赐",
    spell: "cì",
    stroke: "12",
    radical: "贝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˋ",
    tradition: "賜",
    sex: "",
    tone: 4
  },
  {
    char: "赔",
    spell: "péi",
    stroke: "12",
    radical: "贝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄟˊ",
    tradition: "賠",
    sex: "",
    tone: 2
  },
  {
    char: "赖",
    spell: "lài",
    stroke: "13",
    radical: "⺈",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄞˊ",
    tradition: "賴",
    sex: "",
    tone: 4
  },
  {
    char: "赘",
    spell: "zhuì",
    stroke: "14",
    radical: "贝",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄨㄟˋ",
    tradition: "贅",
    sex: "",
    tone: 4
  },
  {
    char: "赚",
    spell: "zhuàn",
    stroke: "14",
    radical: "贝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄗㄨㄢˋ",
    tradition: "賺",
    sex: "",
    tone: 4
  },
  {
    char: "赛",
    spell: "sài",
    stroke: "14",
    radical: "宀",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄞˋ",
    tradition: "賽",
    sex: "",
    tone: 4
  },
  {
    char: "赞",
    spell: "zàn",
    stroke: "16",
    radical: "贝",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄢˋ",
    tradition: "贊",
    sex: "",
    tone: 4
  },
  {
    char: "赠",
    spell: "zèng",
    stroke: "16",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄗㄥˋ",
    tradition: "贈",
    sex: "",
    tone: 4
  },
  {
    char: "赡",
    spell: "shàn",
    stroke: "17",
    radical: "贝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄕㄢˋ",
    tradition: "贍",
    sex: "",
    tone: 4
  },
  {
    char: "赢",
    spell: "yíng",
    stroke: "17",
    radical: "月",
    struct: "上中下结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "贏",
    sex: "",
    tone: 2
  },
  {
    char: "赤",
    spell: "chì",
    stroke: "7",
    radical: "赤",
    struct: "独体结构",
    five: "金",
    method: "会意",
    mark: "ㄔˋ",
    tradition: "赤",
    sex: "",
    tone: 4
  },
  {
    char: "赦",
    spell: "shè",
    stroke: "11",
    radical: "赤",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄜˋ",
    tradition: "赦",
    sex: "",
    tone: 4
  },
  {
    char: "赫",
    spell: "hè",
    stroke: "14",
    radical: "赤",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄏㄜˋ",
    tradition: "赫",
    sex: "",
    tone: 4
  },
  {
    char: "走",
    spell: "zǒu",
    stroke: "7",
    radical: "走",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄗㄡˇ",
    tradition: "走",
    sex: "",
    tone: 3
  },
  {
    char: "赴",
    spell: "fù",
    stroke: "9",
    radical: "走",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "赴",
    sex: "",
    tone: 4
  },
  {
    char: "赵",
    spell: "zhào",
    stroke: "9",
    radical: "走",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄠˋ",
    tradition: "趙",
    sex: "",
    tone: 4
  },
  {
    char: "赶",
    spell: "gǎn",
    stroke: "10",
    radical: "走",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄢˇ",
    tradition: "趕",
    sex: "",
    tone: 3
  },
  {
    char: "起",
    spell: "qǐ",
    stroke: "10",
    radical: "走",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˇ",
    tradition: "起",
    sex: "",
    tone: 3
  },
  {
    char: "趁",
    spell: "chèn",
    stroke: "12",
    radical: "走",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄔㄣˋ",
    tradition: "趁",
    sex: "",
    tone: 4
  },
  {
    char: "超",
    spell: "chāo",
    stroke: "12",
    radical: "走",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄠ",
    tradition: "超",
    sex: "男",
    tone: 1
  },
  {
    char: "越",
    spell: "yuè",
    stroke: "12",
    radical: "走",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄝˋ",
    tradition: "越",
    sex: "",
    tone: 4
  },
  {
    char: "趋",
    spell: "qū",
    stroke: "12",
    radical: "走",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩ",
    tradition: "趨",
    sex: "",
    tone: 1
  },
  {
    char: "趟",
    spell: "tàng",
    stroke: "15",
    radical: "走",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˋ",
    tradition: "趟",
    sex: "",
    tone: 4
  },
  {
    char: "趣",
    spell: "qù",
    stroke: "15",
    radical: "走",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨˋ",
    tradition: "趣",
    sex: "",
    tone: 4
  },
  {
    char: "足",
    spell: "zú",
    stroke: "7",
    radical: "足",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄗㄨˊ",
    tradition: "足",
    sex: "",
    tone: 2
  },
  {
    char: "趴",
    spell: "pā",
    stroke: "9",
    radical: "⻊",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄆㄚ",
    tradition: "趴",
    sex: "",
    tone: 1
  },
  {
    char: "趾",
    spell: "zhǐ",
    stroke: "11",
    radical: "⻊",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓˇ",
    tradition: "趾",
    sex: "",
    tone: 3
  },
  {
    char: "跃",
    spell: "yuè",
    stroke: "11",
    radical: "⻊",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄝˋ",
    tradition: "躍",
    sex: "",
    tone: 4
  },
  {
    char: "跋",
    spell: "bá",
    stroke: "12",
    radical: "⻊",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˊ",
    tradition: "跋",
    sex: "",
    tone: 2
  },
  {
    char: "跌",
    spell: "diē",
    stroke: "12",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄝ",
    tradition: "跌",
    sex: "",
    tone: 1
  },
  {
    char: "跑",
    spell: "pǎo",
    stroke: "12",
    radical: "⻊",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄠˊ",
    tradition: "跑",
    sex: "",
    tone: 3
  },
  {
    char: "跛",
    spell: "bǒ",
    stroke: "12",
    radical: "⻊",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˇ",
    tradition: "跛",
    sex: "",
    tone: 3
  },
  {
    char: "距",
    spell: "jù",
    stroke: "11",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "距",
    sex: "",
    tone: 4
  },
  {
    char: "跟",
    spell: "gēn",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄣ",
    tradition: "跟",
    sex: "",
    tone: 1
  },
  {
    char: "跨",
    spell: "kuà",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄚˋ",
    tradition: "跨",
    sex: "",
    tone: 4
  },
  {
    char: "跪",
    spell: "guì",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˋ",
    tradition: "跪",
    sex: "",
    tone: 4
  },
  {
    char: "路",
    spell: "lù",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˋ",
    tradition: "路",
    sex: "",
    tone: 4
  },
  {
    char: "跳",
    spell: "tiào",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧㄠˋ",
    tradition: "跳",
    sex: "",
    tone: 4
  },
  {
    char: "践",
    spell: "jiàn",
    stroke: "12",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "踐",
    sex: "",
    tone: 4
  },
  {
    char: "跷",
    spell: "qiāo",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄠ",
    tradition: "蹺",
    sex: "",
    tone: 1
  },
  {
    char: "跺",
    spell: "duò",
    stroke: "13",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄉㄨㄛˇ",
    tradition: "跺",
    sex: "",
    tone: 4
  },
  {
    char: "踊",
    spell: "yǒng",
    stroke: "14",
    radical: "⻊",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄥˇ",
    tradition: "踴",
    sex: "",
    tone: 3
  },
  {
    char: "踏",
    spell: "tà",
    stroke: "15",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄚˋ",
    tradition: "踏",
    sex: "",
    tone: 4
  },
  {
    char: "踢",
    spell: "tī",
    stroke: "15",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧ",
    tradition: "踢",
    sex: "",
    tone: 1
  },
  {
    char: "踩",
    spell: "cǎi",
    stroke: "15",
    radical: "⻊",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄞˇ",
    tradition: "踩",
    sex: "",
    tone: 3
  },
  {
    char: "踪",
    spell: "zōng",
    stroke: "15",
    radical: "⻊",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨㄥ",
    tradition: "踪",
    sex: "",
    tone: 1
  },
  {
    char: "踱",
    spell: "duó",
    stroke: "16",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄛˊ",
    tradition: "踱",
    sex: "",
    tone: 2
  },
  {
    char: "蹂",
    spell: "róu",
    stroke: "16",
    radical: "⻊",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄡˊ",
    tradition: "蹂",
    sex: "",
    tone: 2
  },
  {
    char: "蹄",
    spell: "tí",
    stroke: "16",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧˊ",
    tradition: "蹄",
    sex: "",
    tone: 2
  },
  {
    char: "蹈",
    spell: "dǎo",
    stroke: "17",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˇ",
    tradition: "蹈",
    sex: "",
    tone: 3
  },
  {
    char: "蹋",
    spell: "tà",
    stroke: "17",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄚˋ",
    tradition: "蹋",
    sex: "",
    tone: 4
  },
  {
    char: "蹦",
    spell: "bèng",
    stroke: "18",
    radical: "⻊",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄅㄥˋ",
    tradition: "蹦",
    sex: "",
    tone: 4
  },
  {
    char: "蹬",
    spell: "dēng",
    stroke: "19",
    radical: "⻊",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄉㄥˋ",
    tradition: "蹬",
    sex: "",
    tone: 1
  },
  {
    char: "蹭",
    spell: "cèng",
    stroke: "19",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄥˋ",
    tradition: "蹭",
    sex: "",
    tone: 4
  },
  {
    char: "蹲",
    spell: "dūn",
    stroke: "19",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄘㄨㄣˊ",
    tradition: "蹲",
    sex: "",
    tone: 1
  },
  {
    char: "躁",
    spell: "zào",
    stroke: "20",
    radical: "⻊",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠˋ",
    tradition: "躁",
    sex: "",
    tone: 4
  },
  {
    char: "躏",
    spell: "lìn",
    stroke: "21",
    radical: "⻊",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˋ",
    tradition: "躪",
    sex: "",
    tone: 4
  },
  {
    char: "身",
    spell: "shēn",
    stroke: "7",
    radical: "身",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄕㄣ",
    tradition: "身",
    sex: "",
    tone: 1
  },
  {
    char: "躬",
    spell: "gōng",
    stroke: "10",
    radical: "身",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄥ",
    tradition: "躬",
    sex: "",
    tone: 1
  },
  {
    char: "躯",
    spell: "qū",
    stroke: "11",
    radical: "身",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩ",
    tradition: "軀",
    sex: "",
    tone: 1
  },
  {
    char: "躲",
    spell: "duǒ",
    stroke: "13",
    radical: "身",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄛˇ",
    tradition: "躲",
    sex: "",
    tone: 3
  },
  {
    char: "躺",
    spell: "tǎng",
    stroke: "15",
    radical: "身",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄤˇ",
    tradition: "躺",
    sex: "",
    tone: 3
  },
  {
    char: "车",
    spell: "chē",
    stroke: "4",
    radical: "车",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄔㄜ",
    tradition: "車",
    sex: "",
    tone: 1
  },
  {
    char: "轧",
    spell: "zhá",
    stroke: "5",
    radical: "车",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄍㄚˊ",
    tradition: "軋",
    sex: "",
    tone: 4
  },
  {
    char: "轨",
    spell: "guǐ",
    stroke: "6",
    radical: "车",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄟˇ",
    tradition: "軌",
    sex: "",
    tone: 3
  },
  {
    char: "轩",
    spell: "xuān",
    stroke: "7",
    radical: "车",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄒㄩㄢ",
    tradition: "軒",
    sex: "男",
    tone: 1
  },
  {
    char: "转",
    spell: "zhuǎn",
    stroke: "8",
    radical: "车",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄞˊ",
    tradition: "轉",
    sex: "",
    tone: 3
  },
  {
    char: "轮",
    spell: "lún",
    stroke: "8",
    radical: "车",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩㄣˊ",
    tradition: "輪",
    sex: "男",
    tone: 2
  },
  {
    char: "软",
    spell: "ruǎn",
    stroke: "8",
    radical: "车",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄖㄨㄢˇ",
    tradition: "軟",
    sex: "",
    tone: 3
  },
  {
    char: "轰",
    spell: "hōng",
    stroke: "8",
    radical: "车",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄏㄨㄥ",
    tradition: "轟",
    sex: "",
    tone: 1
  },
  {
    char: "轴",
    spell: "zhóu",
    stroke: "9",
    radical: "车",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄡˊ",
    tradition: "軸",
    sex: "",
    tone: 2
  },
  {
    char: "轻",
    spell: "qīng",
    stroke: "9",
    radical: "车",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄥ",
    tradition: "輕",
    sex: "",
    tone: 1
  },
  {
    char: "载",
    spell: "zǎi",
    stroke: "10",
    radical: "车",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄞˋ",
    tradition: "載",
    sex: "",
    tone: 3
  },
  {
    char: "轿",
    spell: "jiào",
    stroke: "10",
    radical: "车",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "轎",
    sex: "",
    tone: 4
  },
  {
    char: "较",
    spell: "jiào",
    stroke: "10",
    radical: "车",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "較",
    sex: "",
    tone: 4
  },
  {
    char: "辅",
    spell: "fǔ",
    stroke: "11",
    radical: "车",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨˇ",
    tradition: "輔",
    sex: "",
    tone: 3
  },
  {
    char: "辆",
    spell: "liàng",
    stroke: "11",
    radical: "车",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˋ",
    tradition: "輛",
    sex: "",
    tone: 4
  },
  {
    char: "辈",
    spell: "bèi",
    stroke: "12",
    radical: "车、非",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄟˋ",
    tradition: "輩",
    sex: "",
    tone: 4
  },
  {
    char: "辉",
    spell: "huī",
    stroke: "12",
    radical: "车",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄟ",
    tradition: "輝",
    sex: "男",
    tone: 1
  },
  {
    char: "辐",
    spell: "fú",
    stroke: "13",
    radical: "车",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄨˊ",
    tradition: "輻",
    sex: "",
    tone: 2
  },
  {
    char: "辑",
    spell: "jí",
    stroke: "13",
    radical: "车",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧˊ",
    tradition: "輯",
    sex: "",
    tone: 2
  },
  {
    char: "输",
    spell: "shū",
    stroke: "13",
    radical: "车",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨ",
    tradition: "輸",
    sex: "",
    tone: 1
  },
  {
    char: "辕",
    spell: "yuán",
    stroke: "14",
    radical: "车",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˊ",
    tradition: "轅",
    sex: "",
    tone: 2
  },
  {
    char: "辖",
    spell: "xiá",
    stroke: "14",
    radical: "车",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "轄",
    sex: "",
    tone: 2
  },
  {
    char: "辙",
    spell: "zhé",
    stroke: "16",
    radical: "车",
    struct: "左中右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄜˊ",
    tradition: "轍",
    sex: "",
    tone: 2
  },
  {
    char: "辛",
    spell: "xīn",
    stroke: "7",
    radical: "辛",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄣ",
    tradition: "辛",
    sex: "",
    tone: 1
  },
  {
    char: "辜",
    spell: "gū",
    stroke: "12",
    radical: "辛",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄨ",
    tradition: "辜",
    sex: "",
    tone: 1
  },
  {
    char: "辞",
    spell: "cí",
    stroke: "13",
    radical: "舌",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄘˊ",
    tradition: "辭",
    sex: "",
    tone: 2
  },
  {
    char: "辟",
    spell: "bì",
    stroke: "13",
    radical: "辛",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˋ",
    tradition: "闢",
    sex: "",
    tone: 4
  },
  {
    char: "辣",
    spell: "là",
    stroke: "14",
    radical: "辛",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄚˋ",
    tradition: "辣",
    sex: "",
    tone: 4
  },
  {
    char: "辨",
    spell: "biàn",
    stroke: "16",
    radical: "辛",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˋ",
    tradition: "辨",
    sex: "",
    tone: 4
  },
  {
    char: "辩",
    spell: "biàn",
    stroke: "16",
    radical: "辛",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˋ",
    tradition: "辯",
    sex: "",
    tone: 4
  },
  {
    char: "辫",
    spell: "biàn",
    stroke: "17",
    radical: "辛",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˋ",
    tradition: "辮",
    sex: "",
    tone: 4
  },
  {
    char: "辰",
    spell: "chén",
    stroke: "7",
    radical: "辰",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄔㄣˊ",
    tradition: "辰",
    sex: "男",
    tone: 2
  },
  {
    char: "辱",
    spell: "rǔ",
    stroke: "10",
    radical: "辰",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄖㄨˇ",
    tradition: "辱",
    sex: "",
    tone: 3
  },
  {
    char: "边",
    spell: "biān",
    stroke: "5",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄅㄧㄢ",
    tradition: "邊",
    sex: "",
    tone: 1
  },
  {
    char: "辽",
    spell: "liáo",
    stroke: "5",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄠˊ",
    tradition: "遼",
    sex: "",
    tone: 2
  },
  {
    char: "达",
    spell: "dá",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄚˊ",
    tradition: "達",
    sex: "男",
    tone: 2
  },
  {
    char: "迁",
    spell: "qiān",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "遷",
    sex: "",
    tone: 1
  },
  {
    char: "迂",
    spell: "yū",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩ",
    tradition: "迂",
    sex: "",
    tone: 1
  },
  {
    char: "迄",
    spell: "qì",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧˋ",
    tradition: "迄",
    sex: "",
    tone: 4
  },
  {
    char: "迅",
    spell: "xùn",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "迅",
    sex: "",
    tone: 4
  },
  {
    char: "过",
    spell: "guò",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄛˋ",
    tradition: "過",
    sex: "",
    tone: 4
  },
  {
    char: "迈",
    spell: "mài",
    stroke: "6",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄞˋ",
    tradition: "邁",
    sex: "",
    tone: 4
  },
  {
    char: "迎",
    spell: "yíng",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "迎",
    sex: "",
    tone: 2
  },
  {
    char: "运",
    spell: "yùn",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄣˋ",
    tradition: "運",
    sex: "",
    tone: 4
  },
  {
    char: "近",
    spell: "jìn",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄣˋ",
    tradition: "近",
    sex: "",
    tone: 4
  },
  {
    char: "返",
    spell: "fǎn",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄢˇ",
    tradition: "返",
    sex: "",
    tone: 3
  },
  {
    char: "还",
    spell: "hái",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "-",
    mark: "ㄏㄞˊ",
    tradition: "還",
    sex: "",
    tone: 2
  },
  {
    char: "这",
    spell: "zhè",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄓㄜˋ",
    tradition: "這",
    sex: "",
    tone: 4
  },
  {
    char: "进",
    spell: "jìn",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧㄣˋ",
    tradition: "進",
    sex: "男",
    tone: 4
  },
  {
    char: "远",
    spell: "yuǎn",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˇ",
    tradition: "遠",
    sex: "男",
    tone: 3
  },
  {
    char: "违",
    spell: "wéi",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄨㄟˊ",
    tradition: "違",
    sex: "",
    tone: 2
  },
  {
    char: "连",
    spell: "lián",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄢˊ",
    tradition: "連",
    sex: "",
    tone: 2
  },
  {
    char: "迟",
    spell: "chí",
    stroke: "7",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "遲",
    sex: "",
    tone: 2
  },
  {
    char: "迫",
    spell: "pò",
    stroke: "8",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄞˇ",
    tradition: "迫",
    sex: "",
    tone: 4
  },
  {
    char: "述",
    spell: "shù",
    stroke: "8",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˋ",
    tradition: "述",
    sex: "",
    tone: 4
  },
  {
    char: "迷",
    spell: "mí",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˊ",
    tradition: "迷",
    sex: "",
    tone: 2
  },
  {
    char: "迹",
    spell: "jì",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "迹",
    sex: "",
    tone: 4
  },
  {
    char: "追",
    spell: "zhuī",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨㄟ",
    tradition: "追",
    sex: "",
    tone: 1
  },
  {
    char: "退",
    spell: "tuì",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄊㄨㄟˋ",
    tradition: "退",
    sex: "",
    tone: 4
  },
  {
    char: "送",
    spell: "sòng",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨㄥˋ",
    tradition: "送",
    sex: "",
    tone: 4
  },
  {
    char: "适",
    spell: "shì",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄕˋ",
    tradition: "適",
    sex: "",
    tone: 4
  },
  {
    char: "逃",
    spell: "táo",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄠˊ",
    tradition: "逃",
    sex: "",
    tone: 2
  },
  {
    char: "逆",
    spell: "nì",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧˋ",
    tradition: "逆",
    sex: "",
    tone: 4
  },
  {
    char: "选",
    spell: "xuǎn",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄢˇ",
    tradition: "選",
    sex: "",
    tone: 3
  },
  {
    char: "逊",
    spell: "xùn",
    stroke: "9",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "遜",
    sex: "",
    tone: 4
  },
  {
    char: "透",
    spell: "tòu",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄡˋ",
    tradition: "透",
    sex: "",
    tone: 4
  },
  {
    char: "逐",
    spell: "zhú",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄨˊ",
    tradition: "逐",
    sex: "",
    tone: 2
  },
  {
    char: "递",
    spell: "dì",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧˋ",
    tradition: "遞",
    sex: "",
    tone: 4
  },
  {
    char: "途",
    spell: "tú",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨˊ",
    tradition: "途",
    sex: "",
    tone: 2
  },
  {
    char: "逗",
    spell: "dòu",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˋ",
    tradition: "逗",
    sex: "",
    tone: 4
  },
  {
    char: "通",
    spell: "tōng",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄥˋ",
    tradition: "通",
    sex: "",
    tone: 1
  },
  {
    char: "逛",
    spell: "guàng",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄤˋ",
    tradition: "逛",
    sex: "",
    tone: 4
  },
  {
    char: "逝",
    spell: "shì",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "逝",
    sex: "",
    tone: 4
  },
  {
    char: "逞",
    spell: "chěng",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄥˇ",
    tradition: "逞",
    sex: "",
    tone: 3
  },
  {
    char: "速",
    spell: "sù",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨˋ",
    tradition: "速",
    sex: "",
    tone: 4
  },
  {
    char: "造",
    spell: "zào",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠˋ",
    tradition: "造",
    sex: "",
    tone: 4
  },
  {
    char: "逢",
    spell: "féng",
    stroke: "10",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥˊ",
    tradition: "逢",
    sex: "",
    tone: 2
  },
  {
    char: "逮",
    spell: "dǎi",
    stroke: "11",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄞˋ",
    tradition: "逮",
    sex: "",
    tone: 3
  },
  {
    char: "逸",
    spell: "yì",
    stroke: "11",
    radical: "辶",
    struct: "半包围结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "逸",
    sex: "男",
    tone: 4
  },
  {
    char: "逻",
    spell: "luó",
    stroke: "11",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "邏",
    sex: "",
    tone: 2
  },
  {
    char: "逼",
    spell: "bī",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧ",
    tradition: "逼",
    sex: "",
    tone: 1
  },
  {
    char: "逾",
    spell: "yú",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "逾",
    sex: "",
    tone: 2
  },
  {
    char: "遂",
    spell: "suì",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄙㄨㄟˊ",
    tradition: "遂",
    sex: "",
    tone: 4
  },
  {
    char: "遇",
    spell: "yù",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "遇",
    sex: "",
    tone: 4
  },
  {
    char: "遍",
    spell: "biàn",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢˋ",
    tradition: "遍",
    sex: "",
    tone: 4
  },
  {
    char: "遏",
    spell: "è",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄜˇ",
    tradition: "遏",
    sex: "",
    tone: 4
  },
  {
    char: "道",
    spell: "dào",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄠˋ",
    tradition: "道",
    sex: "",
    tone: 4
  },
  {
    char: "遗",
    spell: "yí",
    stroke: "12",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "遺",
    sex: "",
    tone: 2
  },
  {
    char: "遣",
    spell: "qiǎn",
    stroke: "13",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢˇ",
    tradition: "遣",
    sex: "",
    tone: 3
  },
  {
    char: "遥",
    spell: "yáo",
    stroke: "13",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄠˊ",
    tradition: "遥",
    sex: "",
    tone: 2
  },
  {
    char: "遭",
    spell: "zāo",
    stroke: "14",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄠ",
    tradition: "遭",
    sex: "",
    tone: 1
  },
  {
    char: "遮",
    spell: "zhē",
    stroke: "14",
    radical: "辶",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄜ",
    tradition: "遮",
    sex: "",
    tone: 1
  },
  {
    char: "遵",
    spell: "zūn",
    stroke: "15",
    radical: "辶",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨㄣ",
    tradition: "遵",
    sex: "",
    tone: 1
  },
  {
    char: "避",
    spell: "bì",
    stroke: "16",
    radical: "辶",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˋ",
    tradition: "避",
    sex: "",
    tone: 4
  },
  {
    char: "邀",
    spell: "yāo",
    stroke: "16",
    radical: "辶",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄠ",
    tradition: "邀",
    sex: "",
    tone: 1
  },
  {
    char: "邑",
    spell: "yì",
    stroke: "7",
    radical: "邑",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄧˋ",
    tradition: "邑",
    sex: "",
    tone: 4
  },
  {
    char: "邓",
    spell: "dèng",
    stroke: "4",
    radical: "又",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄉㄥˋ",
    tradition: "鄧",
    sex: "",
    tone: 4
  },
  {
    char: "邢",
    spell: "xíng",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄥˊ",
    tradition: "邢",
    sex: "",
    tone: 2
  },
  {
    char: "那",
    spell: "nà",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "那",
    sex: "",
    tone: 4
  },
  {
    char: "邦",
    spell: "bāng",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄤ",
    tradition: "邦",
    sex: "男",
    tone: 1
  },
  {
    char: "邪",
    spell: "xié",
    stroke: "6",
    radical: "牙",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "邪",
    sex: "",
    tone: 2
  },
  {
    char: "邮",
    spell: "yóu",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄡˊ",
    tradition: "郵",
    sex: "",
    tone: 2
  },
  {
    char: "邻",
    spell: "lín",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˊ",
    tradition: "鄰",
    sex: "",
    tone: 2
  },
  {
    char: "郁",
    spell: "yù",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "鬱",
    sex: "",
    tone: 4
  },
  {
    char: "郊",
    spell: "jiāo",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "郊",
    sex: "",
    tone: 1
  },
  {
    char: "郎",
    spell: "láng",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄤˊ",
    tradition: "郎",
    sex: "",
    tone: 2
  },
  {
    char: "郑",
    spell: "zhèng",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄥˋ",
    tradition: "鄭",
    sex: "",
    tone: 4
  },
  {
    char: "部",
    spell: "bù",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄨˋ",
    tradition: "部",
    sex: "",
    tone: 4
  },
  {
    char: "郭",
    spell: "guō",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄛ",
    tradition: "郭",
    sex: "",
    tone: 1
  },
  {
    char: "都",
    spell: "dōu",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡ",
    tradition: "都",
    sex: "",
    tone: 1
  },
  {
    char: "鄙",
    spell: "bǐ",
    stroke: "13",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧˇ",
    tradition: "鄙",
    sex: "",
    tone: 3
  },
  {
    char: "酌",
    spell: "zhuó",
    stroke: "10",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄛˊ",
    tradition: "酌",
    sex: "",
    tone: 2
  },
  {
    char: "配",
    spell: "pèi",
    stroke: "10",
    radical: "酉",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄟˋ",
    tradition: "配",
    sex: "",
    tone: 4
  },
  {
    char: "酒",
    spell: "jiǔ",
    stroke: "10",
    radical: "氵",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄐㄧㄡˇ",
    tradition: "酒",
    sex: "",
    tone: 3
  },
  {
    char: "酗",
    spell: "xù",
    stroke: "11",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩˋ",
    tradition: "酗",
    sex: "",
    tone: 4
  },
  {
    char: "酝",
    spell: "yùn",
    stroke: "11",
    radical: "酉",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄣˋ",
    tradition: "醖",
    sex: "",
    tone: 4
  },
  {
    char: "酣",
    spell: "hān",
    stroke: "12",
    radical: "酉",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢ",
    tradition: "酣",
    sex: "",
    tone: 1
  },
  {
    char: "酥",
    spell: "sū",
    stroke: "12",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄙㄨ",
    tradition: "酥",
    sex: "",
    tone: 1
  },
  {
    char: "酪",
    spell: "lào",
    stroke: "13",
    radical: "酉",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄠˋ",
    tradition: "酪",
    sex: "",
    tone: 4
  },
  {
    char: "酬",
    spell: "chóu",
    stroke: "13",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄡˊ",
    tradition: "酬",
    sex: "",
    tone: 2
  },
  {
    char: "酱",
    spell: "jiàng",
    stroke: "13",
    radical: "酉",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤˋ",
    tradition: "醬",
    sex: "",
    tone: 4
  },
  {
    char: "酵",
    spell: "jiào",
    stroke: "14",
    radical: "酉",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˋ",
    tradition: "酵",
    sex: "",
    tone: 4
  },
  {
    char: "酷",
    spell: "kù",
    stroke: "14",
    radical: "酉",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨˋ",
    tradition: "酷",
    sex: "",
    tone: 4
  },
  {
    char: "酸",
    spell: "suān",
    stroke: "14",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄢ",
    tradition: "酸",
    sex: "",
    tone: 1
  },
  {
    char: "酿",
    spell: "niàng",
    stroke: "14",
    radical: "酉",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄋㄧㄤˋ",
    tradition: "釀",
    sex: "",
    tone: 4
  },
  {
    char: "醇",
    spell: "chún",
    stroke: "15",
    radical: "酉",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄔㄨㄣˊ",
    tradition: "醇",
    sex: "",
    tone: 2
  },
  {
    char: "醉",
    spell: "zuì",
    stroke: "15",
    radical: "酉",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄗㄨㄟˋ",
    tradition: "醉",
    sex: "",
    tone: 4
  },
  {
    char: "醋",
    spell: "cù",
    stroke: "15",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨˋ",
    tradition: "醋",
    sex: "",
    tone: 4
  },
  {
    char: "醒",
    spell: "xǐng",
    stroke: "16",
    radical: "酉",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄒㄧㄥˇ",
    tradition: "醒",
    sex: "",
    tone: 3
  },
  {
    char: "采",
    spell: "cǎi",
    stroke: "8",
    radical: "爫",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄘㄞˋ",
    tradition: "采",
    sex: "",
    tone: 3
  },
  {
    char: "释",
    spell: "shì",
    stroke: "12",
    radical: "釆",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "釋",
    sex: "",
    tone: 4
  },
  {
    char: "里",
    spell: "lǐ",
    stroke: "7",
    radical: "里",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧˇ",
    tradition: "裏",
    sex: "",
    tone: 3
  },
  {
    char: "重",
    spell: "zhòng",
    stroke: "9",
    radical: "丿",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄔㄨㄥˊ",
    tradition: "重",
    sex: "",
    tone: 4
  },
  {
    char: "野",
    spell: "yě",
    stroke: "11",
    radical: "里",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄝˇ",
    tradition: "野",
    sex: "",
    tone: 3
  },
  {
    char: "量",
    spell: "liàng",
    stroke: "12",
    radical: "日",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄤˊ",
    tradition: "量",
    sex: "",
    tone: 2
  },
  {
    char: "金",
    spell: "jīn",
    stroke: "8",
    radical: "金",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄐㄧㄣ",
    tradition: "金",
    sex: "",
    tone: 1
  },
  {
    char: "鉴",
    spell: "jiàn",
    stroke: "13",
    radical: "金",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "鑒",
    sex: "",
    tone: 4
  },
  {
    char: "针",
    spell: "zhēn",
    stroke: "7",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄓㄣ",
    tradition: "針",
    sex: "",
    tone: 1
  },
  {
    char: "钉",
    spell: "dīng",
    stroke: "7",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄥˋ",
    tradition: "釘",
    sex: "",
    tone: 1
  },
  {
    char: "钓",
    spell: "diào",
    stroke: "8",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄠˋ",
    tradition: "釣",
    sex: "",
    tone: 4
  },
  {
    char: "钙",
    spell: "gài",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄍㄞˋ",
    tradition: "鈣",
    sex: "",
    tone: 4
  },
  {
    char: "钝",
    spell: "dùn",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨㄣˋ",
    tradition: "鈍",
    sex: "",
    tone: 4
  },
  {
    char: "钞",
    spell: "chāo",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "鈔",
    sex: "",
    tone: 1
  },
  {
    char: "钟",
    spell: "zhōng",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄥ",
    tradition: "鍾、鐘",
    sex: "",
    tone: 1
  },
  {
    char: "钠",
    spell: "nà",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄚˋ",
    tradition: "鈉",
    sex: "",
    tone: 4
  },
  {
    char: "钢",
    spell: "gāng",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄤˋ",
    tradition: "鋼",
    sex: "",
    tone: 1
  },
  {
    char: "钥",
    spell: "yuè",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄧㄠˋ",
    tradition: "鑰",
    sex: "",
    tone: 4
  },
  {
    char: "钦",
    spell: "qīn",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄣ",
    tradition: "欽",
    sex: "",
    tone: 1
  },
  {
    char: "钧",
    spell: "jūn",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩㄣ",
    tradition: "鈞",
    sex: "男",
    tone: 1
  },
  {
    char: "钩",
    spell: "gōu",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄡ",
    tradition: "鈎",
    sex: "",
    tone: 1
  },
  {
    char: "钮",
    spell: "niǔ",
    stroke: "9",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄡˇ",
    tradition: "鈕",
    sex: "",
    tone: 3
  },
  {
    char: "钱",
    spell: "qián",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "",
    mark: "",
    tradition: "錢",
    sex: "",
    tone: 2
  },
  {
    char: "钳",
    spell: "qián",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢˊ",
    tradition: "鉗",
    sex: "",
    tone: 2
  },
  {
    char: "钻",
    spell: "zuàn",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨㄢˋ",
    tradition: "鑽",
    sex: "",
    tone: 4
  },
  {
    char: "钾",
    spell: "jiǎ",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄚˇ",
    tradition: "鉀",
    sex: "",
    tone: 3
  },
  {
    char: "铁",
    spell: "tiě",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄧㄝˇ",
    tradition: "鐡",
    sex: "",
    tone: 3
  },
  {
    char: "铃",
    spell: "líng",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "鈴",
    sex: "",
    tone: 2
  },
  {
    char: "铅",
    spell: "qiān",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄢ",
    tradition: "鉛",
    sex: "",
    tone: 1
  },
  {
    char: "铆",
    spell: "mǎo",
    stroke: "10",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄇㄠˇ",
    tradition: "鉚",
    sex: "",
    tone: 3
  },
  {
    char: "铐",
    spell: "kào",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄎㄠˋ",
    tradition: "銬",
    sex: "",
    tone: 4
  },
  {
    char: "铛",
    spell: "chēng",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄥ",
    tradition: "鐺",
    sex: "",
    tone: 1
  },
  {
    char: "铜",
    spell: "tóng",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄥˊ",
    tradition: "銅",
    sex: "",
    tone: 2
  },
  {
    char: "铝",
    spell: "lǚ",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "",
    method: "-",
    mark: "ㄌㄩˇ",
    tradition: "鋁",
    sex: "",
    tone: 3
  },
  {
    char: "铡",
    spell: "zhá",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄚˊ",
    tradition: "鍘",
    sex: "",
    tone: 2
  },
  {
    char: "铣",
    spell: "xǐ",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧˇ",
    tradition: "銑",
    sex: "",
    tone: 3
  },
  {
    char: "铭",
    spell: "míng",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄇㄧㄥˊ",
    tradition: "銘",
    sex: "",
    tone: 2
  },
  {
    char: "铲",
    spell: "chǎn",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄢˇ",
    tradition: "鏟",
    sex: "",
    tone: 3
  },
  {
    char: "银",
    spell: "yín",
    stroke: "11",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄧㄣˊ",
    tradition: "銀",
    sex: "",
    tone: 2
  },
  {
    char: "铸",
    spell: "zhù",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "鑄",
    sex: "",
    tone: 4
  },
  {
    char: "铺",
    spell: "pù",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄆㄨˋ",
    tradition: "鋪",
    sex: "",
    tone: 4
  },
  {
    char: "链",
    spell: "liàn",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄧㄢˋ",
    tradition: "鏈",
    sex: "",
    tone: 4
  },
  {
    char: "销",
    spell: "xiāo",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄠ",
    tradition: "銷",
    sex: "",
    tone: 1
  },
  {
    char: "锁",
    spell: "suǒ",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄛˇ",
    tradition: "鎖",
    sex: "",
    tone: 3
  },
  {
    char: "锄",
    spell: "chú",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "鋤",
    sex: "",
    tone: 2
  },
  {
    char: "锅",
    spell: "guō",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄨㄛ",
    tradition: "鍋",
    sex: "",
    tone: 1
  },
  {
    char: "锈",
    spell: "xiù",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄡˋ",
    tradition: "銹",
    sex: "",
    tone: 4
  },
  {
    char: "锉",
    spell: "cuò",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛˋ",
    tradition: "銼",
    sex: "",
    tone: 4
  },
  {
    char: "锋",
    spell: "fēng",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄥ",
    tradition: "鋒",
    sex: "",
    tone: 1
  },
  {
    char: "锌",
    spell: "xīn",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄣ",
    tradition: "鋅",
    sex: "",
    tone: 1
  },
  {
    char: "锐",
    spell: "ruì",
    stroke: "12",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄨㄟˋ",
    tradition: "銳",
    sex: "",
    tone: 4
  },
  {
    char: "错",
    spell: "cuò",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄨㄛˋ",
    tradition: "錯",
    sex: "",
    tone: 4
  },
  {
    char: "锚",
    spell: "máo",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄇㄠˊ",
    tradition: "錨",
    sex: "",
    tone: 2
  },
  {
    char: "锡",
    spell: "xī",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧ",
    tradition: "錫",
    sex: "",
    tone: 1
  },
  {
    char: "锣",
    spell: "luó",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "鑼",
    sex: "",
    tone: 2
  },
  {
    char: "锤",
    spell: "chuí",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨㄟˊ",
    tradition: "錘",
    sex: "",
    tone: 2
  },
  {
    char: "锥",
    spell: "zhuī",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄨㄟ",
    tradition: "錐",
    sex: "",
    tone: 1
  },
  {
    char: "锦",
    spell: "jǐn",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄣˇ",
    tradition: "錦",
    sex: "女",
    tone: 3
  },
  {
    char: "锨",
    spell: "xiān",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢ",
    tradition: "鍁",
    sex: "",
    tone: 1
  },
  {
    char: "锭",
    spell: "dìng",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄥˋ",
    tradition: "錠",
    sex: "",
    tone: 4
  },
  {
    char: "键",
    spell: "jiàn",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄢˋ",
    tradition: "鍵",
    sex: "",
    tone: 4
  },
  {
    char: "锯",
    spell: "jù",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩˋ",
    tradition: "鋸",
    sex: "",
    tone: 4
  },
  {
    char: "锰",
    spell: "měng",
    stroke: "13",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄇㄥˇ",
    tradition: "錳",
    sex: "",
    tone: 3
  },
  {
    char: "锹",
    spell: "qiāo",
    stroke: "14",
    radical: "钅",
    struct: "左中右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄧㄠ",
    tradition: "鍬",
    sex: "",
    tone: 1
  },
  {
    char: "锻",
    spell: "duàn",
    stroke: "14",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨㄢˋ",
    tradition: "鍛",
    sex: "",
    tone: 4
  },
  {
    char: "镀",
    spell: "dù",
    stroke: "14",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄨˋ",
    tradition: "鍍",
    sex: "",
    tone: 4
  },
  {
    char: "镇",
    spell: "zhèn",
    stroke: "15",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄣˋ",
    tradition: "鎮",
    sex: "",
    tone: 4
  },
  {
    char: "镊",
    spell: "niè",
    stroke: "15",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄋㄧㄝˋ",
    tradition: "鑷",
    sex: "",
    tone: 4
  },
  {
    char: "镐",
    spell: "hào",
    stroke: "15",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄍㄠˇ",
    tradition: "鎬",
    sex: "",
    tone: 4
  },
  {
    char: "镜",
    spell: "jìng",
    stroke: "16",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "鏡",
    sex: "",
    tone: 4
  },
  {
    char: "镣",
    spell: "liào",
    stroke: "17",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄧㄠˋ",
    tradition: "鐐",
    sex: "",
    tone: 4
  },
  {
    char: "镰",
    spell: "lián",
    stroke: "18",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄌㄧㄢˊ",
    tradition: "鐮",
    sex: "",
    tone: 2
  },
  {
    char: "镶",
    spell: "xiāng",
    stroke: "22",
    radical: "钅",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄤ",
    tradition: "鑲",
    sex: "",
    tone: 1
  },
  {
    char: "长",
    spell: "cháng",
    stroke: "4",
    radical: "长",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄔㄤˊ",
    tradition: "長",
    sex: "",
    tone: 2
  },
  {
    char: "门",
    spell: "mén",
    stroke: "3",
    radical: "门",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄣˊ",
    tradition: "門",
    sex: "",
    tone: 2
  },
  {
    char: "闪",
    spell: "shǎn",
    stroke: "5",
    radical: "门",
    struct: "半包围结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄢˇ",
    tradition: "閃",
    sex: "",
    tone: 3
  },
  {
    char: "闭",
    spell: "bì",
    stroke: "6",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˋ",
    tradition: "閉",
    sex: "",
    tone: 4
  },
  {
    char: "问",
    spell: "wèn",
    stroke: "6",
    radical: "门",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄨㄣˋ",
    tradition: "問",
    sex: "",
    tone: 4
  },
  {
    char: "闯",
    spell: "chuǎng",
    stroke: "6",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄔㄨㄤˇ",
    tradition: "闖",
    sex: "",
    tone: 3
  },
  {
    char: "闰",
    spell: "rùn",
    stroke: "7",
    radical: "门",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄖㄨㄣˋ",
    tradition: "閏",
    sex: "",
    tone: 4
  },
  {
    char: "闲",
    spell: "xián",
    stroke: "7",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄢˊ",
    tradition: "閑",
    sex: "",
    tone: 2
  },
  {
    char: "间",
    spell: "jiān",
    stroke: "7",
    radical: "门",
    struct: "半包围结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧㄢˋ",
    tradition: "間",
    sex: "",
    tone: 1
  },
  {
    char: "闷",
    spell: "mèn",
    stroke: "7",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄣˋ",
    tradition: "悶",
    sex: "",
    tone: 1
  },
  {
    char: "闸",
    spell: "zhá",
    stroke: "8",
    radical: "门",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄚˊ",
    tradition: "閘",
    sex: "",
    tone: 2
  },
  {
    char: "闹",
    spell: "nào",
    stroke: "8",
    radical: "门",
    struct: "半包围结构",
    five: "火",
    method: "会意",
    mark: "ㄋㄠˋ",
    tradition: "鬧",
    sex: "",
    tone: 4
  },
  {
    char: "闺",
    spell: "guī",
    stroke: "9",
    radical: "门",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄍㄨㄟ",
    tradition: "閨",
    sex: "",
    tone: 1
  },
  {
    char: "闻",
    spell: "wén",
    stroke: "9",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄨㄣˊ",
    tradition: "聞",
    sex: "",
    tone: 2
  },
  {
    char: "闽",
    spell: "mǐn",
    stroke: "9",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧㄣˇ",
    tradition: "閩",
    sex: "",
    tone: 3
  },
  {
    char: "阀",
    spell: "fá",
    stroke: "9",
    radical: "门",
    struct: "半包围结构",
    five: "金",
    method: "形声",
    mark: "ㄈㄚˊ",
    tradition: "閥",
    sex: "",
    tone: 2
  },
  {
    char: "阁",
    spell: "gé",
    stroke: "9",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "閣",
    sex: "",
    tone: 2
  },
  {
    char: "阅",
    spell: "yuè",
    stroke: "10",
    radical: "门",
    struct: "半包围结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄝˋ",
    tradition: "閲",
    sex: "",
    tone: 4
  },
  {
    char: "阎",
    spell: "yán",
    stroke: "11",
    radical: "门",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "閻",
    sex: "",
    tone: 2
  },
  {
    char: "阐",
    spell: "chǎn",
    stroke: "11",
    radical: "门",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄢˇ",
    tradition: "闡",
    sex: "",
    tone: 3
  },
  {
    char: "阔",
    spell: "kuò",
    stroke: "12",
    radical: "门",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄎㄨㄛˋ",
    tradition: "闊",
    sex: "",
    tone: 4
  },
  {
    char: "队",
    spell: "duì",
    stroke: "4",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄟˋ",
    tradition: "隊",
    sex: "",
    tone: 4
  },
  {
    char: "阱",
    spell: "jǐng",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄥˇ",
    tradition: "阱",
    sex: "",
    tone: 3
  },
  {
    char: "防",
    spell: "fáng",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄤˊ",
    tradition: "防",
    sex: "",
    tone: 2
  },
  {
    char: "阳",
    spell: "yáng",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "-",
    mark: "ㄧㄤˊ",
    tradition: "陽",
    sex: "",
    tone: 2
  },
  {
    char: "阴",
    spell: "yīn",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄣ",
    tradition: "陰",
    sex: "",
    tone: 1
  },
  {
    char: "阵",
    spell: "zhèn",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄓㄣˋ",
    tradition: "陣",
    sex: "",
    tone: 4
  },
  {
    char: "阶",
    spell: "jiē",
    stroke: "6",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄝ",
    tradition: "階",
    sex: "",
    tone: 1
  },
  {
    char: "阻",
    spell: "zǔ",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄗㄨˇ",
    tradition: "阻",
    sex: "",
    tone: 3
  },
  {
    char: "阿",
    spell: "ā",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄚˋ",
    tradition: "阿",
    sex: "",
    tone: 1
  },
  {
    char: "附",
    spell: "fù",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄈㄨˋ",
    tradition: "附",
    sex: "",
    tone: 4
  },
  {
    char: "际",
    spell: "jì",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "際",
    sex: "",
    tone: 4
  },
  {
    char: "陆",
    spell: "lù",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄧㄡˋ",
    tradition: "陸",
    sex: "",
    tone: 4
  },
  {
    char: "陈",
    spell: "chén",
    stroke: "7",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄔㄣˊ",
    tradition: "陳",
    sex: "",
    tone: 2
  },
  {
    char: "陋",
    spell: "lòu",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄡˋ",
    tradition: "陋",
    sex: "",
    tone: 4
  },
  {
    char: "陌",
    spell: "mò",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄞˇ",
    tradition: "陌",
    sex: "",
    tone: 4
  },
  {
    char: "降",
    spell: "jiàng",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄤˋ",
    tradition: "降",
    sex: "",
    tone: 4
  },
  {
    char: "限",
    spell: "xiàn",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "限",
    sex: "",
    tone: 4
  },
  {
    char: "陕",
    spell: "shǎn",
    stroke: "8",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄢˇ",
    tradition: "陝",
    sex: "",
    tone: 3
  },
  {
    char: "陡",
    spell: "dǒu",
    stroke: "9",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄡˇ",
    tradition: "陡",
    sex: "",
    tone: 3
  },
  {
    char: "院",
    spell: "yuàn",
    stroke: "9",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢˋ",
    tradition: "院",
    sex: "",
    tone: 4
  },
  {
    char: "除",
    spell: "chú",
    stroke: "9",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "除",
    sex: "",
    tone: 2
  },
  {
    char: "陨",
    spell: "yǔn",
    stroke: "9",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄣˇ",
    tradition: "隕",
    sex: "",
    tone: 3
  },
  {
    char: "险",
    spell: "xiǎn",
    stroke: "9",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˇ",
    tradition: "險",
    sex: "",
    tone: 3
  },
  {
    char: "陪",
    spell: "péi",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄟˊ",
    tradition: "陪",
    sex: "",
    tone: 2
  },
  {
    char: "陵",
    spell: "líng",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "陵",
    sex: "",
    tone: 2
  },
  {
    char: "陶",
    spell: "táo",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄠˊ",
    tradition: "陶",
    sex: "",
    tone: 2
  },
  {
    char: "陷",
    spell: "xiàn",
    stroke: "10",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "陷",
    sex: "",
    tone: 4
  },
  {
    char: "隅",
    spell: "yú",
    stroke: "11",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩˊ",
    tradition: "隅",
    sex: "",
    tone: 2
  },
  {
    char: "隆",
    spell: "lóng",
    stroke: "11",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄥˊ",
    tradition: "隆",
    sex: "",
    tone: 2
  },
  {
    char: "随",
    spell: "suí",
    stroke: "11",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄟˊ",
    tradition: "隨",
    sex: "",
    tone: 2
  },
  {
    char: "隐",
    spell: "yǐn",
    stroke: "11",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄣˇ",
    tradition: "隱",
    sex: "",
    tone: 3
  },
  {
    char: "隔",
    spell: "gé",
    stroke: "12",
    radical: "阝",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜˊ",
    tradition: "隔",
    sex: "",
    tone: 2
  },
  {
    char: "隘",
    spell: "ài",
    stroke: "12",
    radical: "阝",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄞˋ",
    tradition: "隘",
    sex: "",
    tone: 4
  },
  {
    char: "隙",
    spell: "xì",
    stroke: "12",
    radical: "阝",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧˋ",
    tradition: "隙",
    sex: "",
    tone: 4
  },
  {
    char: "障",
    spell: "zhàng",
    stroke: "13",
    radical: "阝",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄤˋ",
    tradition: "障",
    sex: "",
    tone: 4
  },
  {
    char: "隧",
    spell: "suì",
    stroke: "14",
    radical: "阝",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄟˋ",
    tradition: "隧",
    sex: "",
    tone: 4
  },
  {
    char: "隶",
    spell: "lì",
    stroke: "8",
    radical: "隶",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧˋ",
    tradition: "隸",
    sex: "",
    tone: 4
  },
  {
    char: "难",
    spell: "nán",
    stroke: "10",
    radical: "又",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄋㄢˊ",
    tradition: "難",
    sex: "",
    tone: 2
  },
  {
    char: "雀",
    spell: "què",
    stroke: "11",
    radical: "小",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧㄠˇ",
    tradition: "雀",
    sex: "",
    tone: 4
  },
  {
    char: "雁",
    spell: "yàn",
    stroke: "12",
    radical: "厂",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "雁",
    sex: "女",
    tone: 4
  },
  {
    char: "雄",
    spell: "xióng",
    stroke: "12",
    radical: "隹",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄥˊ",
    tradition: "雄",
    sex: "男",
    tone: 2
  },
  {
    char: "雅",
    spell: "yǎ",
    stroke: "12",
    radical: "隹",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄚˇ",
    tradition: "雅",
    sex: "女",
    tone: 3
  },
  {
    char: "集",
    spell: "jí",
    stroke: "12",
    radical: "隹",
    struct: "上下结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧˊ",
    tradition: "集",
    sex: "",
    tone: 2
  },
  {
    char: "雇",
    spell: "gù",
    stroke: "12",
    radical: "户",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˋ",
    tradition: "雇",
    sex: "",
    tone: 4
  },
  {
    char: "雌",
    spell: "cí",
    stroke: "14",
    radical: "隹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄘˊ",
    tradition: "雌",
    sex: "",
    tone: 2
  },
  {
    char: "雏",
    spell: "chú",
    stroke: "13",
    radical: "隹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄨˊ",
    tradition: "雛",
    sex: "",
    tone: 2
  },
  {
    char: "雕",
    spell: "diāo",
    stroke: "16",
    radical: "隹",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄠ",
    tradition: "雕",
    sex: "",
    tone: 1
  },
  {
    char: "雨",
    spell: "yǔ",
    stroke: "8",
    radical: "雨",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄩˋ",
    tradition: "雨",
    sex: "女",
    tone: 3
  },
  {
    char: "雪",
    spell: "xuě",
    stroke: "11",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄩㄝˇ",
    tradition: "雪",
    sex: "女",
    tone: 3
  },
  {
    char: "雳",
    spell: "lì",
    stroke: "12",
    radical: "雨",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˋ",
    tradition: "靂",
    sex: "",
    tone: 4
  },
  {
    char: "零",
    spell: "líng",
    stroke: "13",
    radical: "雨",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˊ",
    tradition: "零",
    sex: "",
    tone: 2
  },
  {
    char: "雷",
    spell: "léi",
    stroke: "13",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄌㄟˊ",
    tradition: "雷",
    sex: "",
    tone: 2
  },
  {
    char: "雹",
    spell: "báo",
    stroke: "13",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˊ",
    tradition: "雹",
    sex: "",
    tone: 2
  },
  {
    char: "雾",
    spell: "wù",
    stroke: "13",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄨˋ",
    tradition: "霧",
    sex: "",
    tone: 4
  },
  {
    char: "需",
    spell: "xū",
    stroke: "14",
    radical: "雨",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄩ",
    tradition: "需",
    sex: "",
    tone: 1
  },
  {
    char: "震",
    spell: "zhèn",
    stroke: "15",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄓㄣˋ",
    tradition: "震",
    sex: "男",
    tone: 4
  },
  {
    char: "霉",
    spell: "méi",
    stroke: "15",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄟˊ",
    tradition: "黴",
    sex: "",
    tone: 2
  },
  {
    char: "霍",
    spell: "huò",
    stroke: "16",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄛˋ",
    tradition: "霍",
    sex: "",
    tone: 4
  },
  {
    char: "霎",
    spell: "shà",
    stroke: "16",
    radical: "雨",
    struct: "上中下结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄚˋ",
    tradition: "霎",
    sex: "",
    tone: 4
  },
  {
    char: "霜",
    spell: "shuāng",
    stroke: "17",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄕㄨㄤ",
    tradition: "霜",
    sex: "",
    tone: 1
  },
  {
    char: "霞",
    spell: "xiá",
    stroke: "17",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄚˊ",
    tradition: "霞",
    sex: "女",
    tone: 2
  },
  {
    char: "露",
    spell: "lù",
    stroke: "21",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄌㄡˋ",
    tradition: "露",
    sex: "女",
    tone: 4
  },
  {
    char: "霸",
    spell: "bà",
    stroke: "21",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "霸",
    sex: "",
    tone: 4
  },
  {
    char: "霹",
    spell: "pī",
    stroke: "21",
    radical: "雨",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧ",
    tradition: "霹",
    sex: "",
    tone: 1
  },
  {
    char: "青",
    spell: "qīng",
    stroke: "8",
    radical: "青",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄑㄧㄥ",
    tradition: "青",
    sex: "男",
    tone: 1
  },
  {
    char: "靖",
    spell: "jìng",
    stroke: "13",
    radical: "立",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄧㄥˋ",
    tradition: "靖",
    sex: "",
    tone: 4
  },
  {
    char: "静",
    spell: "jìng",
    stroke: "14",
    radical: "青",
    struct: "左右结构",
    five: "金",
    method: "-",
    mark: "ㄐㄧㄥˋ",
    tradition: "靜",
    sex: "女",
    tone: 4
  },
  {
    char: "非",
    spell: "fēi",
    stroke: "8",
    radical: "非",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄟ",
    tradition: "非",
    sex: "",
    tone: 1
  },
  {
    char: "靠",
    spell: "kào",
    stroke: "15",
    radical: "非",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄠˋ",
    tradition: "靠",
    sex: "",
    tone: 4
  },
  {
    char: "靡",
    spell: "mí",
    stroke: "19",
    radical: "麻",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄧˊ",
    tradition: "靡",
    sex: "",
    tone: 2
  },
  {
    char: "面",
    spell: "miàn",
    stroke: "9",
    radical: "面",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄇㄧㄢˋ",
    tradition: "麵",
    sex: "",
    tone: 4
  },
  {
    char: "革",
    spell: "gé",
    stroke: "9",
    radical: "革",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄜˊ",
    tradition: "革",
    sex: "",
    tone: 2
  },
  {
    char: "靴",
    spell: "xuē",
    stroke: "13",
    radical: "革",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄒㄩㄝ",
    tradition: "靴",
    sex: "",
    tone: 1
  },
  {
    char: "靶",
    spell: "bǎ",
    stroke: "13",
    radical: "革",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄚˋ",
    tradition: "靶",
    sex: "",
    tone: 3
  },
  {
    char: "鞋",
    spell: "xié",
    stroke: "15",
    radical: "革",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄒㄧㄝˊ",
    tradition: "鞋",
    sex: "",
    tone: 2
  },
  {
    char: "鞍",
    spell: "ān",
    stroke: "15",
    radical: "革",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄢ",
    tradition: "鞍",
    sex: "",
    tone: 1
  },
  {
    char: "鞠",
    spell: "jū",
    stroke: "17",
    radical: "革",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩ",
    tradition: "鞠",
    sex: "",
    tone: 1
  },
  {
    char: "鞭",
    spell: "biān",
    stroke: "18",
    radical: "革",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄢ",
    tradition: "鞭",
    sex: "",
    tone: 1
  },
  {
    char: "韧",
    spell: "rèn",
    stroke: "7",
    radical: "韦",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄖㄣˋ",
    tradition: "韌",
    sex: "",
    tone: 4
  },
  {
    char: "韩",
    spell: "hán",
    stroke: "12",
    radical: "韦",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄢˊ",
    tradition: "韓",
    sex: "",
    tone: 2
  },
  {
    char: "韭",
    spell: "jiǔ",
    stroke: "9",
    radical: "韭",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄐㄧㄡˇ",
    tradition: "韭",
    sex: "",
    tone: 3
  },
  {
    char: "音",
    spell: "yīn",
    stroke: "9",
    radical: "音",
    struct: "上下结构",
    five: "土",
    method: "-",
    mark: "ㄧㄣ",
    tradition: "音",
    sex: "",
    tone: 1
  },
  {
    char: "韵",
    spell: "yùn",
    stroke: "13",
    radical: "音",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄣˋ",
    tradition: "韵",
    sex: "男",
    tone: 4
  },
  {
    char: "页",
    spell: "yè",
    stroke: "6",
    radical: "页",
    struct: "独体结构",
    five: "金",
    method: "-",
    mark: "ㄧㄝˋ",
    tradition: "頁",
    sex: "",
    tone: 4
  },
  {
    char: "顶",
    spell: "dǐng",
    stroke: "8",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄧㄥˇ",
    tradition: "頂",
    sex: "",
    tone: 3
  },
  {
    char: "顷",
    spell: "qǐng",
    stroke: "8",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄑㄧㄥˇ",
    tradition: "頃",
    sex: "",
    tone: 3
  },
  {
    char: "项",
    spell: "xiàng",
    stroke: "9",
    radical: "工",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄒㄧㄤˋ",
    tradition: "項",
    sex: "",
    tone: 4
  },
  {
    char: "顺",
    spell: "shùn",
    stroke: "9",
    radical: "页",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄕㄨㄣˋ",
    tradition: "順",
    sex: "男",
    tone: 4
  },
  {
    char: "须",
    spell: "xū",
    stroke: "9",
    radical: "彡",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄩ",
    tradition: "須、鬚",
    sex: "",
    tone: 1
  },
  {
    char: "顽",
    spell: "wán",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄨㄢˊ",
    tradition: "頑",
    sex: "",
    tone: 2
  },
  {
    char: "顾",
    spell: "gù",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨˋ",
    tradition: "顧",
    sex: "",
    tone: 4
  },
  {
    char: "顿",
    spell: "dùn",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄣˋ",
    tradition: "頓",
    sex: "",
    tone: 4
  },
  {
    char: "颁",
    spell: "bān",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄢ",
    tradition: "頒",
    sex: "",
    tone: 1
  },
  {
    char: "颂",
    spell: "sòng",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄙㄨㄥˋ",
    tradition: "頌",
    sex: "",
    tone: 4
  },
  {
    char: "预",
    spell: "yù",
    stroke: "10",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄩˋ",
    tradition: "預",
    sex: "",
    tone: 4
  },
  {
    char: "颅",
    spell: "lú",
    stroke: "11",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄩˊ",
    tradition: "顱",
    sex: "",
    tone: 2
  },
  {
    char: "领",
    spell: "lǐng",
    stroke: "11",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄥˇ",
    tradition: "領",
    sex: "",
    tone: 3
  },
  {
    char: "颇",
    spell: "pō",
    stroke: "11",
    radical: "皮",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄛ",
    tradition: "頗",
    sex: "",
    tone: 1
  },
  {
    char: "颈",
    spell: "jǐng",
    stroke: "11",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄥˇ",
    tradition: "頸",
    sex: "",
    tone: 3
  },
  {
    char: "颊",
    spell: "jiá",
    stroke: "12",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˊ",
    tradition: "頰",
    sex: "",
    tone: 2
  },
  {
    char: "频",
    spell: "pín",
    stroke: "13",
    radical: "页",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄆㄧㄣˊ",
    tradition: "頻",
    sex: "",
    tone: 2
  },
  {
    char: "颓",
    spell: "tuí",
    stroke: "13",
    radical: "页",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄊㄨㄟˊ",
    tradition: "頹",
    sex: "",
    tone: 2
  },
  {
    char: "颖",
    spell: "yǐng",
    stroke: "13",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥˊ",
    tradition: "穎",
    sex: "女",
    tone: 3
  },
  {
    char: "颗",
    spell: "kē",
    stroke: "14",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄜ",
    tradition: "顆",
    sex: "",
    tone: 1
  },
  {
    char: "题",
    spell: "tí",
    stroke: "15",
    radical: "页",
    struct: "半包围结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄧˊ",
    tradition: "題",
    sex: "",
    tone: 2
  },
  {
    char: "颜",
    spell: "yán",
    stroke: "15",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˊ",
    tradition: "顏",
    sex: "",
    tone: 2
  },
  {
    char: "额",
    spell: "é",
    stroke: "15",
    radical: "页",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "額",
    sex: "",
    tone: 2
  },
  {
    char: "颠",
    spell: "diān",
    stroke: "16",
    radical: "页",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄉㄧㄢ",
    tradition: "顛",
    sex: "",
    tone: 1
  },
  {
    char: "颤",
    spell: "chàn",
    stroke: "19",
    radical: "页",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔㄢˋ",
    tradition: "顫",
    sex: "",
    tone: 4
  },
  {
    char: "风",
    spell: "fēng",
    stroke: "4",
    radical: "风",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄥˋ",
    tradition: "風",
    sex: "男",
    tone: 1
  },
  {
    char: "飒",
    spell: "sà",
    stroke: "9",
    radical: "立",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄙㄚˋ",
    tradition: "颯",
    sex: "",
    tone: 4
  },
  {
    char: "飘",
    spell: "piāo",
    stroke: "15",
    radical: "风",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄆㄧㄠ",
    tradition: "飄",
    sex: "女",
    tone: 1
  },
  {
    char: "飞",
    spell: "fēi",
    stroke: "3",
    radical: "飞",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄈㄟ",
    tradition: "飛",
    sex: "男",
    tone: 1
  },
  {
    char: "食",
    spell: "shí",
    stroke: "9",
    radical: "食",
    struct: "上下结构",
    five: "金",
    method: "会意",
    mark: "ㄙˋ",
    tradition: "食",
    sex: "",
    tone: 2
  },
  {
    char: "餐",
    spell: "cān",
    stroke: "16",
    radical: "食",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄘㄢ",
    tradition: "餐",
    sex: "",
    tone: 1
  },
  {
    char: "饥",
    spell: "jī",
    stroke: "5",
    radical: "饣",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧ",
    tradition: "飢、饑",
    sex: "",
    tone: 1
  },
  {
    char: "饭",
    spell: "fàn",
    stroke: "7",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄈㄢˋ",
    tradition: "飯",
    sex: "",
    tone: 4
  },
  {
    char: "饮",
    spell: "yǐn",
    stroke: "7",
    radical: "饣",
    struct: "左右结构",
    five: "土",
    method: "会意",
    mark: "ㄧㄣˋ",
    tradition: "飲",
    sex: "",
    tone: 3
  },
  {
    char: "饰",
    spell: "shì",
    stroke: "8",
    radical: "饣",
    struct: "左右结构",
    five: "",
    method: "形声",
    mark: "ㄕˋ",
    tradition: "飾",
    sex: "",
    tone: 4
  },
  {
    char: "饱",
    spell: "bǎo",
    stroke: "8",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄠˇ",
    tradition: "飽",
    sex: "",
    tone: 3
  },
  {
    char: "饲",
    spell: "sì",
    stroke: "8",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄙˋ",
    tradition: "飼",
    sex: "",
    tone: 4
  },
  {
    char: "饵",
    spell: "ěr",
    stroke: "9",
    radical: "饣",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄦˇ",
    tradition: "餌",
    sex: "",
    tone: 3
  },
  {
    char: "饶",
    spell: "ráo",
    stroke: "9",
    radical: "饣",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄖㄠˊ",
    tradition: "饒",
    sex: "",
    tone: 2
  },
  {
    char: "饺",
    spell: "jiǎo",
    stroke: "9",
    radical: "饣",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠˇ",
    tradition: "餃",
    sex: "",
    tone: 3
  },
  {
    char: "饼",
    spell: "bǐng",
    stroke: "9",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄥˇ",
    tradition: "餅",
    sex: "",
    tone: 3
  },
  {
    char: "饿",
    spell: "è",
    stroke: "10",
    radical: "饣",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˇ",
    tradition: "餓",
    sex: "",
    tone: 4
  },
  {
    char: "馁",
    spell: "něi",
    stroke: "10",
    radical: "饣",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄋㄟˇ",
    tradition: "餒",
    sex: "",
    tone: 3
  },
  {
    char: "馅",
    spell: "xiàn",
    stroke: "11",
    radical: "饣",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄧㄢˋ",
    tradition: "餡",
    sex: "",
    tone: 4
  },
  {
    char: "馆",
    spell: "guǎn",
    stroke: "11",
    radical: "饣",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄨㄢˇ",
    tradition: "館",
    sex: "",
    tone: 3
  },
  {
    char: "馋",
    spell: "chán",
    stroke: "12",
    radical: "饣",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄔㄢˊ",
    tradition: "饞",
    sex: "",
    tone: 2
  },
  {
    char: "馍",
    spell: "mó",
    stroke: "13",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "饃",
    sex: "",
    tone: 2
  },
  {
    char: "馏",
    spell: "liú",
    stroke: "13",
    radical: "饣",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄡˊ",
    tradition: "餾",
    sex: "",
    tone: 2
  },
  {
    char: "馒",
    spell: "mán",
    stroke: "14",
    radical: "饣",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄢˊ",
    tradition: "饅",
    sex: "",
    tone: 2
  },
  {
    char: "首",
    spell: "shǒu",
    stroke: "9",
    radical: "首",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄡˇ",
    tradition: "首",
    sex: "",
    tone: 3
  },
  {
    char: "香",
    spell: "xiāng",
    stroke: "9",
    radical: "香",
    struct: "上下结构",
    five: "水",
    method: "会意",
    mark: "ㄒㄧㄤ",
    tradition: "香",
    sex: "女",
    tone: 1
  },
  {
    char: "马",
    spell: "mǎ",
    stroke: "3",
    radical: "马",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄚˇ",
    tradition: "馬",
    sex: "",
    tone: 3
  },
  {
    char: "驮",
    spell: "tuó",
    stroke: "6",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄉㄨㄛˇ",
    tradition: "馱",
    sex: "",
    tone: 2
  },
  {
    char: "驯",
    spell: "xùn",
    stroke: "6",
    radical: "马",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄒㄩㄣˋ",
    tradition: "馴",
    sex: "",
    tone: 4
  },
  {
    char: "驰",
    spell: "chí",
    stroke: "6",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄔˊ",
    tradition: "馳",
    sex: "",
    tone: 2
  },
  {
    char: "驱",
    spell: "qū",
    stroke: "7",
    radical: "马",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄩ",
    tradition: "驅",
    sex: "",
    tone: 1
  },
  {
    char: "驳",
    spell: "bó",
    stroke: "7",
    radical: "马",
    struct: "左右结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄛˊ",
    tradition: "駁",
    sex: "",
    tone: 2
  },
  {
    char: "驴",
    spell: "lǘ",
    stroke: "7",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˊ",
    tradition: "驢",
    sex: "",
    tone: 2
  },
  {
    char: "驶",
    spell: "shǐ",
    stroke: "8",
    radical: "马",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄕˇ",
    tradition: "駛",
    sex: "",
    tone: 3
  },
  {
    char: "驹",
    spell: "jū",
    stroke: "8",
    radical: "马",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄩ",
    tradition: "駒",
    sex: "",
    tone: 1
  },
  {
    char: "驻",
    spell: "zhù",
    stroke: "8",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄓㄨˋ",
    tradition: "駐",
    sex: "",
    tone: 4
  },
  {
    char: "驼",
    spell: "tuó",
    stroke: "8",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛˊ",
    tradition: "駝",
    sex: "",
    tone: 2
  },
  {
    char: "驾",
    spell: "jià",
    stroke: "8",
    radical: "马",
    struct: "上下结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄚˋ",
    tradition: "駕",
    sex: "",
    tone: 4
  },
  {
    char: "骂",
    spell: "mà",
    stroke: "9",
    radical: "马",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄚˋ",
    tradition: "駡",
    sex: "",
    tone: 4
  },
  {
    char: "骄",
    spell: "jiāo",
    stroke: "9",
    radical: "马",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄠ",
    tradition: "驕",
    sex: "",
    tone: 1
  },
  {
    char: "骆",
    spell: "luò",
    stroke: "9",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄛˋ",
    tradition: "駱",
    sex: "",
    tone: 4
  },
  {
    char: "骇",
    spell: "hài",
    stroke: "9",
    radical: "马",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄞˋ",
    tradition: "駭",
    sex: "",
    tone: 4
  },
  {
    char: "验",
    spell: "yàn",
    stroke: "10",
    radical: "马",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄢˋ",
    tradition: "驗",
    sex: "",
    tone: 4
  },
  {
    char: "骏",
    spell: "jùn",
    stroke: "10",
    radical: "马",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄐㄩㄣˋ",
    tradition: "駿",
    sex: "",
    tone: 4
  },
  {
    char: "骑",
    spell: "qí",
    stroke: "11",
    radical: "马",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "騎",
    sex: "",
    tone: 2
  },
  {
    char: "骗",
    spell: "piàn",
    stroke: "12",
    radical: "马",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄧㄢˋ",
    tradition: "騙",
    sex: "",
    tone: 4
  },
  {
    char: "骚",
    spell: "sāo",
    stroke: "12",
    radical: "马",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄠ",
    tradition: "騷",
    sex: "",
    tone: 1
  },
  {
    char: "骡",
    spell: "luó",
    stroke: "14",
    radical: "马",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄨㄛˊ",
    tradition: "騾",
    sex: "",
    tone: 2
  },
  {
    char: "骤",
    spell: "zhòu",
    stroke: "17",
    radical: "马",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄓㄡˋ",
    tradition: "驟",
    sex: "",
    tone: 4
  },
  {
    char: "骨",
    spell: "gǔ",
    stroke: "9",
    radical: "骨",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨˇ",
    tradition: "骨",
    sex: "",
    tone: 3
  },
  {
    char: "髓",
    spell: "suǐ",
    stroke: "21",
    radical: "骨",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄙㄨㄟˇ",
    tradition: "髓",
    sex: "",
    tone: 3
  },
  {
    char: "高",
    spell: "gāo",
    stroke: "10",
    radical: "高",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄍㄠ",
    tradition: "高",
    sex: "",
    tone: 1
  },
  {
    char: "鬓",
    spell: "bìn",
    stroke: "20",
    radical: "髟",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄣˋ",
    tradition: "鬢",
    sex: "",
    tone: 4
  },
  {
    char: "鬼",
    spell: "guǐ",
    stroke: "9",
    radical: "鬼",
    struct: "独体结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄟˇ",
    tradition: "鬼",
    sex: "",
    tone: 3
  },
  {
    char: "魁",
    spell: "kuí",
    stroke: "13",
    radical: "鬼",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄎㄨㄟˊ",
    tradition: "魁",
    sex: "",
    tone: 2
  },
  {
    char: "魂",
    spell: "hún",
    stroke: "13",
    radical: "鬼",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄣˊ",
    tradition: "魂",
    sex: "",
    tone: 2
  },
  {
    char: "魄",
    spell: "pò",
    stroke: "14",
    radical: "白",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄛˊ",
    tradition: "魄",
    sex: "",
    tone: 4
  },
  {
    char: "魏",
    spell: "wèi",
    stroke: "17",
    radical: "鬼",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄨㄟˋ",
    tradition: "魏",
    sex: "",
    tone: 4
  },
  {
    char: "魔",
    spell: "mó",
    stroke: "20",
    radical: "麻",
    struct: "半包围结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˊ",
    tradition: "魔",
    sex: "",
    tone: 2
  },
  {
    char: "鱼",
    spell: "yú",
    stroke: "8",
    radical: "鱼",
    struct: "上下结构",
    five: "水",
    method: "-",
    mark: "ㄩˊ",
    tradition: "魚",
    sex: "",
    tone: 2
  },
  {
    char: "鲁",
    spell: "lǔ",
    stroke: "12",
    radical: "鱼",
    struct: "上下结构",
    five: "火",
    method: "会意",
    mark: "ㄌㄩˇ",
    tradition: "魯",
    sex: "",
    tone: 3
  },
  {
    char: "鲜",
    spell: "xiān",
    stroke: "14",
    radical: "鱼",
    struct: "左右结构",
    five: "金",
    method: "会意",
    mark: "ㄒㄧㄢˇ",
    tradition: "鮮",
    sex: "",
    tone: 1
  },
  {
    char: "鲤",
    spell: "lǐ",
    stroke: "15",
    radical: "鱼",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧˇ",
    tradition: "鯉",
    sex: "",
    tone: 3
  },
  {
    char: "鲫",
    spell: "jì",
    stroke: "15",
    radical: "鱼",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧˋ",
    tradition: "鯽",
    sex: "",
    tone: 4
  },
  {
    char: "鲸",
    spell: "jīng",
    stroke: "16",
    radical: "鱼",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄐㄧㄥ",
    tradition: "鯨",
    sex: "",
    tone: 1
  },
  {
    char: "鳄",
    spell: "è",
    stroke: "17",
    radical: "鱼",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˇ",
    tradition: "鰐",
    sex: "",
    tone: 4
  },
  {
    char: "鳍",
    spell: "qí",
    stroke: "18",
    radical: "鱼",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄑㄧˊ",
    tradition: "鰭",
    sex: "",
    tone: 2
  },
  {
    char: "鳖",
    spell: "biē",
    stroke: "19",
    radical: "鱼",
    struct: "上下结构",
    five: "水",
    method: "形声",
    mark: "ㄅㄧㄝ",
    tradition: "鱉",
    sex: "",
    tone: 1
  },
  {
    char: "鳞",
    spell: "lín",
    stroke: "20",
    radical: "鱼",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧㄣˊ",
    tradition: "鱗",
    sex: "",
    tone: 2
  },
  {
    char: "鸟",
    spell: "niǎo",
    stroke: "5",
    radical: "鸟",
    struct: "独体结构",
    five: "土",
    method: "-",
    mark: "ㄉㄧㄠˇ",
    tradition: "鳥",
    sex: "",
    tone: 3
  },
  {
    char: "鸠",
    spell: "jiū",
    stroke: "7",
    radical: "鸟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄐㄧㄡ",
    tradition: "鳩",
    sex: "",
    tone: 1
  },
  {
    char: "鸡",
    spell: "jī",
    stroke: "7",
    radical: "又、鸟",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄐㄧ",
    tradition: "鷄",
    sex: "",
    tone: 1
  },
  {
    char: "鸣",
    spell: "míng",
    stroke: "8",
    radical: "口",
    struct: "左右结构",
    five: "水",
    method: "-",
    mark: "ㄇㄧㄥˊ",
    tradition: "鳴",
    sex: "男",
    tone: 2
  },
  {
    char: "鸥",
    spell: "ōu",
    stroke: "9",
    radical: "鸟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄡ",
    tradition: "鷗",
    sex: "",
    tone: 1
  },
  {
    char: "鸦",
    spell: "yā",
    stroke: "9",
    radical: "牙",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚ",
    tradition: "鴉",
    sex: "",
    tone: 1
  },
  {
    char: "鸭",
    spell: "yā",
    stroke: "10",
    radical: "鸟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄚ",
    tradition: "鴨",
    sex: "",
    tone: 1
  },
  {
    char: "鸯",
    spell: "yāng",
    stroke: "10",
    radical: "鸟",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄧㄤ",
    tradition: "鴦",
    sex: "",
    tone: 1
  },
  {
    char: "鸳",
    spell: "yuān",
    stroke: "10",
    radical: "鸟",
    struct: "上下结构",
    five: "土",
    method: "形声",
    mark: "ㄩㄢ",
    tradition: "鴛",
    sex: "",
    tone: 1
  },
  {
    char: "鸵",
    spell: "tuó",
    stroke: "10",
    radical: "鸟",
    struct: "左右结构",
    five: "火",
    method: "形声",
    mark: "ㄊㄨㄛˊ",
    tradition: "鸵",
    sex: "",
    tone: 2
  },
  {
    char: "鸽",
    spell: "gē",
    stroke: "11",
    radical: "鸟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄍㄜ",
    tradition: "鴿",
    sex: "",
    tone: 1
  },
  {
    char: "鸿",
    spell: "hóng",
    stroke: "11",
    radical: "氵",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄨㄥˊ",
    tradition: "鴻",
    sex: "男",
    tone: 2
  },
  {
    char: "鹃",
    spell: "juān",
    stroke: "12",
    radical: "鸟",
    struct: "左右结构",
    five: "木",
    method: "-",
    mark: "ㄐㄩㄢ",
    tradition: "鵑",
    sex: "",
    tone: 1
  },
  {
    char: "鹅",
    spell: "é",
    stroke: "12",
    radical: "鸟",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄜˊ",
    tradition: "鵝",
    sex: "",
    tone: 2
  },
  {
    char: "鹉",
    spell: "wǔ",
    stroke: "13",
    radical: "鸟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄨˇ",
    tradition: "鵡",
    sex: "",
    tone: 3
  },
  {
    char: "鹊",
    spell: "què",
    stroke: "13",
    radical: "鸟",
    struct: "左右结构",
    five: "金",
    method: "形声",
    mark: "ㄑㄩㄝˋ",
    tradition: "鵲",
    sex: "",
    tone: 4
  },
  {
    char: "鹏",
    spell: "péng",
    stroke: "13",
    radical: "鸟",
    struct: "左中右结构",
    five: "水",
    method: "形声",
    mark: "ㄆㄥˊ",
    tradition: "鵬",
    sex: "男",
    tone: 2
  },
  {
    char: "鹤",
    spell: "hè",
    stroke: "15",
    radical: "鸟",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄏㄜˋ",
    tradition: "鶴",
    sex: "",
    tone: 4
  },
  {
    char: "鹦",
    spell: "yīng",
    stroke: "16",
    radical: "鸟",
    struct: "左右结构",
    five: "土",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "鸚",
    sex: "",
    tone: 1
  },
  {
    char: "鹰",
    spell: "yīng",
    stroke: "18",
    radical: "广",
    struct: "半包围结构",
    five: "木",
    method: "形声",
    mark: "ㄧㄥ",
    tradition: "鷹",
    sex: "",
    tone: 1
  },
  {
    char: "鹿",
    spell: "lù",
    stroke: "11",
    radical: "鹿",
    struct: "半包围结构",
    five: "火",
    method: "-",
    mark: "ㄌㄩˋ",
    tradition: "鹿",
    sex: "",
    tone: 4
  },
  {
    char: "麦",
    spell: "mài",
    stroke: "7",
    radical: "麦",
    struct: "独体结构",
    five: "水",
    method: "-",
    mark: "ㄇㄞˋ",
    tradition: "麥",
    sex: "男",
    tone: 4
  },
  {
    char: "麸",
    spell: "fū",
    stroke: "11",
    radical: "麦",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄈㄨ",
    tradition: "麩",
    sex: "",
    tone: 1
  },
  {
    char: "麻",
    spell: "má",
    stroke: "11",
    radical: "麻",
    struct: "半包围结构",
    five: "水",
    method: "会意",
    mark: "ㄇㄚˊ",
    tradition: "麻",
    sex: "",
    tone: 2
  },
  {
    char: "黄",
    spell: "huáng",
    stroke: "11",
    radical: "黄",
    struct: "上中下结构",
    five: "土",
    method: "-",
    mark: "ㄏㄨㄤˊ",
    tradition: "黄",
    sex: "",
    tone: 2
  },
  {
    char: "黍",
    spell: "shǔ",
    stroke: "12",
    radical: "黍",
    struct: "上下结构",
    five: "金",
    method: "形声",
    mark: "ㄕㄨˇ",
    tradition: "黍",
    sex: "",
    tone: 3
  },
  {
    char: "黎",
    spell: "lí",
    stroke: "15",
    radical: "氺",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄌㄧˊ",
    tradition: "黎",
    sex: "",
    tone: 2
  },
  {
    char: "黑",
    spell: "hēi",
    stroke: "12",
    radical: "黑",
    struct: "上下结构",
    five: "土",
    method: "会意",
    mark: "ㄏㄟ",
    tradition: "黑",
    sex: "",
    tone: 1
  },
  {
    char: "黔",
    spell: "qián",
    stroke: "16",
    radical: "黑",
    struct: "左右结构",
    five: "木",
    method: "形声",
    mark: "ㄑㄧㄢˊ",
    tradition: "黔",
    sex: "",
    tone: 2
  },
  {
    char: "默",
    spell: "mò",
    stroke: "16",
    radical: "黑",
    struct: "左右结构",
    five: "水",
    method: "形声",
    mark: "ㄇㄛˋ",
    tradition: "默",
    sex: "",
    tone: 4
  },
  {
    char: "鼎",
    spell: "dǐng",
    stroke: "12",
    radical: "鼎",
    struct: "上下结构",
    five: "火",
    method: "-",
    mark: "ㄉㄧㄥˇ",
    tradition: "鼎",
    sex: "",
    tone: 3
  },
  {
    char: "鼓",
    spell: "gǔ",
    stroke: "13",
    radical: "鼓",
    struct: "左右结构",
    five: "木",
    method: "会意",
    mark: "ㄍㄨˇ",
    tradition: "鼓",
    sex: "",
    tone: 3
  },
  {
    char: "鼠",
    spell: "shǔ",
    stroke: "13",
    radical: "鼠",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄕㄨˇ",
    tradition: "鼠",
    sex: "",
    tone: 3
  },
  {
    char: "鼻",
    spell: "bí",
    stroke: "14",
    radical: "鼻",
    struct: "上中下结构",
    five: "水",
    method: "会意",
    mark: "ㄅㄧˊ",
    tradition: "鼻",
    sex: "",
    tone: 2
  },
  {
    char: "齐",
    spell: "qí",
    stroke: "6",
    radical: "齐",
    struct: "上下结构",
    five: "金",
    method: "-",
    mark: "ㄐㄧˋ",
    tradition: "齊",
    sex: "",
    tone: 2
  },
  {
    char: "齿",
    spell: "chǐ",
    stroke: "8",
    radical: "齿",
    struct: "上下结构",
    five: "火",
    method: "形声",
    mark: "ㄔˇ",
    tradition: "齒",
    sex: "",
    tone: 3
  },
  {
    char: "龄",
    spell: "líng",
    stroke: "13",
    radical: "齿",
    struct: "左右结构",
    five: "火",
    method: "-",
    mark: "ㄌㄧㄥˊ",
    tradition: "齡",
    sex: "",
    tone: 2
  },
  {
    char: "龙",
    spell: "lóng",
    stroke: "5",
    radical: "龙",
    struct: "独体结构",
    five: "火",
    method: "-",
    mark: "ㄌㄨㄥˊ",
    tradition: "龍",
    sex: "男",
    tone: 2
  },
  {
    char: "龟",
    spell: "guī",
    stroke: "7",
    radical: "龟",
    struct: "上下结构",
    five: "木",
    method: "-",
    mark: "ㄍㄨㄟ",
    tradition: "龜",
    sex: "",
    tone: 1
  }
];
const utilRandom = (arr) => {
  const length = arr.length;
  const randomIndex = Math.floor(Math.random() * length);
  return arr[randomIndex];
};
const getCnChar = (info, nums = 50) => {
  let results = [];
  const getName = (info2) => {
    let result = [];
    const { sex } = info2;
    const firstConfig = utilRandom(t.filter((item) => !item.sex || item.sex === sex));
    result.push(firstConfig);
    const secondConfig = utilRandom(t.filter((item) => !item.sex || item.sex === sex));
    result.push(secondConfig);
    return result;
  };
  for (let i = 0; i < nums; i++) {
    const name = getName(info);
    results.push(name);
  }
  info.names = results;
};
const getElement5 = (info) => {
  const { yearGan, yearZhi, monthGan, monthZhi, dayGan, dayZhi, timeGan, timeZhi } = info.char8 ?? {};
  const char8Arr = [yearGan, yearZhi, monthGan, monthZhi, dayGan, dayZhi, timeGan, timeZhi];
  const element5Data = p(char8Arr);
  info.element5 = element5Data;
};
const getChar8 = (info) => {
  const dateData = info.dateData;
  let char8Data = ot(dateData.year, dateData.month, dateData.day);
  info.char8 = char8Data;
  return char8Data;
};
const getLunar = (info) => {
  const dateData = info.dateData;
  let lunarData = W$1(dateData.year, dateData.month, dateData.day);
  info.lunar = lunarData;
  return lunarData;
};
const getYearMonthDay = (info) => {
  const { date: date5, time } = info;
  let year, month, day, hour, minute, second;
  const dayjsDate = dayjs(`${date5} ${time}`);
  year = dayjsDate.year();
  month = dayjsDate.month();
  day = dayjsDate.date();
  hour = dayjsDate.hour();
  minute = dayjsDate.minute();
  second = dayjsDate.second();
  const result = {
    year,
    month: month + 1,
    day,
    hour,
    minute,
    second
  };
  info.dateData = result;
  return result;
};
const _sfc_main$3 = {
  components: {
    ElButton,
    ElForm,
    ElFormItem,
    ElInput,
    ElDatePicker,
    ElTimePicker,
    ElSelect,
    ElOption
  },
  data() {
    return {
      formValue: {
        surname: "",
        sex: "",
        date: "",
        time: ""
      },
      formRules: {
        surname: [{ required: true, message: "请输入姓氏", trigger: "blur" }],
        sex: [{ required: true, message: "请输入性别", trigger: "blur" }],
        date: [{ required: true, message: "请输入日期", trigger: "blur" }],
        time: [{ required: true, message: "请输入时间", trigger: "blur" }]
      },
      formInfo: {}
    };
  },
  methods: {
    async handlerSumbit() {
      const formEl = this.$refs.formRef;
      if (!formEl)
        return;
      const validate = await formEl.validate();
      if (validate) {
        this.handlerData();
      }
    },
    handlerReset() {
      const formEl = this.$refs.formRef;
      if (!formEl)
        return;
      formEl.resetFields();
    },
    handlerData() {
      let info = { ...this.formValue };
      getYearMonthDay(info);
      getLunar(info);
      getChar8(info);
      getElement5(info);
      getCnChar(info);
      this.formInfo = info;
      console.log(info, this.formInfo);
    }
  }
};
const _withScopeId = (n) => (pushScopeId("data-v-5aed213a"), n = n(), popScopeId(), n);
const _hoisted_1$1 = { class: "content-wrap" };
const _hoisted_2 = {
  key: 0,
  class: "result"
};
const _hoisted_3 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "result-title" }, "生成结果", -1));
const _hoisted_4 = { class: "result-names" };
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_input = resolveComponent("el-input");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_date_picker = resolveComponent("el-date-picker");
  const _component_el_time_picker = resolveComponent("el-time-picker");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_form = resolveComponent("el-form");
  return openBlock(), createElementBlock("div", _hoisted_1$1, [
    createVNode(_component_el_form, {
      model: $data.formValue,
      rules: $data.formRules,
      ref: "formRef",
      "status-icon": "",
      "label-width": "85px",
      size: "large"
    }, {
      default: withCtx(() => [
        createVNode(_component_el_form_item, {
          label: "姓氏",
          prop: "surname"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              modelValue: $data.formValue.surname,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.formValue.surname = $event),
              placeholder: "输入孩子的姓氏",
              style: { "width": "500px" }
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }),
        createVNode(_component_el_form_item, {
          label: "性别",
          prop: "sex"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              modelValue: $data.formValue.sex,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.formValue.sex = $event),
              placeholder: "选择孩子的性别",
              clearable: "",
              style: { "width": "500px" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_option, {
                  label: "男",
                  value: "男"
                }),
                createVNode(_component_el_option, {
                  label: "女",
                  value: "女"
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }),
        createVNode(_component_el_form_item, {
          label: "阳历日期",
          prop: "date"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_date_picker, {
              modelValue: $data.formValue.date,
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.formValue.date = $event),
              type: "date",
              "value-format": "YYYY-MM-DD",
              placeholder: "选择一个日期",
              style: { "width": "500px" }
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }),
        createVNode(_component_el_form_item, {
          label: "时间",
          prop: "time"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_time_picker, {
              modelValue: $data.formValue.time,
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.formValue.time = $event),
              "value-format": "HH:mm",
              placeholder: "选择一个时间",
              style: { "width": "500px" }
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }),
        createVNode(_component_el_form_item, null, {
          default: withCtx(() => [
            createVNode(_component_el_button, {
              type: "primary",
              onClick: $options.handlerSumbit
            }, {
              default: withCtx(() => [
                createTextVNode("起名")
              ]),
              _: 1
            }, 8, ["onClick"]),
            createVNode(_component_el_button, {
              type: "primary",
              onClick: $options.handlerReset
            }, {
              default: withCtx(() => [
                createTextVNode("重置")
              ]),
              _: 1
            }, 8, ["onClick"])
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["model", "rules"]),
    $data.formInfo.names && Array.isArray($data.formInfo.names) && !!$data.formInfo.names.length ? (openBlock(), createElementBlock("div", _hoisted_2, [
      _hoisted_3,
      createBaseVNode("div", _hoisted_4, [
        (openBlock(true), createElementBlock(Fragment, null, renderList($data.formInfo.names, (item, index) => {
          return openBlock(), createElementBlock("div", {
            class: "name-item",
            key: index
          }, toDisplayString($data.formInfo.surname + item.map((ele) => ele.char).join("")), 1);
        }), 128))
      ])
    ])) : createCommentVNode("", true)
  ]);
}
const Content = /* @__PURE__ */ _export_sfc$1(_sfc_main$3, [["render", _sfc_render$1], ["__scopeId", "data-v-5aed213a"]]);
const _sfc_main$2 = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div");
}
const Footer = /* @__PURE__ */ _export_sfc$1(_sfc_main$2, [["render", _sfc_render]]);
const _hoisted_1 = { class: "wrap" };
const _sfc_main$1 = {
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(Content),
        createVNode(Footer)
      ]);
    };
  }
};
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{"layout":false},"headers":[],"relativePath":"index.md","filePath":"index.md"}');
const __default__ = { name: "index.md" };
const _sfc_main = /* @__PURE__ */ Object.assign(__default__, {
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createVNode(_sfc_main$1)
      ]);
    };
  }
});
export {
  __pageData,
  _sfc_main as default
};
